/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 40.0.0 Mon Mar  3 20:04:19 2025.
 */

#ifndef MCU_233_H
#define MCU_233_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MCU_233_VCU_103H_FRAME_ID (0x103u)
#define MCU_233_VCU_200H_FRAME_ID (0x200u)
#define MCU_233_VCU_ICM_3_F_DH_FRAME_ID (0x3fdu)
#define MCU_233_VCU_106H_FRAME_ID (0x106u)
#define MCU_233_VCU_18_FH_FRAME_ID (0x18fu)
#define MCU_233_VCU_520H_FRAME_ID (0x520u)
#define MCU_233_VCU_526H_FRAME_ID (0x526u)
#define MCU_233_VCU_IHU_2_F_EH_FRAME_ID (0x2feu)
#define MCU_233_VCU_PEPS_527H_FRAME_ID (0x527u)
#define MCU_233_SSW_120H_FRAME_ID (0x120u)
#define MCU_233_BMS_099H_FRAME_ID (0x99u)
#define MCU_233_BMS_243H_FRAME_ID (0x243u)
#define MCU_233_BMS_244H_FRAME_ID (0x244u)
#define MCU_233_BMS_246H_FRAME_ID (0x246u)
#define MCU_233_BMS_249H_FRAME_ID (0x249u)
#define MCU_233_BMS_252H_FRAME_ID (0x252u)
#define MCU_233_BMS_254H_FRAME_ID (0x254u)
#define MCU_233_BMS_PACK1_260H_FRAME_ID (0x260u)
#define MCU_233_BMS_PACK1_262H_FRAME_ID (0x262u)
#define MCU_233_BMS_PACK1_268H_FRAME_ID (0x268u)
#define MCU_233_BMS_PACK1_26_CH_FRAME_ID (0x26cu)
#define MCU_233_BMS_3_E1H_FRAME_ID (0x3e1u)
#define MCU_233_FVB_521H_FRAME_ID (0x521u)
#define MCU_233_MCU_097H_FRAME_ID (0x97u)
#define MCU_233_MCU_098H_FRAME_ID (0x98u)
#define MCU_233_MCU_26_EH_FRAME_ID (0x26eu)
#define MCU_233_MCU_3_E5H_FRAME_ID (0x3e5u)
#define MCU_233_EOP_1_A0H_FRAME_ID (0x1a0u)
#define MCU_233_DCDC_1_F7H_FRAME_ID (0x1f7u)
#define MCU_233_BOBC_2_E8H_FRAME_ID (0x2e8u)
#define MCU_233_BOBC_297H_FRAME_ID (0x297u)
#define MCU_233_EPS_117H_FRAME_ID (0x117u)
#define MCU_233_EPS_131H_FRAME_ID (0x131u)
#define MCU_233_EHB_13_AH_FRAME_ID (0x13au)
#define MCU_233_EHB_13_CH_FRAME_ID (0x13cu)
#define MCU_233_EHB_13_BH_FRAME_ID (0x13bu)
#define MCU_233_ESC_101H_FRAME_ID (0x101u)
#define MCU_233_ESC_102H_FRAME_ID (0x102u)
#define MCU_233_ESC_104H_FRAME_ID (0x104u)
#define MCU_233_ESC_109H_FRAME_ID (0x109u)
#define MCU_233_ESC_125H_FRAME_ID (0x125u)
#define MCU_233_ESC_126H_FRAME_ID (0x126u)
#define MCU_233_ESC_108H_FRAME_ID (0x108u)
#define MCU_233_ESC_10_CH_FRAME_ID (0x10cu)
#define MCU_233_ADAS_CAM_107H_FRAME_ID (0x107u)
#define MCU_233_ADAS_CAM_10_AH_FRAME_ID (0x10au)
#define MCU_233_ADAS_CAM_118H_FRAME_ID (0x118u)
#define MCU_233_ADAS_CAM_140H_FRAME_ID (0x140u)
#define MCU_233_ADAS_CAM_318H_FRAME_ID (0x318u)
#define MCU_233_ADAS_RAD_070H_FRAME_ID (0x70u)
#define MCU_233_ADAS_RL_RAD_071H_FRAME_ID (0x71u)
#define MCU_233_ADAS_RR_RAD_02_BH_FRAME_ID (0x2bu)
#define MCU_233_ADAS_NM_406H_FRAME_ID (0x406u)
#define MCU_233_ADAS_NM_408H_FRAME_ID (0x408u)
#define MCU_233_ACU_021H_FRAME_ID (0x21u)
#define MCU_233_VCU_119H_FRAME_ID (0x119u)
#define MCU_233_VCU_123H_FRAME_ID (0x123u)
#define MCU_233_VCU_251H_FRAME_ID (0x251u)
#define MCU_233_VCU_201H_FRAME_ID (0x201u)
#define MCU_233_ACMM_IHU_301H_FRAME_ID (0x301u)
#define MCU_233_ACMM_IHU_302H_FRAME_ID (0x302u)
#define MCU_233_ACMM_PTC_303H_FRAME_ID (0x303u)
#define MCU_233_ACMM_EAC_304H_FRAME_ID (0x304u)
#define MCU_233_ACMM_307H_FRAME_ID (0x307u)
#define MCU_233_ACMM_308H_FRAME_ID (0x308u)
#define MCU_233_ACMM_331H_FRAME_ID (0x331u)
#define MCU_233_ACMM_332H_FRAME_ID (0x332u)
#define MCU_233_ACMM_333H_FRAME_ID (0x333u)
#define MCU_233_ACMM_334H_FRAME_ID (0x334u)
#define MCU_233_ACMM_FR34_CC_335H_FRAME_ID (0x335u)
#define MCU_233_ACMM_RR45_CC_336H_FRAME_ID (0x336u)
#define MCU_233_SMM_2_F4H_FRAME_ID (0x2f4u)
#define MCU_233_ICM_3_F_EH_FRAME_ID (0x3feu)
#define MCU_233_ICM_NM_412H_FRAME_ID (0x412u)
#define MCU_233_VSP_283H_FRAME_ID (0x283u)
#define MCU_233_WCM_347H_FRAME_ID (0x347u)
#define MCU_233_BCM_211H_FRAME_ID (0x211u)
#define MCU_233_BCM_105H_FRAME_ID (0x105u)
#define MCU_233_BCM_112H_FRAME_ID (0x112u)
#define MCU_233_BCM_113H_FRAME_ID (0x113u)
#define MCU_233_BCM_111H_FRAME_ID (0x111u)
#define MCU_233_BCM_114H_FRAME_ID (0x114u)
#define MCU_233_BCM_212H_FRAME_ID (0x212u)
#define MCU_233_BCM_VCU_AUTH_022H_FRAME_ID (0x22u)
#define MCU_233_BCM_TBOX_AUTH_024H_FRAME_ID (0x24u)
#define MCU_233_BCM_ESCL_AUTH_025H_FRAME_ID (0x25u)
#define MCU_233_BCM_NM_404H_FRAME_ID (0x404u)
#define MCU_233_FSW_3_C1H_FRAME_ID (0x3c1u)
#define MCU_233_SWH_STATE_3_C2H_FRAME_ID (0x3c2u)
#define MCU_233_IHU_ACMM_2_F9H_FRAME_ID (0x2f9u)
#define MCU_233_IHU_VCU_2_F_AH_FRAME_ID (0x2fau)
#define MCU_233_IHU_ICM_2_F_FH_FRAME_ID (0x2ffu)
#define MCU_233_IHU_ADAS_2_FC_FRAME_ID (0x2fcu)
#define MCU_233_IHU_TIME_3_E3H_FRAME_ID (0x3e3u)
#define MCU_233_NAV_2_F2H_FRAME_ID (0x2f2u)
#define MCU_233_NAV_2_F3H_FRAME_ID (0x2f3u)
#define MCU_233_IHU_BCM_2_F_BH_FRAME_ID (0x2fbu)
#define MCU_233_IHU_ESC_255H_FRAME_ID (0x255u)
#define MCU_233_TBOX_ACMM_213H_FRAME_ID (0x213u)
#define MCU_233_TBOX_BCM_2_F1H_FRAME_ID (0x2f1u)
#define MCU_233_TBOX_BCM_2_F5H_FRAME_ID (0x2f5u)
#define MCU_233_IHU_NM_40_AH_FRAME_ID (0x40au)
#define MCU_233_TBOX_NM_410H_FRAME_ID (0x410u)
#define MCU_233_CGW_NM_402H_FRAME_ID (0x402u)
#define MCU_233_ESCL_STATUS_031H_FRAME_ID (0x31u)
#define MCU_233_ESCL_CERTIFICATION_032H_FRAME_ID (0x32u)
#define MCU_233_ESCL_NM_405H_FRAME_ID (0x405u)
#define MCU_233_CCS_2_F7H_FRAME_ID (0x2f7u)
#define MCU_233_PSD_188H_FRAME_ID (0x188u)
#define MCU_233_PSD_288H_FRAME_ID (0x288u)

/* Frame lengths in bytes. */
#define MCU_233_VCU_103H_LENGTH (8u)
#define MCU_233_VCU_200H_LENGTH (8u)
#define MCU_233_VCU_ICM_3_F_DH_LENGTH (8u)
#define MCU_233_VCU_106H_LENGTH (8u)
#define MCU_233_VCU_18_FH_LENGTH (8u)
#define MCU_233_VCU_520H_LENGTH (8u)
#define MCU_233_VCU_526H_LENGTH (8u)
#define MCU_233_VCU_IHU_2_F_EH_LENGTH (8u)
#define MCU_233_VCU_PEPS_527H_LENGTH (8u)
#define MCU_233_SSW_120H_LENGTH (8u)
#define MCU_233_BMS_099H_LENGTH (8u)
#define MCU_233_BMS_243H_LENGTH (8u)
#define MCU_233_BMS_244H_LENGTH (8u)
#define MCU_233_BMS_246H_LENGTH (8u)
#define MCU_233_BMS_249H_LENGTH (8u)
#define MCU_233_BMS_252H_LENGTH (8u)
#define MCU_233_BMS_254H_LENGTH (8u)
#define MCU_233_BMS_PACK1_260H_LENGTH (8u)
#define MCU_233_BMS_PACK1_262H_LENGTH (8u)
#define MCU_233_BMS_PACK1_268H_LENGTH (8u)
#define MCU_233_BMS_PACK1_26_CH_LENGTH (8u)
#define MCU_233_BMS_3_E1H_LENGTH (8u)
#define MCU_233_FVB_521H_LENGTH (8u)
#define MCU_233_MCU_097H_LENGTH (8u)
#define MCU_233_MCU_098H_LENGTH (8u)
#define MCU_233_MCU_26_EH_LENGTH (8u)
#define MCU_233_MCU_3_E5H_LENGTH (8u)
#define MCU_233_EOP_1_A0H_LENGTH (8u)
#define MCU_233_DCDC_1_F7H_LENGTH (8u)
#define MCU_233_BOBC_2_E8H_LENGTH (8u)
#define MCU_233_BOBC_297H_LENGTH (8u)
#define MCU_233_EPS_117H_LENGTH (8u)
#define MCU_233_EPS_131H_LENGTH (8u)
#define MCU_233_EHB_13_AH_LENGTH (8u)
#define MCU_233_EHB_13_CH_LENGTH (8u)
#define MCU_233_EHB_13_BH_LENGTH (8u)
#define MCU_233_ESC_101H_LENGTH (8u)
#define MCU_233_ESC_102H_LENGTH (8u)
#define MCU_233_ESC_104H_LENGTH (8u)
#define MCU_233_ESC_109H_LENGTH (8u)
#define MCU_233_ESC_125H_LENGTH (8u)
#define MCU_233_ESC_126H_LENGTH (8u)
#define MCU_233_ESC_108H_LENGTH (8u)
#define MCU_233_ESC_10_CH_LENGTH (8u)
#define MCU_233_ADAS_CAM_107H_LENGTH (8u)
#define MCU_233_ADAS_CAM_10_AH_LENGTH (8u)
#define MCU_233_ADAS_CAM_118H_LENGTH (8u)
#define MCU_233_ADAS_CAM_140H_LENGTH (8u)
#define MCU_233_ADAS_CAM_318H_LENGTH (8u)
#define MCU_233_ADAS_RAD_070H_LENGTH (8u)
#define MCU_233_ADAS_RL_RAD_071H_LENGTH (8u)
#define MCU_233_ADAS_RR_RAD_02_BH_LENGTH (8u)
#define MCU_233_ADAS_NM_406H_LENGTH (8u)
#define MCU_233_ADAS_NM_408H_LENGTH (8u)
#define MCU_233_ACU_021H_LENGTH (8u)
#define MCU_233_VCU_119H_LENGTH (8u)
#define MCU_233_VCU_123H_LENGTH (8u)
#define MCU_233_VCU_251H_LENGTH (8u)
#define MCU_233_VCU_201H_LENGTH (8u)
#define MCU_233_ACMM_IHU_301H_LENGTH (8u)
#define MCU_233_ACMM_IHU_302H_LENGTH (8u)
#define MCU_233_ACMM_PTC_303H_LENGTH (8u)
#define MCU_233_ACMM_EAC_304H_LENGTH (8u)
#define MCU_233_ACMM_307H_LENGTH (8u)
#define MCU_233_ACMM_308H_LENGTH (8u)
#define MCU_233_ACMM_331H_LENGTH (8u)
#define MCU_233_ACMM_332H_LENGTH (8u)
#define MCU_233_ACMM_333H_LENGTH (8u)
#define MCU_233_ACMM_334H_LENGTH (8u)
#define MCU_233_ACMM_FR34_CC_335H_LENGTH (8u)
#define MCU_233_ACMM_RR45_CC_336H_LENGTH (8u)
#define MCU_233_SMM_2_F4H_LENGTH (8u)
#define MCU_233_ICM_3_F_EH_LENGTH (8u)
#define MCU_233_ICM_NM_412H_LENGTH (8u)
#define MCU_233_VSP_283H_LENGTH (8u)
#define MCU_233_WCM_347H_LENGTH (8u)
#define MCU_233_BCM_211H_LENGTH (8u)
#define MCU_233_BCM_105H_LENGTH (8u)
#define MCU_233_BCM_112H_LENGTH (8u)
#define MCU_233_BCM_113H_LENGTH (8u)
#define MCU_233_BCM_111H_LENGTH (8u)
#define MCU_233_BCM_114H_LENGTH (8u)
#define MCU_233_BCM_212H_LENGTH (8u)
#define MCU_233_BCM_VCU_AUTH_022H_LENGTH (8u)
#define MCU_233_BCM_TBOX_AUTH_024H_LENGTH (8u)
#define MCU_233_BCM_ESCL_AUTH_025H_LENGTH (8u)
#define MCU_233_BCM_NM_404H_LENGTH (8u)
#define MCU_233_FSW_3_C1H_LENGTH (8u)
#define MCU_233_SWH_STATE_3_C2H_LENGTH (8u)
#define MCU_233_IHU_ACMM_2_F9H_LENGTH (8u)
#define MCU_233_IHU_VCU_2_F_AH_LENGTH (8u)
#define MCU_233_IHU_ICM_2_F_FH_LENGTH (8u)
#define MCU_233_IHU_ADAS_2_FC_LENGTH (8u)
#define MCU_233_IHU_TIME_3_E3H_LENGTH (8u)
#define MCU_233_NAV_2_F2H_LENGTH (8u)
#define MCU_233_NAV_2_F3H_LENGTH (8u)
#define MCU_233_IHU_BCM_2_F_BH_LENGTH (8u)
#define MCU_233_IHU_ESC_255H_LENGTH (8u)
#define MCU_233_TBOX_ACMM_213H_LENGTH (8u)
#define MCU_233_TBOX_BCM_2_F1H_LENGTH (8u)
#define MCU_233_TBOX_BCM_2_F5H_LENGTH (8u)
#define MCU_233_IHU_NM_40_AH_LENGTH (8u)
#define MCU_233_TBOX_NM_410H_LENGTH (8u)
#define MCU_233_CGW_NM_402H_LENGTH (8u)
#define MCU_233_ESCL_STATUS_031H_LENGTH (8u)
#define MCU_233_ESCL_CERTIFICATION_032H_LENGTH (8u)
#define MCU_233_ESCL_NM_405H_LENGTH (8u)
#define MCU_233_CCS_2_F7H_LENGTH (8u)
#define MCU_233_PSD_188H_LENGTH (8u)
#define MCU_233_PSD_288H_LENGTH (8u)

/* Extended or standard frame types. */
#define MCU_233_VCU_103H_IS_EXTENDED (0)
#define MCU_233_VCU_200H_IS_EXTENDED (0)
#define MCU_233_VCU_ICM_3_F_DH_IS_EXTENDED (0)
#define MCU_233_VCU_106H_IS_EXTENDED (0)
#define MCU_233_VCU_18_FH_IS_EXTENDED (0)
#define MCU_233_VCU_520H_IS_EXTENDED (0)
#define MCU_233_VCU_526H_IS_EXTENDED (0)
#define MCU_233_VCU_IHU_2_F_EH_IS_EXTENDED (0)
#define MCU_233_VCU_PEPS_527H_IS_EXTENDED (0)
#define MCU_233_SSW_120H_IS_EXTENDED (0)
#define MCU_233_BMS_099H_IS_EXTENDED (0)
#define MCU_233_BMS_243H_IS_EXTENDED (0)
#define MCU_233_BMS_244H_IS_EXTENDED (0)
#define MCU_233_BMS_246H_IS_EXTENDED (0)
#define MCU_233_BMS_249H_IS_EXTENDED (0)
#define MCU_233_BMS_252H_IS_EXTENDED (0)
#define MCU_233_BMS_254H_IS_EXTENDED (0)
#define MCU_233_BMS_PACK1_260H_IS_EXTENDED (0)
#define MCU_233_BMS_PACK1_262H_IS_EXTENDED (0)
#define MCU_233_BMS_PACK1_268H_IS_EXTENDED (0)
#define MCU_233_BMS_PACK1_26_CH_IS_EXTENDED (0)
#define MCU_233_BMS_3_E1H_IS_EXTENDED (0)
#define MCU_233_FVB_521H_IS_EXTENDED (0)
#define MCU_233_MCU_097H_IS_EXTENDED (0)
#define MCU_233_MCU_098H_IS_EXTENDED (0)
#define MCU_233_MCU_26_EH_IS_EXTENDED (0)
#define MCU_233_MCU_3_E5H_IS_EXTENDED (0)
#define MCU_233_EOP_1_A0H_IS_EXTENDED (0)
#define MCU_233_DCDC_1_F7H_IS_EXTENDED (0)
#define MCU_233_BOBC_2_E8H_IS_EXTENDED (0)
#define MCU_233_BOBC_297H_IS_EXTENDED (0)
#define MCU_233_EPS_117H_IS_EXTENDED (0)
#define MCU_233_EPS_131H_IS_EXTENDED (0)
#define MCU_233_EHB_13_AH_IS_EXTENDED (0)
#define MCU_233_EHB_13_CH_IS_EXTENDED (0)
#define MCU_233_EHB_13_BH_IS_EXTENDED (0)
#define MCU_233_ESC_101H_IS_EXTENDED (0)
#define MCU_233_ESC_102H_IS_EXTENDED (0)
#define MCU_233_ESC_104H_IS_EXTENDED (0)
#define MCU_233_ESC_109H_IS_EXTENDED (0)
#define MCU_233_ESC_125H_IS_EXTENDED (0)
#define MCU_233_ESC_126H_IS_EXTENDED (0)
#define MCU_233_ESC_108H_IS_EXTENDED (0)
#define MCU_233_ESC_10_CH_IS_EXTENDED (0)
#define MCU_233_ADAS_CAM_107H_IS_EXTENDED (0)
#define MCU_233_ADAS_CAM_10_AH_IS_EXTENDED (0)
#define MCU_233_ADAS_CAM_118H_IS_EXTENDED (0)
#define MCU_233_ADAS_CAM_140H_IS_EXTENDED (0)
#define MCU_233_ADAS_CAM_318H_IS_EXTENDED (0)
#define MCU_233_ADAS_RAD_070H_IS_EXTENDED (0)
#define MCU_233_ADAS_RL_RAD_071H_IS_EXTENDED (0)
#define MCU_233_ADAS_RR_RAD_02_BH_IS_EXTENDED (0)
#define MCU_233_ADAS_NM_406H_IS_EXTENDED (0)
#define MCU_233_ADAS_NM_408H_IS_EXTENDED (0)
#define MCU_233_ACU_021H_IS_EXTENDED (0)
#define MCU_233_VCU_119H_IS_EXTENDED (0)
#define MCU_233_VCU_123H_IS_EXTENDED (0)
#define MCU_233_VCU_251H_IS_EXTENDED (0)
#define MCU_233_VCU_201H_IS_EXTENDED (0)
#define MCU_233_ACMM_IHU_301H_IS_EXTENDED (0)
#define MCU_233_ACMM_IHU_302H_IS_EXTENDED (0)
#define MCU_233_ACMM_PTC_303H_IS_EXTENDED (0)
#define MCU_233_ACMM_EAC_304H_IS_EXTENDED (0)
#define MCU_233_ACMM_307H_IS_EXTENDED (0)
#define MCU_233_ACMM_308H_IS_EXTENDED (0)
#define MCU_233_ACMM_331H_IS_EXTENDED (0)
#define MCU_233_ACMM_332H_IS_EXTENDED (0)
#define MCU_233_ACMM_333H_IS_EXTENDED (0)
#define MCU_233_ACMM_334H_IS_EXTENDED (0)
#define MCU_233_ACMM_FR34_CC_335H_IS_EXTENDED (0)
#define MCU_233_ACMM_RR45_CC_336H_IS_EXTENDED (0)
#define MCU_233_SMM_2_F4H_IS_EXTENDED (0)
#define MCU_233_ICM_3_F_EH_IS_EXTENDED (0)
#define MCU_233_ICM_NM_412H_IS_EXTENDED (0)
#define MCU_233_VSP_283H_IS_EXTENDED (0)
#define MCU_233_WCM_347H_IS_EXTENDED (0)
#define MCU_233_BCM_211H_IS_EXTENDED (0)
#define MCU_233_BCM_105H_IS_EXTENDED (0)
#define MCU_233_BCM_112H_IS_EXTENDED (0)
#define MCU_233_BCM_113H_IS_EXTENDED (0)
#define MCU_233_BCM_111H_IS_EXTENDED (0)
#define MCU_233_BCM_114H_IS_EXTENDED (0)
#define MCU_233_BCM_212H_IS_EXTENDED (0)
#define MCU_233_BCM_VCU_AUTH_022H_IS_EXTENDED (0)
#define MCU_233_BCM_TBOX_AUTH_024H_IS_EXTENDED (0)
#define MCU_233_BCM_ESCL_AUTH_025H_IS_EXTENDED (0)
#define MCU_233_BCM_NM_404H_IS_EXTENDED (0)
#define MCU_233_FSW_3_C1H_IS_EXTENDED (0)
#define MCU_233_SWH_STATE_3_C2H_IS_EXTENDED (0)
#define MCU_233_IHU_ACMM_2_F9H_IS_EXTENDED (0)
#define MCU_233_IHU_VCU_2_F_AH_IS_EXTENDED (0)
#define MCU_233_IHU_ICM_2_F_FH_IS_EXTENDED (0)
#define MCU_233_IHU_ADAS_2_FC_IS_EXTENDED (0)
#define MCU_233_IHU_TIME_3_E3H_IS_EXTENDED (0)
#define MCU_233_NAV_2_F2H_IS_EXTENDED (0)
#define MCU_233_NAV_2_F3H_IS_EXTENDED (0)
#define MCU_233_IHU_BCM_2_F_BH_IS_EXTENDED (0)
#define MCU_233_IHU_ESC_255H_IS_EXTENDED (0)
#define MCU_233_TBOX_ACMM_213H_IS_EXTENDED (0)
#define MCU_233_TBOX_BCM_2_F1H_IS_EXTENDED (0)
#define MCU_233_TBOX_BCM_2_F5H_IS_EXTENDED (0)
#define MCU_233_IHU_NM_40_AH_IS_EXTENDED (0)
#define MCU_233_TBOX_NM_410H_IS_EXTENDED (0)
#define MCU_233_CGW_NM_402H_IS_EXTENDED (0)
#define MCU_233_ESCL_STATUS_031H_IS_EXTENDED (0)
#define MCU_233_ESCL_CERTIFICATION_032H_IS_EXTENDED (0)
#define MCU_233_ESCL_NM_405H_IS_EXTENDED (0)
#define MCU_233_CCS_2_F7H_IS_EXTENDED (0)
#define MCU_233_PSD_188H_IS_EXTENDED (0)
#define MCU_233_PSD_288H_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define MCU_233_VCU_103H_CYCLE_TIME_MS (10u)
#define MCU_233_VCU_200H_CYCLE_TIME_MS (100u)
#define MCU_233_VCU_ICM_3_F_DH_CYCLE_TIME_MS (1000u)
#define MCU_233_VCU_106H_CYCLE_TIME_MS (10u)
#define MCU_233_VCU_18_FH_CYCLE_TIME_MS (20u)
#define MCU_233_VCU_520H_CYCLE_TIME_MS (200u)
#define MCU_233_VCU_526H_CYCLE_TIME_MS (200u)
#define MCU_233_VCU_IHU_2_F_EH_CYCLE_TIME_MS (100u)
#define MCU_233_VCU_PEPS_527H_CYCLE_TIME_MS (10u)
#define MCU_233_SSW_120H_CYCLE_TIME_MS (20u)
#define MCU_233_BMS_099H_CYCLE_TIME_MS (10u)
#define MCU_233_BMS_243H_CYCLE_TIME_MS (100u)
#define MCU_233_BMS_244H_CYCLE_TIME_MS (100u)
#define MCU_233_BMS_246H_CYCLE_TIME_MS (100u)
#define MCU_233_BMS_249H_CYCLE_TIME_MS (100u)
#define MCU_233_BMS_252H_CYCLE_TIME_MS (100u)
#define MCU_233_BMS_254H_CYCLE_TIME_MS (200u)
#define MCU_233_BMS_PACK1_260H_CYCLE_TIME_MS (100u)
#define MCU_233_BMS_PACK1_262H_CYCLE_TIME_MS (100u)
#define MCU_233_BMS_PACK1_268H_CYCLE_TIME_MS (100u)
#define MCU_233_BMS_PACK1_26_CH_CYCLE_TIME_MS (100u)
#define MCU_233_BMS_3_E1H_CYCLE_TIME_MS (500u)
#define MCU_233_FVB_521H_CYCLE_TIME_MS (200u)
#define MCU_233_MCU_097H_CYCLE_TIME_MS (20u)
#define MCU_233_MCU_098H_CYCLE_TIME_MS (20u)
#define MCU_233_MCU_26_EH_CYCLE_TIME_MS (100u)
#define MCU_233_MCU_3_E5H_CYCLE_TIME_MS (500u)
#define MCU_233_EOP_1_A0H_CYCLE_TIME_MS (10u)
#define MCU_233_DCDC_1_F7H_CYCLE_TIME_MS (100u)
#define MCU_233_BOBC_2_E8H_CYCLE_TIME_MS (100u)
#define MCU_233_BOBC_297H_CYCLE_TIME_MS (100u)
#define MCU_233_EPS_117H_CYCLE_TIME_MS (20u)
#define MCU_233_EPS_131H_CYCLE_TIME_MS (20u)
#define MCU_233_EHB_13_AH_CYCLE_TIME_MS (20u)
#define MCU_233_EHB_13_CH_CYCLE_TIME_MS (20u)
#define MCU_233_EHB_13_BH_CYCLE_TIME_MS (10u)
#define MCU_233_ESC_101H_CYCLE_TIME_MS (20u)
#define MCU_233_ESC_102H_CYCLE_TIME_MS (20u)
#define MCU_233_ESC_104H_CYCLE_TIME_MS (20u)
#define MCU_233_ESC_109H_CYCLE_TIME_MS (20u)
#define MCU_233_ESC_125H_CYCLE_TIME_MS (20u)
#define MCU_233_ESC_126H_CYCLE_TIME_MS (500u)
#define MCU_233_ESC_108H_CYCLE_TIME_MS (10u)
#define MCU_233_ESC_10_CH_CYCLE_TIME_MS (20u)
#define MCU_233_ADAS_CAM_107H_CYCLE_TIME_MS (20u)
#define MCU_233_ADAS_CAM_10_AH_CYCLE_TIME_MS (50u)
#define MCU_233_ADAS_CAM_118H_CYCLE_TIME_MS (20u)
#define MCU_233_ADAS_CAM_140H_CYCLE_TIME_MS (50u)
#define MCU_233_ADAS_CAM_318H_CYCLE_TIME_MS (50u)
#define MCU_233_ADAS_RAD_070H_CYCLE_TIME_MS (50u)
#define MCU_233_ADAS_RL_RAD_071H_CYCLE_TIME_MS (50u)
#define MCU_233_ADAS_RR_RAD_02_BH_CYCLE_TIME_MS (50u)
#define MCU_233_ACU_021H_CYCLE_TIME_MS (100u)
#define MCU_233_VCU_119H_CYCLE_TIME_MS (20u)
#define MCU_233_VCU_123H_CYCLE_TIME_MS (100u)
#define MCU_233_VCU_251H_CYCLE_TIME_MS (20u)
#define MCU_233_VCU_201H_CYCLE_TIME_MS (20u)
#define MCU_233_ACMM_IHU_301H_CYCLE_TIME_MS (100u)
#define MCU_233_ACMM_IHU_302H_CYCLE_TIME_MS (100u)
#define MCU_233_ACMM_PTC_303H_CYCLE_TIME_MS (100u)
#define MCU_233_ACMM_EAC_304H_CYCLE_TIME_MS (100u)
#define MCU_233_ACMM_307H_CYCLE_TIME_MS (100u)
#define MCU_233_ACMM_308H_CYCLE_TIME_MS (100u)
#define MCU_233_ACMM_331H_CYCLE_TIME_MS (500u)
#define MCU_233_ACMM_332H_CYCLE_TIME_MS (500u)
#define MCU_233_ACMM_333H_CYCLE_TIME_MS (500u)
#define MCU_233_ACMM_334H_CYCLE_TIME_MS (500u)
#define MCU_233_ACMM_FR34_CC_335H_CYCLE_TIME_MS (500u)
#define MCU_233_ACMM_RR45_CC_336H_CYCLE_TIME_MS (500u)
#define MCU_233_SMM_2_F4H_CYCLE_TIME_MS (100u)
#define MCU_233_ICM_3_F_EH_CYCLE_TIME_MS (500u)
#define MCU_233_VSP_283H_CYCLE_TIME_MS (100u)
#define MCU_233_WCM_347H_CYCLE_TIME_MS (500u)
#define MCU_233_BCM_211H_CYCLE_TIME_MS (50u)
#define MCU_233_BCM_105H_CYCLE_TIME_MS (50u)
#define MCU_233_BCM_112H_CYCLE_TIME_MS (50u)
#define MCU_233_BCM_113H_CYCLE_TIME_MS (50u)
#define MCU_233_BCM_111H_CYCLE_TIME_MS (50u)
#define MCU_233_BCM_114H_CYCLE_TIME_MS (100u)
#define MCU_233_BCM_212H_CYCLE_TIME_MS (50u)
#define MCU_233_FSW_3_C1H_CYCLE_TIME_MS (200u)
#define MCU_233_SWH_STATE_3_C2H_CYCLE_TIME_MS (100u)
#define MCU_233_IHU_ACMM_2_F9H_CYCLE_TIME_MS (100u)
#define MCU_233_IHU_VCU_2_F_AH_CYCLE_TIME_MS (100u)
#define MCU_233_IHU_ICM_2_F_FH_CYCLE_TIME_MS (200u)
#define MCU_233_IHU_ADAS_2_FC_CYCLE_TIME_MS (100u)
#define MCU_233_IHU_TIME_3_E3H_CYCLE_TIME_MS (500u)
#define MCU_233_NAV_2_F2H_CYCLE_TIME_MS (100u)
#define MCU_233_NAV_2_F3H_CYCLE_TIME_MS (100u)
#define MCU_233_IHU_BCM_2_F_BH_CYCLE_TIME_MS (100u)
#define MCU_233_TBOX_ACMM_213H_CYCLE_TIME_MS (100u)
#define MCU_233_TBOX_BCM_2_F1H_CYCLE_TIME_MS (100u)
#define MCU_233_ESCL_STATUS_031H_CYCLE_TIME_MS (100u)
#define MCU_233_CCS_2_F7H_CYCLE_TIME_MS (200u)
#define MCU_233_PSD_188H_CYCLE_TIME_MS (50u)
#define MCU_233_PSD_288H_CYCLE_TIME_MS (50u)

/* Signal choices. */
#define MCU_233_VCU_103H_VCU_HV_BAT_MD_REQ___DEFAULT_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_HV_BAT_MD_REQ___OPERATIONAL_________CHOICE (1u)
#define MCU_233_VCU_103H_VCU_HV_BAT_MD_REQ___POWERDOWN_________CHOICE (2u)
#define MCU_233_VCU_103H_VCU_HV_BAT_MD_REQ___EMERGENCY__DISCHARGE__________________CHOICE (3u)

#define MCU_233_VCU_103H_VCU_DISCHARGE_ALW___NOT__ALLOW_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_DISCHARGE_ALW___ALLOW_CHOICE (1u)

#define MCU_233_VCU_103H_VCU_CHARGE_ALW___NOT__ALLOW_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_CHARGE_ALW___ALLOW_DC__CHARGE_CHOICE (1u)
#define MCU_233_VCU_103H_VCU_CHARGE_ALW___ALLOW_AC__CHARGE_CHOICE (2u)
#define MCU_233_VCU_103H_VCU_CHARGE_ALW___PAUSE_AC__CHARGE_CHOICE (3u)

#define MCU_233_VCU_103H_VCU_DCDC_WAKEUO_SLEEP_CTRL_WAKEUP_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_DCDC_WAKEUO_SLEEP_CTRL_SLEEP_CHOICE (1u)

#define MCU_233_VCU_103H_VCU_DCDC_MD_REQ___DISABLED_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_DCDC_MD_REQ___ENABLED_CHOICE (1u)
#define MCU_233_VCU_103H_VCU_DCDC_MD_REQ___EMERGENCY__DISCHARGE_____CHOICE (2u)
#define MCU_233_VCU_103H_VCU_DCDC_MD_REQ_RESERVED_CHOICE (3u)

#define MCU_233_VCU_103H_VCU_MCU_TARGE_SPD_REQ___ERROR_CHOICE (65534u)
#define MCU_233_VCU_103H_VCU_MCU_TARGE_SPD_REQ___INVALID_CHOICE (65535u)

#define MCU_233_VCU_103H_VCU_MCU_TARGET_TOQ_REQ___ERROR_CHOICE (65534u)
#define MCU_233_VCU_103H_VCU_MCU_TARGET_TOQ_REQ___INVALID_CHOICE (65535u)

#define MCU_233_VCU_103H_VCU_BOBC_WAKEUP_SLEEP_CTRL_WAKEUP_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_BOBC_WAKEUP_SLEEP_CTRL_SLEEP_CHOICE (1u)

#define MCU_233_VCU_103H_VCU_OBC_WAKEUP_SLEEP_CTRL_WAKEUP_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_OBC_WAKEUP_SLEEP_CTRL_SLEEP_CHOICE (1u)

#define MCU_233_VCU_103H_VCU_VTMS_WAKEUP_SLEEP_CTRL_WAKEUP_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_VTMS_WAKEUP_SLEEP_CTRL_SLEEP_CHOICE (1u)

#define MCU_233_VCU_103H_VCU_MCU_ANTI_SHAKE_DISABLE_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_MCU_ANTI_SHAKE_ENABLE_CHOICE (1u)

#define MCU_233_VCU_103H_VCU_MCU_SLEEP_CMD_WAKE_UP_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_MCU_SLEEP_CMD_SLEEP_CHOICE (1u)

#define MCU_233_VCU_103H_VCU_MOT_WORKING_MODE_REQ_DEFAULT__CHOICE (0u)
#define MCU_233_VCU_103H_VCU_MOT_WORKING_MODE_REQ_STOP____________0___CHOICE (2u)
#define MCU_233_VCU_103H_VCU_MOT_WORKING_MODE_REQ_TORQUE__CTRL__MODE__________CHOICE (3u)
#define MCU_233_VCU_103H_VCU_MOT_WORKING_MODE_REQ_SPEED__CTRL__MODE___________CHOICE (4u)
#define MCU_233_VCU_103H_VCU_MOT_WORKING_MODE_REQ_INVALID_____CHOICE (7u)

#define MCU_233_VCU_103H_VCU_APP_SEC_RELAY_REQ___DISCONNECT_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_APP_SEC_RELAY_REQ___CONNECT_CHOICE (1u)

#define MCU_233_VCU_103H_VCU_APP_FIR_RELAY_REQ___DISCONNECT_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_APP_FIR_RELAY_REQ___CONNECT_CHOICE (1u)

#define MCU_233_VCU_103H_VCU_BMS_EXTRA_RANGE_NO_EXTRA_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_BMS_EXTRA_RANGE_EXTRA_CHOICE (1u)

#define MCU_233_VCU_103H_VCU_BMS_HEAT_PRESE_REQ_NO_HP_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_BMS_HEAT_PRESE_REQ_HP_CHOICE (1u)

#define MCU_233_VCU_103H_VCU_MCU_DISCHARGE_REQ_NO_DISCHARGE_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_MCU_DISCHARGE_REQ_DISCHARGE_CHOICE (1u)

#define MCU_233_VCU_103H_VCU_MC_UENABLED_HHC__OFF_CHOICE (0u)
#define MCU_233_VCU_103H_VCU_MC_UENABLED_HHC__ON_CHOICE (1u)

#define MCU_233_VCU_200H_VCU_DRIVE_MODE_NOMAL__CONFORT__CHOICE (0u)
#define MCU_233_VCU_200H_VCU_DRIVE_MODE_ECO_CHOICE (1u)
#define MCU_233_VCU_200H_VCU_DRIVE_MODE_SPORT_CHOICE (2u)
#define MCU_233_VCU_200H_VCU_DRIVE_MODE_LIMP_HOME__MODE_CHOICE (3u)
#define MCU_233_VCU_200H_VCU_DRIVE_MODE_AUTO_DRIVE_CHOICE (4u)
#define MCU_233_VCU_200H_VCU_DRIVE_MODE_RESERVED_CHOICE (7u)

#define MCU_233_VCU_200H_VCU_PT_RDY___FALSE__CHOICE (0u)
#define MCU_233_VCU_200H_VCU_PT_RDY___TRUE__CHOICE (1u)

#define MCU_233_VCU_200H_VCU_SHIFT_LEVEL_POSITION___INVALID_CHOICE (0u)
#define MCU_233_VCU_200H_VCU_SHIFT_LEVEL_POSITION___REVERSE_CHOICE (1u)
#define MCU_233_VCU_200H_VCU_SHIFT_LEVEL_POSITION___NEUTRAL_CHOICE (2u)
#define MCU_233_VCU_200H_VCU_SHIFT_LEVEL_POSITION___DRIVE_CHOICE (3u)
#define MCU_233_VCU_200H_VCU_SHIFT_LEVEL_POSITION___SPORT_CHOICE (4u)
#define MCU_233_VCU_200H_VCU_SHIFT_LEVEL_POSITION___PARKING_CHOICE (5u)
#define MCU_233_VCU_200H_VCU_SHIFT_LEVEL_POSITION___RESERVED_CHOICE (7u)

#define MCU_233_VCU_200H_VCU_CAN_COM_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_VCU_200H_VCU_CAN_COM_FLT___FAILURE_CHOICE (1u)

#define MCU_233_VCU_200H_VCU_HVIL_CLSD_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_VCU_200H_VCU_HVIL_CLSD_FLT___FAILURE_CHOICE (1u)

#define MCU_233_VCU_200H_VCU_ACCIDENTLY_DISCON___NO__FAILURE_CHOICE (0u)
#define MCU_233_VCU_200H_VCU_ACCIDENTLY_DISCON___FAILURE_CHOICE (1u)

#define MCU_233_VCU_200H_VCU_SYS_FAULEV___NO__ERROR_CHOICE (0u)
#define MCU_233_VCU_200H_VCU_SYS_FAULEV_WARNING__________________CHOICE (1u)
#define MCU_233_VCU_200H_VCU_SYS_FAULEV_DERATING____________________CHOICE (2u)
#define MCU_233_VCU_200H_VCU_SYS_FAULEV_DISABLE______________CHOICE (3u)

#define MCU_233_VCU_200H_VCU_SCURT_AUTHN_FAIL_REASON________0_CHOICE (0u)
#define MCU_233_VCU_200H_VCU_SCURT_AUTHN_FAIL_REASON________1_CHOICE (1u)
#define MCU_233_VCU_200H_VCU_SCURT_AUTHN_FAIL_REASON__________2_CHOICE (2u)
#define MCU_233_VCU_200H_VCU_SCURT_AUTHN_FAIL_REASON__________3_CHOICE (3u)
#define MCU_233_VCU_200H_VCU_SCURT_AUTHN_FAIL_REASON__________4_CHOICE (4u)
#define MCU_233_VCU_200H_VCU_SCURT_AUTHN_FAIL_REASON_RESERVED_CHOICE (7u)

#define MCU_233_VCU_200H_VCU_CHRGNG_CNCTD_STS________CHOICE (0u)
#define MCU_233_VCU_200H_VCU_CHRGNG_CNCTD_STS______CHOICE (1u)

#define MCU_233_VCU_200H_VCU_VEH_CHARGE_STS_PARKING_CHARG_CHOICE (1u)
#define MCU_233_VCU_200H_VCU_VEH_CHARGE_STS_DRIVING_CHARGE_CHOICE (2u)
#define MCU_233_VCU_200H_VCU_VEH_CHARGE_STS_NO_CHARGE_CHOICE (3u)
#define MCU_233_VCU_200H_VCU_VEH_CHARGE_STS_CHARGE_FINISHED_CHOICE (4u)
#define MCU_233_VCU_200H_VCU_VEH_CHARGE_STS_CHARGE_FAULT_CHOICE (5u)
#define MCU_233_VCU_200H_VCU_VEH_CHARGE_STS_RESERVED_CHOICE (7u)

#define MCU_233_VCU_200H_VCU_VEH_MODE_INVALID_CHOICE (0u)
#define MCU_233_VCU_200H_VCU_VEH_MODE______1_CHOICE (1u)
#define MCU_233_VCU_200H_VCU_VEH_MODE______2_CHOICE (2u)
#define MCU_233_VCU_200H_VCU_VEH_MODE______3_CHOICE (3u)

#define MCU_233_VCU_200H_VCU_VCU_ERR_LV___NO__ERROR_CHOICE (0u)
#define MCU_233_VCU_200H_VCU_VCU_ERR_LV___WARNING__________________CHOICE (1u)
#define MCU_233_VCU_200H_VCU_VCU_ERR_LV_DERATING____________________CHOICE (2u)
#define MCU_233_VCU_200H_VCU_VCU_ERR_LV__DISABLE______________CHOICE (3u)

#define MCU_233_VCU_200H_VCU_GEAR_CONTROL_MODULE_DRIVER__CONTROL_CHOICE (1u)
#define MCU_233_VCU_200H_VCU_GEAR_CONTROL_MODULE_ACC__CONTROL_CHOICE (2u)
#define MCU_233_VCU_200H_VCU_GEAR_CONTROL_MODULE_APA__CONTROL_CHOICE (3u)
#define MCU_233_VCU_200H_VCU_GEAR_CONTROL_MODULE_REMOTE__CONTROL_CHOICE (4u)
#define MCU_233_VCU_200H_VCU_GEAR_CONTROL_MODULE_RESERVED_CHOICE (7u)

#define MCU_233_VCU_200H_VCU_TORQUE_CONTROL_MODULE_DRIVER__CONTROL_CHOICE (1u)
#define MCU_233_VCU_200H_VCU_TORQUE_CONTROL_MODULE_ACC__CONTROL_CHOICE (2u)
#define MCU_233_VCU_200H_VCU_TORQUE_CONTROL_MODULE_APA__CONTROL_CHOICE (3u)
#define MCU_233_VCU_200H_VCU_TORQUE_CONTROL_MODULE_REMOTE__CONTROL_CHOICE (4u)
#define MCU_233_VCU_200H_VCU_TORQUE_CONTROL_MODULE_RESERVED_CHOICE (7u)

#define MCU_233_VCU_200H_VCU_INLET_ELECTRONIC_LOCK_STS_UNLOCK_CHOICE (0u)
#define MCU_233_VCU_200H_VCU_INLET_ELECTRONIC_LOCK_STS_LOCK_CHOICE (1u)

#define MCU_233_VCU_200H_VCU_INTELLIGENT_RECHARGE_STS_INVALID_CHOICE (0u)
#define MCU_233_VCU_200H_VCU_INTELLIGENT_RECHARGE_STS__________1_CHOICE (1u)
#define MCU_233_VCU_200H_VCU_INTELLIGENT_RECHARGE_STS__________2_CHOICE (2u)
#define MCU_233_VCU_200H_VCU_INTELLIGENT_RECHARGE_STS_RESERVED_CHOICE (3u)

#define MCU_233_VCU_200H_VCU_VEH_STATUS_INVALID_CHOICE (0u)
#define MCU_233_VCU_200H_VCU_VEH_STATUS_DRIVING_MODE_CHOICE (1u)
#define MCU_233_VCU_200H_VCU_VEH_STATUS_STALLING_MODE_CHOICE (2u)
#define MCU_233_VCU_200H_VCU_VEH_STATUS_OTHER_MODE_CHOICE (3u)

#define MCU_233_VCU_200H_VCU_BRAKE_CONTROL_MODULE_DRIVER__CONTROL_CHOICE (1u)
#define MCU_233_VCU_200H_VCU_BRAKE_CONTROL_MODULE_ACC__CONTROL_CHOICE (2u)
#define MCU_233_VCU_200H_VCU_BRAKE_CONTROL_MODULE_APA__CONTROL_CHOICE (3u)
#define MCU_233_VCU_200H_VCU_BRAKE_CONTROL_MODULE_REMOTE__CONTROL_CHOICE (4u)
#define MCU_233_VCU_200H_VCU_BRAKE_CONTROL_MODULE_RESERVED_CHOICE (7u)

#define MCU_233_VCU_200H_VCU_INLET_ELECTRONIC_LOCK_REQ_UNLOCK_CHOICE (0u)
#define MCU_233_VCU_200H_VCU_INLET_ELECTRONIC_LOCK_REQ_REQUEST_LOCK_CHOICE (1u)

#define MCU_233_VCU_18_FH_VCU_EOP_SLEEP_REQ___DISABLE_CHOICE (0u)
#define MCU_233_VCU_18_FH_VCU_EOP_SLEEP_REQ___ENABLE_CHOICE (1u)

#define MCU_233_VCU_18_FH_VCU_EOP_ENABLE___DISABLE_THE_HYDRAULIC_FUNCTION_CHOICE (0u)
#define MCU_233_VCU_18_FH_VCU_EOP_ENABLE___ENABLE_THE_HYDRAULIC_FUNCTION_CHOICE (1u)

#define MCU_233_VCU_18_FH_VCU_EOP_MOT_SPEED_REQ___SPEED_IS_ZERO_CHOICE (0u)
#define MCU_233_VCU_18_FH_VCU_EOP_MOT_SPEED_REQ___THE_MAXIMUM_SPEED_IS_6000RPM_CHOICE (6000u)

#define MCU_233_VCU_526H_VCU_CRUISE_CONTROL_STS_OFF_CHOICE (0u)
#define MCU_233_VCU_526H_VCU_CRUISE_CONTROL_STS_STANDBY_CHOICE (1u)
#define MCU_233_VCU_526H_VCU_CRUISE_CONTROL_STS_ACITVE_CHOICE (2u)
#define MCU_233_VCU_526H_VCU_CRUISE_CONTROL_STS_ON_HOOK_CHOICE (3u)
#define MCU_233_VCU_526H_VCU_CRUISE_CONTROL_STS_WARNING_CHOICE (4u)
#define MCU_233_VCU_526H_VCU_CRUISE_CONTROL_STS_RESERVED_CHOICE (7u)

#define MCU_233_VCU_IHU_2_F_EH_VCU_POW_BAT_DEEP_DISCHARGE_CLOSE_CHOICE (0u)
#define MCU_233_VCU_IHU_2_F_EH_VCU_POW_BAT_DEEP_DISCHARGE_OPEN_CHOICE (1u)

#define MCU_233_VCU_IHU_2_F_EH_VCU_ENERGY_RECOVERY______0_CHOICE (0u)
#define MCU_233_VCU_IHU_2_F_EH_VCU_ENERGY_RECOVERY______1_CHOICE (1u)
#define MCU_233_VCU_IHU_2_F_EH_VCU_ENERGY_RECOVERY______2_CHOICE (2u)
#define MCU_233_VCU_IHU_2_F_EH_VCU_ENERGY_RECOVERY_RESERVE_CHOICE (3u)

#define MCU_233_VCU_IHU_2_F_EH_VCU_SLOW_CHARGING_PRESERVATION_STATUS_CLOSE_CHOICE (0u)
#define MCU_233_VCU_IHU_2_F_EH_VCU_SLOW_CHARGING_PRESERVATION_STATUS_OPEN_CHOICE (1u)

#define MCU_233_VCU_IHU_2_F_EH_VCU_EXTERNAL_DISCHARGE_STATUS_CLOSE_CHOICE (0u)
#define MCU_233_VCU_IHU_2_F_EH_VCU_EXTERNAL_DISCHARGE_STATUS_OPEN_CHOICE (1u)

#define MCU_233_VCU_IHU_2_F_EH_VCU_WORM_MODE_STATUS_CLOSE_CHOICE (0u)
#define MCU_233_VCU_IHU_2_F_EH_VCU_WORM_MODE_STATUS_OPEN_CHOICE (1u)

#define MCU_233_VCU_IHU_2_F_EH_VCU_CONLOADSENSORS______CHOICE (0u)
#define MCU_233_VCU_IHU_2_F_EH_VCU_CONLOADSENSORS________CHOICE (1u)

#define MCU_233_SSW_120H_SSW_KNOB_POSITION___INVALID_CHOICE (0u)
#define MCU_233_SSW_120H_SSW_KNOB_POSITION___REVERSE_CHOICE (1u)
#define MCU_233_SSW_120H_SSW_KNOB_POSITION___NEUTRAL_CHOICE (2u)
#define MCU_233_SSW_120H_SSW_KNOB_POSITION___DRIVE_CHOICE (3u)
#define MCU_233_SSW_120H_SSW_KNOB_POSITION___SPORT_CHOICE (4u)
#define MCU_233_SSW_120H_SSW_KNOB_POSITION___PARKING_CHOICE (5u)
#define MCU_233_SSW_120H_SSW_KNOB_POSITION___NO__TARGET_CHOICE (6u)
#define MCU_233_SSW_120H_SSW_KNOB_POSITION___RESERVED_CHOICE (7u)

#define MCU_233_SSW_120H_SSW_FAULT________CHOICE (0u)
#define MCU_233_SSW_120H_SSW_FAULT______________1_CHOICE (1u)
#define MCU_233_SSW_120H_SSW_FAULT______________2_CHOICE (2u)
#define MCU_233_SSW_120H_SSW_FAULT________________CHOICE (3u)
#define MCU_233_SSW_120H_SSW_FAULT______4_CHOICE (4u)
#define MCU_233_SSW_120H_SSW_FAULT______5_CHOICE (5u)
#define MCU_233_SSW_120H_SSW_FAULT_VCU_____________CHOICE (6u)
#define MCU_233_SSW_120H_SSW_FAULT______BUS_OFF_____CHOICE (7u)

#define MCU_233_SSW_120H_SSW_SHIFT_POS_VALID______0_CHOICE (0u)
#define MCU_233_SSW_120H_SSW_SHIFT_POS_VALID______1_CHOICE (1u)

#define MCU_233_SSW_120H_SSW_GEAR_CHG_REMINDING_DEFAULT_CHOICE (0u)
#define MCU_233_SSW_120H_SSW_GEAR_CHG_REMINDING______________CHOICE (1u)
#define MCU_233_SSW_120H_SSW_GEAR_CHG_REMINDING________________CHOICE (2u)
#define MCU_233_SSW_120H_SSW_GEAR_CHG_REMINDING______CHOICE (3u)

#define MCU_233_BMS_099H_BMS_HEATING_RELAY_CNCTD___DISCONNECT_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_HEATING_RELAY_CNCTD___CONNECT_CHOICE (1u)

#define MCU_233_BMS_099H_BMS_PRCHRGR_RELAY_CNCTD___DISCONNECT_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_PRCHRGR_RELAY_CNCTD___CONNECT_CHOICE (1u)

#define MCU_233_BMS_099H_BMS_CC_CNCTD_STS__CC__DISCONNECT_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_CC_CNCTD_STS__CC_CONNECT__CHOICE (1u)

#define MCU_233_BMS_099H_BMS_CHRGNG_PLUG_CNCTD_STS___DISCONNECT_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_CHRGNG_PLUG_CNCTD_STS___FAST__CHARGE__PLUG__CONNECT_CHOICE (1u)

#define MCU_233_BMS_099H_BMS_HV_BAT_WOKNG_MD___INIT_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_HV_BAT_WOKNG_MD___STANDBY_CHOICE (1u)
#define MCU_233_BMS_099H_BMS_HV_BAT_WOKNG_MD___PRE_CHARGE_CHOICE (2u)
#define MCU_233_BMS_099H_BMS_HV_BAT_WOKNG_MD___OPERATIONAL_CHOICE (3u)
#define MCU_233_BMS_099H_BMS_HV_BAT_WOKNG_MD__AC_CHARGE_CHOICE (4u)
#define MCU_233_BMS_099H_BMS_HV_BAT_WOKNG_MD__DC_CHARGE_CHOICE (5u)
#define MCU_233_BMS_099H_BMS_HV_BAT_WOKNG_MD___POWERDOWN_CHOICE (6u)
#define MCU_233_BMS_099H_BMS_HV_BAT_WOKNG_MD___SERVICE_CHOICE (7u)
#define MCU_233_BMS_099H_BMS_HV_BAT_WOKNG_MD___PRE_CHARGE__FAILED_CHOICE (8u)
#define MCU_233_BMS_099H_BMS_HV_BAT_WOKNG_MD___EMERGENCY__DISCHARGE_CHOICE (9u)
#define MCU_233_BMS_099H_BMS_HV_BAT_WOKNG_MD___RSERVED_CHOICE (15u)

#define MCU_233_BMS_099H_BMS_HEATING_COOLING_REQ_NO__REQUEST________CHOICE (0u)
#define MCU_233_BMS_099H_BMS_HEATING_COOLING_REQ_HEATING_______CHOICE (1u)
#define MCU_233_BMS_099H_BMS_HEATING_COOLING_REQ_COOLING_______CHOICE (2u)
#define MCU_233_BMS_099H_BMS_HEATING_COOLING_REQ_POW_BAT_KEEP_TEM_______CHOICE (3u)

#define MCU_233_BMS_099H_BMS_BALANCING_STS___________0_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_BALANCING_STS___________1_CHOICE (1u)
#define MCU_233_BMS_099H_BMS_BALANCING_STS___________2_CHOICE (2u)
#define MCU_233_BMS_099H_BMS_BALANCING_STS___________3_CHOICE (3u)

#define MCU_233_BMS_099H_BMS_INSULATION_MONITOR_WARN___NORMAL_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_INSULATION_MONITOR_WARN___FIRST__WARNING_CHOICE (1u)
#define MCU_233_BMS_099H_BMS_INSULATION_MONITOR_WARN___SECOND__WARNING_CHOICE (2u)
#define MCU_233_BMS_099H_BMS_INSULATION_MONITOR_WARN___THIRD__WARNING_CHOICE (3u)

#define MCU_233_BMS_099H_BMS_HV_BAT_NGTV_RELAY_CNCTD___DISCONNECT_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_HV_BAT_NGTV_RELAY_CNCTD___CONNECT_CHOICE (1u)

#define MCU_233_BMS_099H_BMS_HV_BAT_PSTV_RELAY_CNCTD___DISCONNECT_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_HV_BAT_PSTV_RELAY_CNCTD___CONNECT_CHOICE (1u)

#define MCU_233_BMS_099H_BMS_INSULATION_RESISTANCE______CHOICE (65534u)
#define MCU_233_BMS_099H_BMS_INSULATION_RESISTANCE___INVALID_________CHOICE (65535u)

#define MCU_233_BMS_099H_BMS_D_CCHRGR_NGTV_RELAY_CNCTD___DISCONNECT_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_D_CCHRGR_NGTV_RELAY_CNCTD___CONNECT_CHOICE (1u)

#define MCU_233_BMS_099H_BMS_D_CCHRGR_PSTV_RELAY_CNCTD___DISCONNECT_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_D_CCHRGR_PSTV_RELAY_CNCTD___CONNECT_CHOICE (1u)

#define MCU_233_BMS_099H_BMS_HV_BAT_TARGE_TEM_NO__REQUEST_CHOICE (61u)
#define MCU_233_BMS_099H_BMS_HV_BAT_TARGE_TEM_INVALID_CHOICE (63u)

#define MCU_233_BMS_099H_BMS_SLEEP_ALLOWED___NOT__ALLOW_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_SLEEP_ALLOWED___ALLOW_CHOICE (1u)

#define MCU_233_BMS_099H_BMS_KON_POWER_MODULE_OFF_CHOICE (0u)
#define MCU_233_BMS_099H_BMS_KON_POWER_MODULE_ON_CHOICE (1u)

#define MCU_233_BMS_243H_BMS_CC2_MODE___NORMAL_CHOICE (0u)
#define MCU_233_BMS_243H_BMS_CC2_MODE___CHAOJI_CHOICE (1u)

#define MCU_233_BMS_243H_BMS_CC_RESISTANCE_NO_CONNECT_CHOICE (0u)
#define MCU_233_BMS_243H_BMS_CC_RESISTANCE_3300___CHOICE (1u)
#define MCU_233_BMS_243H_BMS_CC_RESISTANCE_2000___CHOICE (2u)
#define MCU_233_BMS_243H_BMS_CC_RESISTANCE_1500___CHOICE (3u)
#define MCU_233_BMS_243H_BMS_CC_RESISTANCE_1000___CHOICE (4u)
#define MCU_233_BMS_243H_BMS_CC_RESISTANCE_680___CHOICE (5u)
#define MCU_233_BMS_243H_BMS_CC_RESISTANCE_220___CHOICE (6u)
#define MCU_233_BMS_243H_BMS_CC_RESISTANCE_100___CHOICE (7u)

#define MCU_233_BMS_243H_BMS_CHARGER_MODE_REQ___NO__OUTPUT_CHOICE (0u)
#define MCU_233_BMS_243H_BMS_CHARGER_MODE_REQ___CURRENT__MODE_CHOICE (1u)
#define MCU_233_BMS_243H_BMS_CHARGER_MODE_REQ___VOLTAGE__MODE_CHOICE (2u)
#define MCU_233_BMS_243H_BMS_CHARGER_MODE_REQ___HEATING__MODE_CHOICE (3u)

#define MCU_233_BMS_243H_BMS_CHARGE_REQ___NO__REQUEST_CHOICE (0u)
#define MCU_233_BMS_243H_BMS_CHARGE_REQ__AC__REQUEST_CHOICE (1u)
#define MCU_233_BMS_243H_BMS_CHARGE_REQ__DC__REQUEST_CHOICE (2u)
#define MCU_233_BMS_243H_BMS_CHARGE_REQ_RESERVED_CHOICE (3u)

#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_OVER_VOL_STS___NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_OVER_VOL_STS___WARNING_____________________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_OVER_VOL_STS_DERATING_______________________CHOICE (2u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_OVER_VOL_STS___DISABLE_________________CHOICE (3u)

#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_UNDER_VOL_STS___NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_UNDER_VOL_STS___WARNING_____________________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_UNDER_VOL_STS_DERATING_______________________CHOICE (2u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_UNDER_VOL_STS___DISABLE_________________CHOICE (3u)

#define MCU_233_BMS_246H_BMS_CUTOFF_ERROR___NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_CUTOFF_ERROR___EMERGENCY__SHUTDOWN_____________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_THERMAL_RUNAWAY___NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_THERMAL_RUNAWAY___EMERGENCY__SHUTDOWN_____________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_HV_BAT_ERR_LVL___NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_ERR_LVL___WARNING__DERATING_____________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_HV_BAT_ERR_LVL___INHIBIT__OPERATION_____________CHOICE (2u)
#define MCU_233_BMS_246H_BMS_HV_BAT_ERR_LVL___EMERGENCY__SHUTDOWN_____________CHOICE (3u)

#define MCU_233_BMS_246H_BMS_BAT_OVER_DIS_CHG___NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_BAT_OVER_DIS_CHG___EMERGENCY__SHUTDOWN_____________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_BAT_OVER_CHG___NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_BAT_OVER_CHG___EMERGENCY__SHUTDOWN_____________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_VOL_DIFF_STS_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_VOL_DIFF_STS_WARNING_____________________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_VOL_DIFF_STS_DERATING_______________________CHOICE (2u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_VOL_DIFF_STS_DISABLE_________________CHOICE (3u)

#define MCU_233_BMS_246H_BMS_HV_BAT_PACK_OVER_VOL_STS_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_PACK_OVER_VOL_STS_WARNING_____________________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_HV_BAT_PACK_OVER_VOL_STS_DERATING_______________________CHOICE (2u)
#define MCU_233_BMS_246H_BMS_HV_BAT_PACK_OVER_VOL_STS_DISABLE_________________CHOICE (3u)

#define MCU_233_BMS_246H_BMS_HV_BAT_PACK_UNDER_VOL_STS_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_PACK_UNDER_VOL_STS_WARNING_____________________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_HV_BAT_PACK_UNDER_VOL_STS_DERATING_______________________CHOICE (2u)
#define MCU_233_BMS_246H_BMS_HV_BAT_PACK_UNDER_VOL_STS_DISABLE_________________CHOICE (3u)

#define MCU_233_BMS_246H_BMS_BAT_NOT_MATCH_FLT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_BAT_NOT_MATCH_FLT_WARNING_____________________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_SOC_JUMP_FLT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_SOC_JUMP_FLT_WARNING_____________________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_D_CCHRG_OUTLET_TEMP_FAULT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_D_CCHRG_OUTLET_TEMP_FAULT_ERROR_____________________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_D_CCHRG_OUTLET_TEMP_FAULT_WARNING__________________________________CHOICE (2u)
#define MCU_233_BMS_246H_BMS_D_CCHRG_OUTLET_TEMP_FAULT_DERATING_______________________CHOICE (3u)

#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_TEM_DIFF_STS_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_TEM_DIFF_STS_WARNING_____________________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_UNDER_TEM_STS_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_UNDER_TEM_STS_WARNING_____________________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_OVER_TEM_STS_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_OVER_TEM_STS_WARNING_____________________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_OVER_TEM_STS_DERATING_______________________CHOICE (2u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_OVER_TEM_STS_DISABLE_________________CHOICE (3u)

#define MCU_233_BMS_246H_BMS_VCU_COMM_FAULT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_VCU_COMM_FAULT_DISABLE_________________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_ACAN_BUS_FAULT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_ACAN_BUS_FAULT_DISABLE_________________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_HV_BAT_FEEDBACK_CURR_FAULT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_FEEDBACK_CURR_FAULT_WARNING_____________________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_HV_BAT_FEEDBACK_CURR_FAULT_DERATING_______________________CHOICE (2u)
#define MCU_233_BMS_246H_BMS_HV_BAT_FEEDBACK_CURR_FAULT_DISABLE_________________CHOICE (3u)

#define MCU_233_BMS_246H_BMS_HV_BAT_CHARGE_CURR_FAULT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CHARGE_CURR_FAULT_WARNING_____________________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CHARGE_CURR_FAULT_DERATING_______________________CHOICE (2u)
#define MCU_233_BMS_246H_BMS_HV_BAT_CHARGE_CURR_FAULT_DISABLE_________________CHOICE (3u)

#define MCU_233_BMS_246H_BMS_HV_BAT_DIS_CHRG_CURR_FAULT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_DIS_CHRG_CURR_FAULT_WARNING_____________________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_HV_BAT_DIS_CHRG_CURR_FAULT_DERATING_______________________CHOICE (2u)
#define MCU_233_BMS_246H_BMS_HV_BAT_DIS_CHRG_CURR_FAULT_DISABLE_________________CHOICE (3u)

#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_ERROR_NO_FAULT_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_ERROR______________________________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_ERROR________________________2_CHOICE (2u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_ERROR________________________3_CHOICE (3u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_ERROR__________CHOICE (4u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_ERROR____________________________CHOICE (5u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_ERROR_____2_______________CHOICE (6u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_ERROR_____________2_______________CHOICE (7u)

#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_FAULT___NO_FAULT_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_FAULT______________________________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_FAULT________________________2_CHOICE (2u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_FAULT________________________3_CHOICE (3u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_FAULT____________________4_CHOICE (4u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_FAULT____________________5_CHOICE (5u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_FAULT_____1_______________6_CHOICE (6u)
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_FAULT_____1_______________7_CHOICE (7u)

#define MCU_233_BMS_246H_BMS_HV_BAT_NGTV_RELAY_CON_FAULT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_NGTV_RELAY_CON_FAULT_DISABLE_________________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_HV_BAT_PSTV_RELAY_CON_FAULT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HV_BAT_PSTV_RELAY_CON_FAULT_DISABLE_________________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT______________CHOICE (1u)
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT_________________CHOICE (2u)
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT__BMU_________CHOICE (3u)
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT____________________CHOICE (4u)
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT________________________CHOICE (5u)
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT_RTC_____________CHOICE (6u)
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT___G1________________________SPI_________CHOICE (7u)
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT___G0________________________SPI_________CHOICE (8u)
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT_BJB_________________9_CHOICE (9u)
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT_BJB_________________10_CHOICE (10u)
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT_BJB_____________CHOICE (11u)
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT_BMS_____________CHOICE (12u)

#define MCU_233_BMS_246H_BMS_CAN_COM_FLT_WITH_LECU_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_CAN_COM_FLT_WITH_LECU_DISABLE_________________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_HVIL_CLSD_FLT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_HVIL_CLSD_FLT_DISABLE_________________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_CHAR_SIGNAL_ABNORMALITY_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_CHAR_SIGNAL_ABNORMALITY_WARNING_____________________CHOICE (1u)

#define MCU_233_BMS_246H_BMS_POWER_IN_ABNORMALITY_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_246H_BMS_POWER_IN_ABNORMALITY_DISABLE_________________CHOICE (3u)

#define MCU_233_BMS_249H_BMS_CHARGE_STS________0_CHOICE (0u)
#define MCU_233_BMS_249H_BMS_CHARGE_STS________________CHOICE (1u)
#define MCU_233_BMS_249H_BMS_CHARGE_STS__________2_CHOICE (2u)
#define MCU_233_BMS_249H_BMS_CHARGE_STS__________________CHOICE (3u)
#define MCU_233_BMS_249H_BMS_CHARGE_STS________4_CHOICE (4u)
#define MCU_233_BMS_249H_BMS_CHARGE_STS__________5_CHOICE (5u)
#define MCU_233_BMS_249H_BMS_CHARGE_STS__________6_CHOICE (6u)
#define MCU_233_BMS_249H_BMS_CHARGE_STS_RESERVED_CHOICE (7u)

#define MCU_233_BMS_249H_BMS_APP_SEC_RELAY_CNCTD___DISCONNECT_CHOICE (0u)
#define MCU_233_BMS_249H_BMS_APP_SEC_RELAY_CNCTD___CONNECT_CHOICE (1u)

#define MCU_233_BMS_249H_BMS_APP_FIR_RELAY_CNCTD___DISCONNECT_CHOICE (0u)
#define MCU_233_BMS_249H_BMS_APP_FIR_RELAY_CNCTD___CONNECT_CHOICE (1u)

#define MCU_233_BMS_249H_BMS_REMAINING_CHARGE_TIME___INVALID_CHOICE (2047u)

#define MCU_233_BMS_249H_BMS_SOC_HIGH_FLT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_249H_BMS_SOC_HIGH_FLT_WARNING_CHOICE (1u)

#define MCU_233_BMS_249H_BMS_SOC_LOW_FLT_NO__ERROR_CHOICE (0u)
#define MCU_233_BMS_249H_BMS_SOC_LOW_FLT_WARNING_CHOICE (1u)

#define MCU_233_BMS_249H_BMS_EXTRA_RANGE_STS_NOT_EXECUTE_CHOICE (0u)
#define MCU_233_BMS_249H_BMS_EXTRA_RANGE_STS_EXECUTING_CHOICE (1u)
#define MCU_233_BMS_249H_BMS_EXTRA_RANGE_STS_SUCCESS_CHOICE (2u)
#define MCU_233_BMS_249H_BMS_EXTRA_RANGE_STS_DEFEAT_CHOICE (3u)

#define MCU_233_BMS_249H_BMS_EMERG_ALLOW___NOT__ALLOW_CHOICE (0u)
#define MCU_233_BMS_249H_BMS_EMERG_ALLOW___ALLOW_CHOICE (1u)

#define MCU_233_BMS_254H_BMS_CHARGE_NU_M___INVALID_CHOICE (31u)

#define MCU_233_BMS_PACK1_260H_BMS_HV_BAT_LOWEST_CELL_VOL_ERROR_CHOICE (65534u)

#define MCU_233_BMS_PACK1_260H_BMS_HV_BAT_HIGHEST_CELL_VOL_ERROR_CHOICE (65534u)

#define MCU_233_BMS_PACK1_262H_BMS_HV_BAT_HIGHEST_TEM_ERROR_CHOICE (254u)

#define MCU_233_BMS_PACK1_262H_BMS_HV_BAT_LOWEST_TEM_ERROR_CHOICE (254u)

#define MCU_233_BMS_PACK1_262H_BMS_HV_BAT_AVG_TEM_ERROR_CHOICE (254u)

#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER1_CHOICE (0u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER2_CHOICE (1u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER3_CHOICE (2u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER4_CHOICE (3u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER5_CHOICE (4u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER6_CHOICE (5u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER7_CHOICE (6u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER8_CHOICE (7u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER9_CHOICE (8u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER10_CHOICE (9u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER11_CHOICE (10u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER12_CHOICE (11u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER13_CHOICE (12u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER14_CHOICE (13u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER15_CHOICE (14u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER16_CHOICE (15u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER17_CHOICE (16u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER18_CHOICE (17u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER19_CHOICE (18u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER20_CHOICE (19u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER21_CHOICE (20u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER22_CHOICE (21u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER23_CHOICE (22u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER24_CHOICE (23u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER25_CHOICE (24u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER26_CHOICE (25u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER27_CHOICE (26u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER28_CHOICE (27u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER29_CHOICE (28u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER30_CHOICE (29u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER31_CHOICE (30u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER32_CHOICE (31u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER33_CHOICE (32u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER34_CHOICE (33u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER35_CHOICE (34u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER36_CHOICE (35u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER37_CHOICE (36u)
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_CELL_VOL_SERIAL_NUMBER38_CHOICE (37u)

#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER1_ERROR_CHOICE (254u)

#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER2_ERROR_CHOICE (254u)

#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER3_ERROR_CHOICE (254u)

#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER_CELL_TEMP_SERIAL_NUMBER1_CHOICE (0u)
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER_CELL_TEMP_SERIAL_NUMBER2_CHOICE (1u)
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER_CELL_TEMP_SERIAL_NUMBER3_CHOICE (2u)
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER_CELL_TEMP_SERIAL_NUMBER4_CHOICE (3u)
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER_CELL_TEMP_SERIAL_NUMBER5_CHOICE (4u)
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER_CELL_TEMP_SERIAL_NUMBER6_CHOICE (5u)
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER_CELL_TEMP_SERIAL_NUMBER7_CHOICE (6u)
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER_CELL_TEMP_SERIAL_NUMBER8_CHOICE (7u)

#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER1_ERROR_CHOICE (254u)

#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER2_ERROR_CHOICE (254u)

#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER3_ERROR_CHOICE (254u)

#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER4_ERROR_CHOICE (254u)

#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER5_ERROR_CHOICE (254u)

#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER6_ERROR_CHOICE (254u)

#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER7_ERROR_CHOICE (254u)

#define MCU_233_MCU_097H_MCU_ANTI_SHAKE_DISABLE_CHOICE (0u)
#define MCU_233_MCU_097H_MCU_ANTI_SHAKE_ENABLE_CHOICE (1u)

#define MCU_233_MCU_097H_MCU_MOT_SPD_VALID_VALID_CHOICE (0u)
#define MCU_233_MCU_097H_MCU_MOT_SPD_VALID_INVALID_CHOICE (1u)

#define MCU_233_MCU_097H_MCU_MOT_TOQ_VALID_VALID_CHOICE (0u)
#define MCU_233_MCU_097H_MCU_MOT_TOQ_VALID_INVALID_CHOICE (1u)

#define MCU_233_MCU_097H_MCU_MOT_WORKING_STS_INTI_________CHOICE (0u)
#define MCU_233_MCU_097H_MCU_MOT_WORKING_STS_IDLE_____________CHOICE (1u)
#define MCU_233_MCU_097H_MCU_MOT_WORKING_STS_STANDBY______0___CHOICE (2u)
#define MCU_233_MCU_097H_MCU_MOT_WORKING_STS_TORQUE__CTRL__MODE__________CHOICE (3u)
#define MCU_233_MCU_097H_MCU_MOT_WORKING_STS_SPEED__CTRL__MODE___________CHOICE (4u)
#define MCU_233_MCU_097H_MCU_MOT_WORKING_STS_ACTIVE__DISCHARGE__MODE_CHOICE (5u)
#define MCU_233_MCU_097H_MCU_MOT_WORKING_STS_RESERVED__CHOICE (6u)
#define MCU_233_MCU_097H_MCU_MOT_WORKING_STS_INVALID_____CHOICE (7u)

#define MCU_233_MCU_097H_MCU_DISCHARGE_STS_NO_DISCHARGE_CHOICE (0u)
#define MCU_233_MCU_097H_MCU_DISCHARGE_STS_DISCHARGE_FINISHED_CHOICE (1u)
#define MCU_233_MCU_097H_MCU_DISCHARGE_STS_DISCHARGE_TIMEOUT_CHOICE (2u)
#define MCU_233_MCU_097H_MCU_DISCHARGE_STS_DISCHARGING_CHOICE (3u)

#define MCU_233_MCU_097H_MCU_MOT_ACTU_TOQ___INVALID_CHOICE (65535u)

#define MCU_233_MCU_097H_MCU_MOT_ACTU_SPD___INVALID_CHOICE (65535u)

#define MCU_233_MCU_097H_MCU_MOT_TOQ_LMT___INVALID_CHOICE (65535u)

#define MCU_233_MCU_098H_MCU_AC_ACTU_CRNT___INVALID_CHOICE (65535u)

#define MCU_233_MCU_098H_MCU_MOT_MOVING_STS______2_CHOICE (2u)
#define MCU_233_MCU_098H_MCU_MOT_MOVING_STS__________CHOICE (3u)
#define MCU_233_MCU_098H_MCU_MOT_MOVING_STS______5_CHOICE (5u)
#define MCU_233_MCU_098H_MCU_MOT_MOVING_STS______6_CHOICE (6u)
#define MCU_233_MCU_098H_MCU_MOT_MOVING_STS______7_CHOICE (7u)

#define MCU_233_MCU_26_EH_MCU_PHASE_IGBT_MAX_TEMP_ERROR_CHOICE (254u)

#define MCU_233_MCU_26_EH_MCU_MOT_ACTU_TEMP_ERROR_CHOICE (254u)

#define MCU_233_MCU_26_EH_MCU_IPM_RADIATOR_TEMP_ERROR_CHOICE (254u)

#define MCU_233_MCU_26_EH_MCU_DC_ACTU_CRNT___INVALID_CHOICE (65535u)

#define MCU_233_MCU_3_E5H_MCU_DC_LINK_OVER_VOLT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_DC_LINK_OVER_VOLT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_MOT_OVER_TEM_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_MOT_OVER_TEM_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_IGBT_OVER_TEMP_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_IGBT_OVER_TEMP_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_ROTARY_TRANSFORMER_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_ROTARY_TRANSFORMER_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_CURRENT_HALL_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_CURRENT_HALL_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_MOT_LACK_OF_PHA_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_MOT_LACK_OF_PHA_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_IGBT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_IGBT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_MOT_OVER_CRNT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_MOT_OVER_CRNT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_MOT_OVER_TEMP_LIM_TOQ___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_MOT_OVER_TEMP_LIM_TOQ___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_CAN_COM_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_CAN_COM_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_CPLD_RUN_STS___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_CPLD_RUN_STS___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_DRV_LOWER_ARM_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_DRV_LOWER_ARM_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_DRV_UPPER_ARM_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_DRV_UPPER_ARM_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_HW_OVERL_CURRENT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_HW_OVERL_CURRENT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_HW_OVER_VOLT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_HW_OVER_VOLT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_DC_LINK_UNDER_VOLT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_DC_LINK_UNDER_VOLT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_IGBT_SAM_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_IGBT_SAM_ERR___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_MOT_ER_LVL___NO__ERROR_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_MOT_ER_LVL___WARNING______________________CHOICE (1u)
#define MCU_233_MCU_3_E5H_MCU_MOT_ER_LVL_DERATING________________________CHOICE (2u)
#define MCU_233_MCU_3_E5H_MCU_MOT_ER_LVL___DISABLE_________________CHOICE (3u)

#define MCU_233_MCU_3_E5H_MCU_OVER_LOAD_LAG___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_OVER_LOAD_LAG___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_MOT_OVER_SPD_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_MOT_OVER_SPD_FLT___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_RADIATOR_OVER_TEMP_LIM_TOQ___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_RADIATOR_OVER_TEMP_LIM_TOQ___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_IGBT_JUNC_OV_TEMP_LIM_TOQ___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_IGBT_JUNC_OV_TEMP_LIM_TOQ___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_IGBT_NTC_OVER_TEMP_LIM_TOQ___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_IGBT_NTC_OVER_TEMP_LIM_TOQ___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_M12_UNDER_VOL___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_M12_UNDER_VOL___FAILURE_CHOICE (1u)

#define MCU_233_MCU_3_E5H_MCU_MOTOR_SAM_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_MCU_3_E5H_MCU_MOTOR_SAM_ERR___FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_ERR_LEVEL___NORMAL_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_ERR_LEVEL___WARNING___CHOICE (1u)
#define MCU_233_EOP_1_A0H_EOP_ERR_LEVEL___DERATING__POWER__FLAG__CHOICE (2u)
#define MCU_233_EOP_1_A0H_EOP_ERR_LEVEL____SHORT__TIME__STOP__________________________________________________________________________________________________________________________________________CHOICE (3u)
#define MCU_233_EOP_1_A0H_EOP_ERR_LEVEL___LONG__TIME__STOP________________________________________________________________________________________________________________________________________________CHOICE (4u)

#define MCU_233_EOP_1_A0H_EOP_5_V_UNDER_VOLT_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_5_V_UNDER_VOLT_ERR__VDDE__UNDER__VOLTAGE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_5_V_OVER_VOLT_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_5_V_OVER_VOLT_ERR__VDDE__OVER__VOLTAGE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_5_V_OVER_CUR_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_5_V_OVER_CUR_ERR_EVDD__OVERCURRENT_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_UNDER_SPEED_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_UNDER_SPEED_ERR___RESOLVER__SIGNAL__IMPLAUSIBLE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_ZERO_POSITION_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_ZERO_POSITION_ERR___ZERO__POSITION__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_RESOLVER_SIG_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_RESOLVER_SIG_ERR___RESOLVER__SIGNAL__IMPLAUSIBLE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_UNDER_VOLT_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_UNDER_VOLT_ERR__GDU__UNDER_VOLTAGE__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_RATING_FIAG___NO__DE_RATING_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_RATING_FIAG___DE_RATING__MODE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_OPERATION_MODE___IDLE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_OPERATION_MODE___NORMAL__RUNNING_CHOICE (1u)
#define MCU_233_EOP_1_A0H_EOP_OPERATION_MODE___FAILSAFE__RUNNING_CHOICE (2u)
#define MCU_233_EOP_1_A0H_EOP_OPERATION_MODE___FAILURE_MODE______________________________________________________________________________________________________________________________________CHOICE (3u)

#define MCU_233_EOP_1_A0H_EOP_OVER_CUR_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_OVER_CUR_ERR___OVER__PHASE__CURRENT__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_CHECKSUM_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_CHECKSUM_ERR__ECU__CHECKSUM__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_OVER_SPEED_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_OVER_SPEED_ERR___SPEED__IMPLAUSIBLE__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_CUR_OFFSET_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_CUR_OFFSET_ERR___CURRENT_OFFSET_OF__PRE_DRIVER__CIRCUIT__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_PCB_OVER_TEMP_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_PCB_OVER_TEMP_ERR__PCB__OVER__TEMPERATURE__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_OVER_VOLT_ERR_1___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_OVER_VOLT_ERR_1__DC__OVER__VOLTAGE__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_UNDER_VOLT_ERR_1___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_UNDER_VOLT_ERR_1__DC__UNDER__VOLTAGE__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_TEMP_SENSOR_OVER_VOLT_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_TEMP_SENSOR_OVER_VOLT_ERR___TEMPERATURE__SENSOR__OVER__VOLTAGE__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_TEMP_SENSOR_UNDER_VOLT_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_TEMP_SENSOR_UNDER_VOLT_ERR___TEMPERATURE__SENSOR__UNDER__VOLTAGE__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_SENSOR_OVER_VOLT_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_SENSOR_OVER_VOLT_ERR___POSITION__SENSOR__OVER__VOLTAGE__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_SENSOR_UNDER_VOLT_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_SENSOR_UNDER_VOLT_ERR___POSITION__SENSOR__UNDER__VOLTAGE__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_OVER_VOLT_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_OVER_VOLT_ERR__GDU__OVER_VOLTAGE__FAILURE__CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_POWER_STAGE_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_POWER_STAGE_ERR__GDU__DESATURATION__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_MOT_BLOKED_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_MOT_BLOKED_ERR___MOTOR__BLOCK__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_DRY_RUN_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_DRY_RUN_ERR___DRY__RUN__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_COMM_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_COMM_ERR___COMMUNICATION__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_RAM_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_RAM_ERR__RAM__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_ROM_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_ROM_ERR__ROM__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_E2_PROM_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_E2_PROM_ERR__EEPROM__FAILURE_CHOICE (1u)

#define MCU_233_EOP_1_A0H_EOP_WATCHDOG_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_EOP_1_A0H_EOP_WATCHDOG_ERR___WATCHDOG__FAILURE_CHOICE (1u)

#define MCU_233_DCDC_1_F7H_DCDC_B1_HV_LOCK___NO__FAILURE_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_B1_HV_LOCK___DISABLE______________CHOICE (1u)

#define MCU_233_DCDC_1_F7H_DCDC_CAN_TIME_OUT___NO__FAILURE_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_CAN_TIME_OUT___DISABLE______________CHOICE (1u)

#define MCU_233_DCDC_1_F7H_DCDC_12_V_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_12_V_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_DCDC_1_F7H_DCDC_TEM_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_TEM_FLT___DISABLE______________CHOICE (1u)

#define MCU_233_DCDC_1_F7H_DCDC_MD_______0_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_MD_______1_CHOICE (1u)
#define MCU_233_DCDC_1_F7H_DCDC_MD______2_CHOICE (2u)
#define MCU_233_DCDC_1_F7H_DCDC_MD______3_CHOICE (3u)

#define MCU_233_DCDC_1_F7H_DCDC_STS_ERR_LVL___NO__ERROR_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_STS_ERR_LVL___WARNING__________________CHOICE (1u)
#define MCU_233_DCDC_1_F7H_DCDC_STS_ERR_LVL___DERATING___________________CHOICE (2u)
#define MCU_233_DCDC_1_F7H_DCDC_STS_ERR_LVL___DISABLE______________CHOICE (3u)

#define MCU_233_DCDC_1_F7H_DCDC_B1_HARD_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_B1_HARD_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_DCDC_1_F7H_DCDC_B1_SCT___NO__FAILURE_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_B1_SCT___DISABLE______________CHOICE (1u)

#define MCU_233_DCDC_1_F7H_DCDC_B1_VH_OV___NO__FAILURE_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_B1_VH_OV___DISABLE______________CHOICE (1u)

#define MCU_233_DCDC_1_F7H_DCDC_B1_OCP___NO__FAILURE_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_B1_OCP___DISABLE______________CHOICE (1u)

#define MCU_233_DCDC_1_F7H_DCDC_B1_VOUT_UV___NO__FAILURE_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_B1_VOUT_UV___DISABLE______________CHOICE (1u)

#define MCU_233_DCDC_1_F7H_DCDC_B1_VOUT_OV___NO__FAILURE_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_B1_VOUT_OV___DISABLE______________CHOICE (1u)

#define MCU_233_DCDC_1_F7H_DCDC_B1_VIN_UV___NO__FAILURE_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_B1_VIN_UV___DISABLE______________CHOICE (1u)

#define MCU_233_DCDC_1_F7H_DCDC_B1_VIN_OV___NO__FAILURE_CHOICE (0u)
#define MCU_233_DCDC_1_F7H_DCDC_B1_VIN_OV___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_DCAC_REQUEST_NO__REQUEST_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_DCAC_REQUEST_REQUEST_CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_S2_STATUS__________CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_S2_STATUS___________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_PFCAC_OUTPUT_OV_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_PFCAC_OUTPUT_OV_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_PFCAC_OUTPUT_CURR_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_PFCAC_OUTPUT_CURR_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_LLCHVDC_CURR_INPUT_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_LLCHVDC_CURR_INPUT_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_LLCHVDC_INPUT_UV_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_LLCHVDC_INPUT_UV_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_DCAC_MOD________CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_DCAC_MOD______1_CHOICE (1u)
#define MCU_233_BOBC_2_E8H_BOBC_DCAC_MOD__________2_CHOICE (2u)
#define MCU_233_BOBC_2_E8H_BOBC_DCAC_MOD__________3_CHOICE (3u)
#define MCU_233_BOBC_2_E8H_BOBC_DCAC_MOD__________________CHOICE (4u)
#define MCU_233_BOBC_2_E8H_BOBC_DCAC_MOD______7_CHOICE (7u)

#define MCU_233_BOBC_2_E8H_BOBC_LLCLVDC_UNDER_VOLT_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_LLCLVDC_UNDER_VOLT_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_LLCLVDC_OVER_VOLT_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_LLCLVDC_OVER_VOLT_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_LLC_VOLT_OVER_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_LLC_VOLT_OVER_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_LLC_CURR_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_LLC_CURR_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_PFCACOUT_PRO___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_PFCACOUT_PRO___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_PFCDC_OVER_VOLT_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_PFCDC_OVER_VOLT_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_PFCDC_UNDER_VOLT_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_PFCDC_UNDER_VOLT_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_2_E8H_BOBC_A_CCHG_OUTLET_TEMP_FAULT_NO__ERROR_CHOICE (0u)
#define MCU_233_BOBC_2_E8H_BOBC_A_CCHG_OUTLET_TEMP_FAULT_DERATING___________________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_PFCAC_INPUT_CURR_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_PFCAC_INPUT_CURR_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_CHARGER_OTP___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_CHARGER_OTP___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_CHARGER_HARDWARE_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_CHARGER_HARDWARE_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_INLET_ELECTRONIC_LOCK_UNLOCK_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_INLET_ELECTRONIC_LOCK_LOCK_CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_CHARGER_MODE___NO__OUTPUT_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_CHARGER_MODE___CURRENT__MODE_CHOICE (1u)
#define MCU_233_BOBC_297H_BOBC_CHARGER_MODE___VOLTAGE__MODE_CHOICE (2u)
#define MCU_233_BOBC_297H_BOBC_CHARGER_MODE___DISCHARGE__MODE_CHOICE (3u)

#define MCU_233_BOBC_297H_BOBC_STS_ERR_LVL___NO__ERROR_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_STS_ERR_LVL___WARNING__________________CHOICE (1u)
#define MCU_233_BOBC_297H_BOBC_STS_ERR_LVL___DERATING___________________CHOICE (2u)
#define MCU_233_BOBC_297H_BOBC_STS_ERR_LVL___DISABLE______________CHOICE (3u)

#define MCU_233_BOBC_297H_BOBC_PFCAC_INPUT_O_VOLT_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_PFCAC_INPUT_O_VOLT_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_PFCAC_UNDER_VOLT_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_PFCAC_UNDER_VOLT_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_PFC_CURR_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_PFC_CURR_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_CHRGNG_PLUG_CNCTD_STS___CP_DISCONNECT_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_CHRGNG_PLUG_CNCTD_STS___CP_CONNECT_CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_CHARGER_STATUS___IDLE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_CHARGER_STATUS___WORKING_CHOICE (1u)
#define MCU_233_BOBC_297H_BOBC_CHARGER_STATUS___CHARGER__ABNORMAL_CHOICE (2u)
#define MCU_233_BOBC_297H_BOBC_CHARGER_STATUS___CHARGER__FAULT_CHOICE (3u)

#define MCU_233_BOBC_297H_BOBC_KL30_UNDER_VOLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_KL30_UNDER_VOLT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_CHARGER_COM_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_CHARGER_COM_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_LLCHVDCOP_CURR_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_LLCHVDCOP_CURR_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_LLCHVDC_OUTPUT_UV_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_LLCHVDC_OUTPUT_UV_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_LLCHVDC_OVER_VOLT_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_LLCHVDC_OVER_VOLT_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_PFCA_CFREQU_FAULT___NO__FAILURE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_PFCA_CFREQU_FAULT___DISABLE______________CHOICE (1u)

#define MCU_233_BOBC_297H_BOBC_BOOKING_CHRG_STS_INITAL_VALUE_CHOICE (0u)
#define MCU_233_BOBC_297H_BOBC_BOOKING_CHRG_STS_SUCCESS_CHOICE (1u)
#define MCU_233_BOBC_297H_BOBC_BOOKING_CHRG_STS_FAIL_CHOICE (2u)
#define MCU_233_BOBC_297H_BOBC_BOOKING_CHRG_STS_RESERVED_CHOICE (3u)

#define MCU_233_EPS_117H_EPS_STR_ANG_V_INITIALIZING_CHOICE (0u)
#define MCU_233_EPS_117H_EPS_STR_ANG_V_VALID_CHOICE (1u)
#define MCU_233_EPS_117H_EPS_STR_ANG_V_INVALID_CHOICE (2u)
#define MCU_233_EPS_117H_EPS_STR_ANG_V_RESERVED_CHOICE (3u)

#define MCU_233_EPS_117H_EPS_MODE_COMFORT__MODE_CHOICE (0u)
#define MCU_233_EPS_117H_EPS_MODE_SPORT__MODE_CHOICE (1u)
#define MCU_233_EPS_117H_EPS_MODE_SWITCH__FAILED_CHOICE (2u)
#define MCU_233_EPS_117H_EPS_MODE_RESERVED_CHOICE (3u)

#define MCU_233_EPS_117H_EPS_FAILURE_STS_SENSOR_INFORMATION_VALID_CHOICE (0u)
#define MCU_233_EPS_117H_EPS_FAILURE_STS_SENSOR_INFORMATION_INVALID_CHOICE (1u)

#define MCU_233_EPS_117H_EPS_CALIBRATION_STS_SENSOR_NOT_CALIBRATED_CHOICE (0u)
#define MCU_233_EPS_117H_EPS_CALIBRATION_STS_SENSOR_CALIBRATED_CHOICE (1u)

#define MCU_233_EPS_117H_EPS_FAULT_LEVEL________CHOICE (0u)
#define MCU_233_EPS_117H_EPS_FAULT_LEVEL__________1_CHOICE (1u)
#define MCU_233_EPS_117H_EPS_FAULT_LEVEL__________2_CHOICE (2u)
#define MCU_233_EPS_117H_EPS_FAULT_LEVEL____________________________________________________________________________________CHOICE (3u)

#define MCU_233_EPS_117H_EPS_FAIL_STATUS_NO_REQUEST__CHOICE (0u)
#define MCU_233_EPS_117H_EPS_FAIL_STATUS_REQUEST_YELLOW_LAMP_CHOICE (1u)
#define MCU_233_EPS_117H_EPS_FAIL_STATUS_REQUEST_RED_LAMP_CHOICE (2u)
#define MCU_233_EPS_117H_EPS_FAIL_STATUS_RESERVED_CHOICE (3u)

#define MCU_233_EPS_117H_EPS_STR_ANG_SPD_V_INITIALIZING_CHOICE (0u)
#define MCU_233_EPS_117H_EPS_STR_ANG_SPD_V_VALID_CHOICE (1u)
#define MCU_233_EPS_117H_EPS_STR_ANG_SPD_V_INVALID_CHOICE (2u)
#define MCU_233_EPS_117H_EPS_STR_ANG_SPD_V_RESERVED_CHOICE (3u)

#define MCU_233_EPS_117H_EPS_FAULT_CODE________CHOICE (0u)
#define MCU_233_EPS_117H_EPS_FAULT_CODE________________1_CHOICE (1u)
#define MCU_233_EPS_117H_EPS_FAULT_CODE________________2_CHOICE (2u)
#define MCU_233_EPS_117H_EPS_FAULT_CODE________________3_CHOICE (3u)
#define MCU_233_EPS_117H_EPS_FAULT_CODE_VCU_________CHOICE (4u)

#define MCU_233_EPS_131H_VIBRATION_ALARM_CTRL_STS_DEACTIVATED_CHOICE (0u)
#define MCU_233_EPS_131H_VIBRATION_ALARM_CTRL_STS_INACTIVE_CHOICE (1u)
#define MCU_233_EPS_131H_VIBRATION_ALARM_CTRL_STS_ACTIVE_CHOICE (2u)
#define MCU_233_EPS_131H_VIBRATION_ALARM_CTRL_STS_RESERVED_LDW_________CHOICE (3u)

#define MCU_233_EPS_131H_EPS_CTRL_STS___NOT_CONTROL_________CHOICE (0u)
#define MCU_233_EPS_131H_EPS_CTRL_STS___TORQUE_CONTROL__________CHOICE (1u)
#define MCU_233_EPS_131H_EPS_CTRL_STS___ANGLE_CONTROL_________CHOICE (2u)

#define MCU_233_EPS_131H_EPS_CAMERA_CTRL_STATUS_INITIALIZATION_CHOICE (0u)
#define MCU_233_EPS_131H_EPS_CAMERA_CTRL_STATUS_AVAILABLE_CHOICE (1u)
#define MCU_233_EPS_131H_EPS_CAMERA_CTRL_STATUS_ABORT_CHOICE (4u)
#define MCU_233_EPS_131H_EPS_CAMERA_CTRL_STATUS_RESERVED_CHOICE (5u)

#define MCU_233_EPS_131H_EPS_DRIVER_INTERVENTION_STEERING___NO__DRIVER_INTERVENTION_CHOICE (0u)
#define MCU_233_EPS_131H_EPS_DRIVER_INTERVENTION_STEERING___DRIVER_INTERVENTION_________________CHOICE (1u)

#define MCU_233_EPS_131H_EPS_DRIVER_INTERVENTION_STEERING_V_INVALID_CHOICE (0u)
#define MCU_233_EPS_131H_EPS_DRIVER_INTERVENTION_STEERING_V_VALID_CHOICE (1u)

#define MCU_233_EPS_131H_DRIVER_INPUT_TORQUE_V_INVALID_CHOICE (0u)
#define MCU_233_EPS_131H_DRIVER_INPUT_TORQUE_V_VALID_CHOICE (1u)

#define MCU_233_EPS_131H_HAND_DETECTION________CHOICE (0u)
#define MCU_233_EPS_131H_HAND_DETECTION______________CHOICE (1u)

#define MCU_233_EHB_13_AH_EHB_BRAKE_CONDITION_MANUAL_BRAKE_CONDITION__________________CHOICE (0u)
#define MCU_233_EHB_13_AH_EHB_BRAKE_CONDITION_VEH_LONG_ACC_CONDITION________________CHOICE (1u)
#define MCU_233_EHB_13_AH_EHB_BRAKE_CONDITION_RESERVED_CHOICE (2u)

#define MCU_233_EHB_13_AH_EHB_STATUS_NOT_ACTIVE_CHOICE (0u)
#define MCU_233_EHB_13_AH_EHB_STATUS_ACTIVE_CHOICE (1u)

#define MCU_233_EHB_13_AH_EHB_S_OUTPUT_ROD_ACT_V_NOT_INITIALIZED_CHOICE (0u)
#define MCU_233_EHB_13_AH_EHB_S_OUTPUT_ROD_ACT_V_NORMAL_CHOICE (1u)
#define MCU_233_EHB_13_AH_EHB_S_OUTPUT_ROD_ACT_V_FAULTY_CHOICE (2u)
#define MCU_233_EHB_13_AH_EHB_S_OUTPUT_ROD_ACT_V_RESERVED_CHOICE (3u)

#define MCU_233_EHB_13_AH_EHB_S_OUTPUT_ROD_DRIVER_V_NOT_INITIALIZED_CHOICE (0u)
#define MCU_233_EHB_13_AH_EHB_S_OUTPUT_ROD_DRIVER_V_NORMAL_CHOICE (1u)
#define MCU_233_EHB_13_AH_EHB_S_OUTPUT_ROD_DRIVER_V_FAULTY_CHOICE (2u)
#define MCU_233_EHB_13_AH_EHB_S_OUTPUT_ROD_DRIVER_V_RESERVED_CHOICE (3u)

#define MCU_233_EHB_13_AH_EHB_MCYLINDER_PRESSURE_V_INVALID_CHOICE (0u)
#define MCU_233_EHB_13_AH_EHB_MCYLINDER_PRESSURE_V_VALID_CHOICE (1u)

#define MCU_233_EHB_13_AH_EHB_EHB_DIAG_ACTIVE___INACTIVE__CHOICE (0u)
#define MCU_233_EHB_13_AH_EHB_EHB_DIAG_ACTIVE___ACTIVE_CHOICE (1u)

#define MCU_233_EHB_13_AH_EHB_FAULT_LEVEL________CHOICE (0u)
#define MCU_233_EHB_13_AH_EHB_FAULT_LEVEL______________________________________CHOICE (1u)
#define MCU_233_EHB_13_AH_EHB_FAULT_LEVEL___________________1______________1___2_CHOICE (2u)
#define MCU_233_EHB_13_AH_EHB_FAULT_LEVEL___________________2______________2___3_CHOICE (3u)
#define MCU_233_EHB_13_AH_EHB_FAULT_LEVEL___________________1______________1___4_CHOICE (4u)
#define MCU_233_EHB_13_AH_EHB_FAULT_LEVEL___________________2______________2___5_CHOICE (5u)

#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE_EHB_____________0_CHOICE (0u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE_EHB_________________CHOICE (1u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE______________2_CHOICE (2u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE_EHB_____________3_CHOICE (3u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE__________________CHOICE (4u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE________________CHOICE (5u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE______________________CHOICE (6u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE_EHB_______________CHOICE (7u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE_EHB_____________8_CHOICE (8u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE________________________CHOICE (9u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE______________10_CHOICE (10u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE______________11_CHOICE (11u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE______________12_CHOICE (12u)
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE___RESERVED_CHOICE (15u)

#define MCU_233_EHB_13_CH_EHB_BRAKE_PEDAL_APPLIED_V_NOT_INITIALIZED_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_BRAKE_PEDAL_APPLIED_V_NORMAL_CHOICE (1u)
#define MCU_233_EHB_13_CH_EHB_BRAKE_PEDAL_APPLIED_V_FAULTY_CHOICE (2u)
#define MCU_233_EHB_13_CH_EHB_BRAKE_PEDAL_APPLIED_V_RESERVED_CHOICE (3u)

#define MCU_233_EHB_13_CH_EHB_BRAKE_PEDAL_APPLIED__BRAKE_PEDAL_NOT_APPLIED_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_BRAKE_PEDAL_APPLIED__BRAKE_PEDAL_APPLIED_CHOICE (1u)

#define MCU_233_EHB_13_CH_EHB_LLS_V_INVALID_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_LLS_V_VALID_CHOICE (1u)

#define MCU_233_EHB_13_CH_EHB_LLS___OFF_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_LLS___ON_CHOICE (1u)

#define MCU_233_EHB_13_CH_EHB_DOUBLE_FLA_LIGHTS_RQ___OFF_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_DOUBLE_FLA_LIGHTS_RQ___ON_CHOICE (1u)

#define MCU_233_EHB_13_CH_EHB_BRK_LIGHTS_RQ___OFF_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_BRK_LIGHTS_RQ___ON_CHOICE (1u)

#define MCU_233_EHB_13_CH_EHB_RGN_BRK_ST_NOT_INITIALIZED_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_RGN_BRK_ST_NORMAL_CHOICE (1u)
#define MCU_233_EHB_13_CH_EHB_RGN_BRK_ST_FAULTY_CHOICE (2u)
#define MCU_233_EHB_13_CH_EHB_RGN_BRK_ST_RESERVED_CHOICE (3u)

#define MCU_233_EHB_13_CH_EHB_RGN_BRK_TQ_REQ_V_NOT__REQUEST_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_RGN_BRK_TQ_REQ_V_REQUEST_CHOICE (1u)

#define MCU_233_EHB_13_CH_EHB_EXT_REQ_STATUS_EHBR_NOT_INITIALIZED_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_EXT_REQ_STATUS_EHBR_NOT_AVAILABLE_CHOICE (1u)
#define MCU_233_EHB_13_CH_EHB_EXT_REQ_STATUS_EHBR_AVAILABLE_CHOICE (2u)

#define MCU_233_EHB_13_CH_EHB_EXT_REQ_PRIO_EHBR_NOT_DOMINATE_THE_BRAKE_TORQUE_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_EXT_REQ_PRIO_EHBR_DOMINATES_THE_BRAKE_TORQUE_CHOICE (1u)

#define MCU_233_EHB_13_CH_EHB_HMI_WARNING_ON_NO_REQUEST__CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_HMI_WARNING_ON_REQUEST_EHB_____________________________CHOICE (1u)

#define MCU_233_EHB_13_CH_EHB_P_RUNOUT_V_NOT_INITIALIZED_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_P_RUNOUT_V_NORMAL_CHOICE (1u)
#define MCU_233_EHB_13_CH_EHB_P_RUNOUT_V_FAULTY_CHOICE (2u)
#define MCU_233_EHB_13_CH_EHB_P_RUNOUT_V_RESERVED_CHOICE (3u)

#define MCU_233_EHB_13_CH_EHB_AWB_LEVEL_NO_LEVEL_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_AWB_LEVEL_LEVEL_1_CHOICE (1u)
#define MCU_233_EHB_13_CH_EHB_AWB_LEVEL_LEVEL_2_CHOICE (2u)
#define MCU_233_EHB_13_CH_EHB_AWB_LEVEL_LEVEL_3_CHOICE (3u)
#define MCU_233_EHB_13_CH_EHB_AWB_LEVEL_LEVEL_4_CHOICE (4u)

#define MCU_233_EHB_13_CH_EHB_AEB_ACTIVE_NOT_ACTIVE_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_AEB_ACTIVE_ACTIVE_CHOICE (1u)

#define MCU_233_EHB_13_CH_EHB_EBA_ACTIVE_NOT_ACTIVE_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_EBA_ACTIVE_ACTIVE_CHOICE (1u)

#define MCU_233_EHB_13_CH_EHB_AWB_ACTIVE_NOT_ACTIVE_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_AWB_ACTIVE_ACTIVE_CHOICE (1u)

#define MCU_233_EHB_13_CH_EHB_PREFILL_ACTIVE_NOT_ACTIVE_CHOICE (0u)
#define MCU_233_EHB_13_CH_EHB_PREFILL_ACTIVE_ACTIVE_CHOICE (1u)

#define MCU_233_EHB_13_BH_EHB_HMI_VCU_COM_WARNING_NORMAL________CHOICE (0u)
#define MCU_233_EHB_13_BH_EHB_HMI_VCU_COM_WARNING_WARNING_LV1__VCU_EPB_SLV_P_____________________CHOICE (1u)
#define MCU_233_EHB_13_BH_EHB_HMI_VCU_COM_WARNING_WARNING_LV2__VCU_EPB_SLV_P____________________ESC_______CHOICE (2u)
#define MCU_233_EHB_13_BH_EHB_HMI_VCU_COM_WARNING_WARNING_LV3__VCU_EPB_SLV_P______________________P_____________________CHOICE (3u)
#define MCU_233_EHB_13_BH_EHB_HMI_VCU_COM_WARNING_RESERVED_CHOICE (7u)

#define MCU_233_EHB_13_BH_EHB_EPB_SLV_MODE_NORMAL_____ESC_____CHOICE (0u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_MODE______________ESC______________VCU_____CHOICE (1u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_MODE__________EPB_SLV_________________CHOICE (2u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_MODE_RESERVED_CHOICE (3u)

#define MCU_233_EHB_13_BH_EHB_EPB_SLV_CLAMP_FORCE_V_INVALID_CHOICE (0u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_CLAMP_FORCE_V_VALID_CHOICE (1u)

#define MCU_233_EHB_13_BH_EHB_EPB_SLV_WARNING_NOT__WARNING_CHOICE (0u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_WARNING_WARNING_CHOICE (1u)

#define MCU_233_EHB_13_BH_EHB_EPB_SLV_HOST_AVAILABILITY_EPB_SLV_AVAILABILITY_NONE_CHOICE (0u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_HOST_AVAILABILITY_EPB_SLV_AVAILABILITY_APPLY_CHOICE (1u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_HOST_AVAILABILITY_EPB_SLV_AVAILABILITY_RELEASE_CHOICE (2u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_HOST_AVAILABILITY_EPB_SLV_AVAILABILITY_APPLY_AND_RELEASE_CHOICE (3u)

#define MCU_233_EHB_13_BH_EHB_EPB_SLV_ACTUATOR_STATUS_EPB_SLV_RELEASED_CHOICE (0u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_ACTUATOR_STATUS_EPB_SLV_RELEASING_CHOICE (1u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_ACTUATOR_STATUS_EPB_SLV_LOCKED_CHOICE (2u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_ACTUATOR_STATUS_EPB_SLV_LOCKING_CHOICE (3u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_ACTUATOR_STATUS_EPB_SLV_RWU_________CHOICE (4u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_ACTUATOR_STATUS_EPB_SLV____________________CHOICE (5u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_ACTUATOR_STATUS_ERROR_CHOICE (6u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_ACTUATOR_STATUS_EPB_SLV_COMPLETELY_RELEASED_CHOICE (7u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_ACTUATOR_STATUS_RESERVED_CHOICE (15u)

#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAULT_MESSAGE_EPB___________________0_CHOICE (0u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAULT_MESSAGE_EPB___________________1_CHOICE (1u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAULT_MESSAGE__________________CHOICE (2u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAULT_MESSAGE_EPB_____________3_CHOICE (3u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAULT_MESSAGE_EPB_____________4_CHOICE (4u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAULT_MESSAGE___EPB_____________CHOICE (5u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAULT_MESSAGE______________CHOICE (19u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAULT_MESSAGE___RESERVED_CHOICE (63u)

#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAIL_LEVEL________CHOICE (0u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAIL_LEVEL__________1_CHOICE (1u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAIL_LEVEL__________2_CHOICE (2u)
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAIL_LEVEL__________3_CHOICE (3u)

#define MCU_233_EHB_13_BH_EHB_P_SET_EBR_V_OFF__CHOICE (0u)
#define MCU_233_EHB_13_BH_EHB_P_SET_EBR_V_NORMAL__CHOICE (1u)
#define MCU_233_EHB_13_BH_EHB_P_SET_EBR_V_FAULTY__CHOICE (2u)
#define MCU_233_EHB_13_BH_EHB_P_SET_EBR_V_HANDOVE_CHOICE (3u)

#define MCU_233_EHB_13_BH_EHB_HBC_REQUEST_NO_REQUEST__CHOICE (0u)
#define MCU_233_EHB_13_BH_EHB_HBC_REQUEST_REQUEST_CHOICE (1u)

#define MCU_233_ESC_101H_ESC_RR_WHL_SPD_DIR_STANDSTILL_CHOICE (0u)
#define MCU_233_ESC_101H_ESC_RR_WHL_SPD_DIR_FORWARD_CHOICE (1u)
#define MCU_233_ESC_101H_ESC_RR_WHL_SPD_DIR_BACKWARD_CHOICE (2u)
#define MCU_233_ESC_101H_ESC_RR_WHL_SPD_DIR_INVALID_CHOICE (3u)

#define MCU_233_ESC_101H_ESC_RL_WHL_SPD_DIR_STANDSTILL_CHOICE (0u)
#define MCU_233_ESC_101H_ESC_RL_WHL_SPD_DIR_FORWARD_CHOICE (1u)
#define MCU_233_ESC_101H_ESC_RL_WHL_SPD_DIR_BACKWARD_CHOICE (2u)
#define MCU_233_ESC_101H_ESC_RL_WHL_SPD_DIR_INVALID_CHOICE (3u)

#define MCU_233_ESC_101H_ESC_FR_WHL_SPD_DIR_STANDSTILL_CHOICE (0u)
#define MCU_233_ESC_101H_ESC_FR_WHL_SPD_DIR_FORWARD_CHOICE (1u)
#define MCU_233_ESC_101H_ESC_FR_WHL_SPD_DIR_BACKWARD_CHOICE (2u)
#define MCU_233_ESC_101H_ESC_FR_WHL_SPD_DIR_INVALID_CHOICE (3u)

#define MCU_233_ESC_101H_ESC_FL_WHL_SPD_DIR_STANDSTILL_CHOICE (0u)
#define MCU_233_ESC_101H_ESC_FL_WHL_SPD_DIR_FORWARD_CHOICE (1u)
#define MCU_233_ESC_101H_ESC_FL_WHL_SPD_DIR_BACKWARD_CHOICE (2u)
#define MCU_233_ESC_101H_ESC_FL_WHL_SPD_DIR_INVALID_CHOICE (3u)

#define MCU_233_ESC_101H_WSS_RR_COUNTS_SUM_VALID_INVALID_CHOICE (0u)
#define MCU_233_ESC_101H_WSS_RR_COUNTS_SUM_VALID_VALID_CHOICE (1u)

#define MCU_233_ESC_101H_WSS_RL_COUNTS_SUM_VALID_INVALID_CHOICE (0u)
#define MCU_233_ESC_101H_WSS_RL_COUNTS_SUM_VALID_VALID_CHOICE (1u)

#define MCU_233_ESC_101H_WSS_FR_COUNTS_SUM_VALID_INVALID_CHOICE (0u)
#define MCU_233_ESC_101H_WSS_FR_COUNTS_SUM_VALID_VALID_CHOICE (1u)

#define MCU_233_ESC_101H_WSS_FL_COUNTS_SUM_VALID_INVALID_CHOICE (0u)
#define MCU_233_ESC_101H_WSS_FL_COUNTS_SUM_VALID_VALID_CHOICE (1u)

#define MCU_233_ESC_102H_ESC_RR_WHL_SPD_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_102H_ESC_RR_WHL_SPD_V_VALID_CHOICE (1u)

#define MCU_233_ESC_102H_ESC_RL_WHL_SPD_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_102H_ESC_RL_WHL_SPD_V_VALID_CHOICE (1u)

#define MCU_233_ESC_102H_ESC_FR_WHL_SPD_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_102H_ESC_FR_WHL_SPD_V_VALID_CHOICE (1u)

#define MCU_233_ESC_102H_ESC_FL_WHL_SPD_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_102H_ESC_FL_WHL_SPD_V_VALID_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_VDC_FAIL_STS_VDC__NORMAL_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_VDC_FAIL_STS_VDC__FAULTY_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_VDC_ACTIVE_VDC__INACTIVE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_VDC_ACTIVE_VDC__ACTIVE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_TCS_FAIL_STS_TCS__NORMAL_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_TCS_FAIL_STS_TCS__FAULTY_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_TCS_ACTIVE_TCS__INACTIVE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_TCS_ACTIVE_TCS__ACTIVE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_EBD_FAIL_STS_EBD__NORMAL_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_EBD_FAIL_STS_EBD__FAULTY_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_EBD_ACTIVE_EBD__INACTIVE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_EBD_ACTIVE_EBD__ACTIVE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_ABS_FAIL_STS_ABS__NORMAL_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_ABS_FAIL_STS_ABS__FAULTY_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_ABS_ACTIVE_ABS__INACTIVE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_ABS_ACTIVE_ABS__ACTIVE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_DTC_FAIL_STS_DTC__NORMAL_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_DTC_FAIL_STS_DTC__FAULTY_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_DTC_ACTIVE_DTC__INACTIVE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_DTC_ACTIVE_DTC__ACTIVE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_HBA_FAIL_STS_HBA__NORMAL_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_HBA_FAIL_STS_HBA__FAULTY_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_HBA_ACTIVE_HBA__INACTIVE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_HBA_ACTIVE_HBA__ACTIVE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_HHC_FAIL_STS_HHC__NORMAL_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_HHC_FAIL_STS_HHC__FAULTY_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_HHC_ACTIVE_HHC__NOT_ACTIVE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_HHC_ACTIVE_HHC__ACTIVE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_STANDSTILL_FLAG_STANDSTILL_FLAG__INACTIVE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_STANDSTILL_FLAG_STANDSTILL_FLAG__ACTIVE_CHOICE (1u)
#define MCU_233_ESC_104H_ESC_STANDSTILL_FLAG___INVALID_CHOICE (2u)
#define MCU_233_ESC_104H_ESC_STANDSTILL_FLAG___RESERVED_CHOICE (3u)

#define MCU_233_ESC_104H_ESC_AVH_AVAILABLE__AVH__AVAILABLE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_AVH_AVAILABLE__AVH__NOT__AVAILABLE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_AVH_STS___OFF_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_AVH_STS___STANDBY__CHOICE (1u)
#define MCU_233_ESC_104H_ESC_AVH_STS___ACTIVE_CHOICE (2u)
#define MCU_233_ESC_104H_ESC_AVH_STS___RESERVED_CHOICE (3u)

#define MCU_233_ESC_104H_ESC_EDC_ACTIVE_EDC__INACTIVE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_EDC_ACTIVE_EDC__ACTIVE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_EDC_AVAILABLE_EDC__AVAILABLE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_EDC_AVAILABLE_EDC__NOT__AVAILABLE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_ESC_SWITCH_PUSHING___NO_PUSHING_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_ESC_SWITCH_PUSHING___PUSHING_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_ESC_SWITCH_STATUS___FUNCTION_OPEN_ON_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_ESC_SWITCH_STATUS___FUNCTION__CLOSE_OFF_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_CDP_AVAILABLE__CDP__AVAILABLE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_CDP_AVAILABLE__CDP__NOT__AVAILABLE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_CDP_ACTIVE_CDP__INACTIVE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_CDP_ACTIVE_CDP__ACTIVE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_EPB_PARK_REQ___PARKING__NOT__REQ_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_EPB_PARK_REQ___RELEASE__PARKING__ACTIVE_CHOICE (1u)
#define MCU_233_ESC_104H_ESC_EPB_PARK_REQ___APPLY__PARKING__ACTIVE__CHOICE (2u)
#define MCU_233_ESC_104H_ESC_EPB_PARK_REQ___RESERVED_CHOICE (3u)

#define MCU_233_ESC_104H_ESC_EPB_SWITCH_PUSHING___NO_PUSHING_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_EPB_SWITCH_PUSHING___PUSHING_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_ESC_DIAG_ACTIVE___INACTIVE__CHOICE (0u)
#define MCU_233_ESC_104H_ESC_ESC_DIAG_ACTIVE___ACTIVE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_DRUM_MODE_INACTIVE_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_DRUM_MODE_ACTIVE_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_BRAKE_OVER_HEAT_NOT_HIGH_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_BRAKE_OVER_HEAT_TEMP_TOO_HIGH_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_VEH_SPD_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_VEH_SPD_V_VALID_CHOICE (1u)

#define MCU_233_ESC_104H_ESC_AVH_SWITCH_PUSHING___NO_PUSHING_CHOICE (0u)
#define MCU_233_ESC_104H_ESC_AVH_SWITCH_PUSHING___PUSHING_CHOICE (1u)

#define MCU_233_ESC_109H_ESC_SLOPE_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_109H_ESC_SLOPE_V_VALID_CHOICE (1u)

#define MCU_233_ESC_109H_ESC_YAW_RATE_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_109H_ESC_YAW_RATE_V_VALID_CHOICE (1u)

#define MCU_233_ESC_109H_ESC_LONGIT_ACCE_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_109H_ESC_LONGIT_ACCE_V_VALID_CHOICE (1u)

#define MCU_233_ESC_109H_ESC_LATERAL_ACCE_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_109H_ESC_LATERAL_ACCE_V_VALID_CHOICE (1u)

#define MCU_233_ESC_125H_ESC_TORQ_REQ_RESP_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_125H_ESC_TORQ_REQ_RESP_V_VALID_CHOICE (1u)

#define MCU_233_ESC_125H_ESC_MCYLINDER_PRESSURE_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_125H_ESC_MCYLINDER_PRESSURE_V_VALID_CHOICE (1u)

#define MCU_233_ESC_125H_ESC_FAULT_LEVEL________CHOICE (0u)
#define MCU_233_ESC_125H_ESC_FAULT_LEVEL__________1_CHOICE (1u)
#define MCU_233_ESC_125H_ESC_FAULT_LEVEL__________2_CHOICE (2u)
#define MCU_233_ESC_125H_ESC_FAULT_LEVEL__________3_CHOICE (3u)

#define MCU_233_ESC_125H_ESC_HMI_WARNING_ON_NO_REQUEST_CHOICE (0u)
#define MCU_233_ESC_125H_ESC_HMI_WARNING_ON_WARNING_LAMP_LV1_CHOICE (1u)
#define MCU_233_ESC_125H_ESC_HMI_WARNING_ON_WARNING_LAMP_LV2_CHOICE (2u)

#define MCU_233_ESC_125H_ESC_DOUBLE_FLA_LAMP_ON_NO_REQUEST_TO_THE_DOUBLE_FLA_LIGHT_CHOICE (0u)
#define MCU_233_ESC_125H_ESC_DOUBLE_FLA_LAMP_ON_DOUBLE_FLA_LIGHT_REQUESTED_CHOICE (1u)

#define MCU_233_ESC_125H_ESC_BLA_LAMP_ON_NO_REQUEST_TO_THE_BRAKE_LIGHT_CHOICE (0u)
#define MCU_233_ESC_125H_ESC_BLA_LAMP_ON_BRAKE_LIGHT_REQUESTED_CHOICE (1u)

#define MCU_233_ESC_125H_AVH_FUN_LAMP_ON__AVH_W_L_OFF___STANDBY__NORMAL__CHOICE (0u)
#define MCU_233_ESC_125H_AVH_FUN_LAMP_ON__AVH__FAILURE___LAMP__YELLOW__CHOICE (1u)
#define MCU_233_ESC_125H_AVH_FUN_LAMP_ON__AVH__ACTIVE___LAMP__GREEN__CHOICE (2u)
#define MCU_233_ESC_125H_AVH_FUN_LAMP_ON__AVH__READY___LAMP__WHITE__CHOICE (3u)

#define MCU_233_ESC_125H_ESC_FUN_LAMP_ON__ESC_W_L_OFF___STANDBY__NORMAL__CHOICE (0u)
#define MCU_233_ESC_125H_ESC_FUN_LAMP_ON__ESC_W_L__FLASH___ACTIVE__CHOICE (1u)

#define MCU_233_ESC_125H_ESC_OFF_LAMP_ON___LAMP_OFF__ESC_ON__CHOICE (0u)
#define MCU_233_ESC_125H_ESC_OFF_LAMP_ON___LAMP_ON__ESC_OFF__CHOICE (1u)

#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE________CHOICE (0u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE____________CHOICE (1u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE____________________2_CHOICE (2u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE____________________3_CHOICE (3u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE____________________4_CHOICE (4u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE____________________5_CHOICE (5u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE________________CHOICE (6u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE_______________________________CHOICE (7u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE_ECU_______________CHOICE (8u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE_ECU_______________________CHOICE (9u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE______________10_CHOICE (10u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE______________11_CHOICE (11u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE_ESC_____________CHOICE (12u)
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE___RESERVED_CHOICE (15u)

#define MCU_233_ESC_126H_TPMS_RR_WARNING_NORMAL_CHOICE (0u)
#define MCU_233_ESC_126H_TPMS_RR_WARNING_WARNING_CHOICE (1u)

#define MCU_233_ESC_126H_TPMS_RL_WARNING_NORMAL_CHOICE (0u)
#define MCU_233_ESC_126H_TPMS_RL_WARNING_WARNING_CHOICE (1u)

#define MCU_233_ESC_126H_TPMS_FR_WARNING_NORMAL_CHOICE (0u)
#define MCU_233_ESC_126H_TPMS_FR_WARNING_WARNING_CHOICE (1u)

#define MCU_233_ESC_126H_TPMS_FL_WARNING_NORMAL_CHOICE (0u)
#define MCU_233_ESC_126H_TPMS_FL_WARNING_WARNING_CHOICE (1u)

#define MCU_233_ESC_126H_TPMS_PRE_WARNING_ON_NO_REQUEST_CHOICE (0u)
#define MCU_233_ESC_126H_TPMS_PRE_WARNING_ON_REQUEST_____________CHOICE (1u)

#define MCU_233_ESC_126H_TPMS_STATUS___________SYSTEM_OK_CHOICE (0u)
#define MCU_233_ESC_126H_TPMS_STATUS___________POWER_UP_CHOICE (1u)
#define MCU_233_ESC_126H_TPMS_STATUS___________SELF_CHECKING_CHOICE (2u)
#define MCU_233_ESC_126H_TPMS_STATUS___________PRESSURE_WARNING_CHOICE (3u)
#define MCU_233_ESC_126H_TPMS_STATUS___________SYSTEM__MALFUNCTION_CHOICE (4u)
#define MCU_233_ESC_126H_TPMS_STATUS______CHOICE (5u)

#define MCU_233_ESC_126H_TPMS_DG_PRE_WARNING_TEXT______________________________CHOICE (0u)
#define MCU_233_ESC_126H_TPMS_DG_PRE_WARNING_TEXT______________________CHOICE (1u)
#define MCU_233_ESC_126H_TPMS_DG_PRE_WARNING_TEXT________________________________________CHOICE (2u)

#define MCU_233_ESC_126H_TPMS_MALFUNCTION_LAMP_ON_NO_REQUEST_CHOICE (0u)
#define MCU_233_ESC_126H_TPMS_MALFUNCTION_LAMP_ON_REQUEST_LV1_____1_CHOICE (1u)
#define MCU_233_ESC_126H_TPMS_MALFUNCTION_LAMP_ON_REQUEST_LV1_____2_CHOICE (2u)
#define MCU_233_ESC_126H_TPMS_MALFUNCTION_LAMP_ON_RESERVED_CHOICE (3u)

#define MCU_233_ESC_126H_TPMS_RESET_PROGRESS_________________CHOICE (0u)
#define MCU_233_ESC_126H_TPMS_RESET_PROGRESS________________CHOICE (1u)
#define MCU_233_ESC_126H_TPMS_RESET_PROGRESS__________________CHOICE (2u)
#define MCU_233_ESC_126H_TPMS_RESET_PROGRESS______________________________________CHOICE (3u)

#define MCU_233_ESC_126H_TPMS_PRE_WARNING_TEXT____________CHOICE (0u)
#define MCU_233_ESC_126H_TPMS_PRE_WARNING_TEXT___________________________1_CHOICE (1u)
#define MCU_233_ESC_126H_TPMS_PRE_WARNING_TEXT___________________________2_CHOICE (2u)
#define MCU_233_ESC_126H_TPMS_PRE_WARNING_TEXT___________________________4_CHOICE (4u)
#define MCU_233_ESC_126H_TPMS_PRE_WARNING_TEXT___________________________8_CHOICE (8u)
#define MCU_233_ESC_126H_TPMS_PRE_WARNING_TEXT_________________________CHOICE (9u)
#define MCU_233_ESC_126H_TPMS_PRE_WARNING_TEXT____________________________________APP_______CHOICE (15u)

#define MCU_233_ESC_126H_TPMS_FAULT_MESSAGE_____________EEPROM_________CHOICE (0u)
#define MCU_233_ESC_126H_TPMS_FAULT_MESSAGE__________________________1_CHOICE (1u)
#define MCU_233_ESC_126H_TPMS_FAULT_MESSAGE______________________CHOICE (2u)
#define MCU_233_ESC_126H_TPMS_FAULT_MESSAGE__________________________3_CHOICE (3u)
#define MCU_233_ESC_126H_TPMS_FAULT_MESSAGE____________________________CHOICE (4u)
#define MCU_233_ESC_126H_TPMS_FAULT_MESSAGE__________________________5_CHOICE (5u)
#define MCU_233_ESC_126H_TPMS_FAULT_MESSAGE___RESERVED_CHOICE (15u)

#define MCU_233_ESC_108H_ESC_EPB_MST_HOST_AVAILABILITY_EPB_MST_AVAILABILITY_NONE_CHOICE (0u)
#define MCU_233_ESC_108H_ESC_EPB_MST_HOST_AVAILABILITY_EPB_MST_AVAILABILITY_APPLY_CHOICE (1u)
#define MCU_233_ESC_108H_ESC_EPB_MST_HOST_AVAILABILITY_EPB_MST_AVAILABILITY_RELEASE_CHOICE (2u)
#define MCU_233_ESC_108H_ESC_EPB_MST_HOST_AVAILABILITY_EPB_MST_AVAILABILITY_APPLY_AND_RELEASE_CHOICE (3u)

#define MCU_233_ESC_108H_ESC_EPB_MST_ACTUATOR_STATUS_EPB_MST_RELEASED_CHOICE (0u)
#define MCU_233_ESC_108H_ESC_EPB_MST_ACTUATOR_STATUS_EPB_MST_RELEASING_CHOICE (1u)
#define MCU_233_ESC_108H_ESC_EPB_MST_ACTUATOR_STATUS_EPB_MST_LOCKED_CHOICE (2u)
#define MCU_233_ESC_108H_ESC_EPB_MST_ACTUATOR_STATUS_EPB_MST_LOCKING_CHOICE (3u)
#define MCU_233_ESC_108H_ESC_EPB_MST_ACTUATOR_STATUS_EPB_MST_RWU_________CHOICE (4u)
#define MCU_233_ESC_108H_ESC_EPB_MST_ACTUATOR_STATUS_EPB_MST____________________CHOICE (5u)
#define MCU_233_ESC_108H_ESC_EPB_MST_ACTUATOR_STATUS_ERROR_CHOICE (6u)
#define MCU_233_ESC_108H_ESC_EPB_MST_ACTUATOR_STATUS_EPB_MST_COMPLETELY_RELEASED_CHOICE (7u)
#define MCU_233_ESC_108H_ESC_EPB_MST_ACTUATOR_STATUS_RESERVED_CHOICE (15u)

#define MCU_233_ESC_108H_ESC_EPB_MST_CLAMP_FORCE_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_108H_ESC_EPB_MST_CLAMP_FORCE_V_VALID_CHOICE (1u)

#define MCU_233_ESC_108H_ESC_EPB_MST_REPAIR_ACTIVE_EPB_MST_REPAIR_INACTIVE_CHOICE (0u)
#define MCU_233_ESC_108H_ESC_EPB_MST_REPAIR_ACTIVE_EPB_MST_REPAIR_ACTIVE_CHOICE (1u)

#define MCU_233_ESC_108H_ESC_EPB_MST_ROLLERBENCH_ACTIVE_EPB_MST_ROLLERBENCH_INACTIVE_CHOICE (0u)
#define MCU_233_ESC_108H_ESC_EPB_MST_ROLLERBENCH_ACTIVE_EPB_MST_ROLLERBENCH_ACTIVE_CHOICE (1u)

#define MCU_233_ESC_108H_ESC_EPB_MST_REQ_EPB_MST_SLV_REQUEST_NONE_CHOICE (0u)
#define MCU_233_ESC_108H_ESC_EPB_MST_REQ_EPB_MST_SLV_REQUEST_PARK_APPLY_CHOICE (1u)
#define MCU_233_ESC_108H_ESC_EPB_MST_REQ_EPB_MST_SLV_REQUEST_RELEASE_CHOICE (2u)
#define MCU_233_ESC_108H_ESC_EPB_MST_REQ_EPB_MST_SLV_REQUEST_DYNAMIC_APPLY_CHOICE (3u)
#define MCU_233_ESC_108H_ESC_EPB_MST_REQ_EPB_MST_SLV_REQUEST_ROLLERBENCH_APPLY_CHOICE (4u)
#define MCU_233_ESC_108H_ESC_EPB_MST_REQ_RESERVED_CHOICE (15u)

#define MCU_233_ESC_108H_ESC_TOTAL_BRK_PRES_REQ_V_INVALID_CHOICE (0u)
#define MCU_233_ESC_108H_ESC_TOTAL_BRK_PRES_REQ_V_VALID_CHOICE (1u)

#define MCU_233_ESC_108H_ESC_HBC_ACTIVE_HBC__INACTIVE_CHOICE (0u)
#define MCU_233_ESC_108H_ESC_HBC_ACTIVE_HBC__ACTIVE_CHOICE (1u)
#define MCU_233_ESC_108H_ESC_HBC_ACTIVE_HBC__REDUCED__ACTIVE_CHOICE (2u)

#define MCU_233_ESC_108H_ESC_HBC_AVAILABLE_HBC__AVAILABLE_CHOICE (0u)
#define MCU_233_ESC_108H_ESC_HBC_AVAILABLE_HBC__NOT__AVAILABLE_CHOICE (1u)

#define MCU_233_ESC_10_CH_EPB_CDP_DEC_RQ_STS_NOT_REQUEST_CHOICE (0u)
#define MCU_233_ESC_10_CH_EPB_CDP_DEC_RQ_STS_REQUEST__ESC________________________ESC_CDP_____________CHOICE (1u)

#define MCU_233_ESC_10_CH_EPB_CONTROL_MODE______________________________________________CHOICE (0u)
#define MCU_233_ESC_10_CH_EPB_CONTROL_MODE______________1_CHOICE (1u)
#define MCU_233_ESC_10_CH_EPB_CONTROL_MODE______________2_CHOICE (2u)
#define MCU_233_ESC_10_CH_EPB_CONTROL_MODE______________4_CHOICE (4u)
#define MCU_233_ESC_10_CH_EPB_CONTROL_MODE________________________CHOICE (5u)

#define MCU_233_ESC_10_CH_EPB_STATUS_RELEASED_CHOICE (0u)
#define MCU_233_ESC_10_CH_EPB_STATUS_RELEASING_CHOICE (1u)
#define MCU_233_ESC_10_CH_EPB_STATUS_LOCKED_CHOICE (2u)
#define MCU_233_ESC_10_CH_EPB_STATUS_LOCKING_CHOICE (3u)
#define MCU_233_ESC_10_CH_EPB_STATUS_EPB_RWU_________CHOICE (4u)
#define MCU_233_ESC_10_CH_EPB_STATUS_EPB___________________CHOICE (5u)
#define MCU_233_ESC_10_CH_EPB_STATUS_ERROR_CHOICE (6u)
#define MCU_233_ESC_10_CH_EPB_STATUS_RESERVED_CHOICE (15u)

#define MCU_233_ESC_10_CH_ESC_EPB_MST_STATE_AVAILABLE___AVAILABLE__ESC_MST_EPB_________CHOICE (0u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_STATE_AVAILABLE___NOT__AVAILABLE__ESC_MST_EPB___________CHOICE (1u)

#define MCU_233_ESC_10_CH_EPB_RELEASE_WITHOUT_BRAKE________________________CHOICE (0u)
#define MCU_233_ESC_10_CH_EPB_RELEASE_WITHOUT_BRAKE______________________CHOICE (1u)

#define MCU_233_ESC_10_CH_EPB_RELEASE_WITHOUT_DRV_SEAT_BELT__________________________CHOICE (0u)
#define MCU_233_ESC_10_CH_EPB_RELEASE_WITHOUT_DRV_SEAT_BELT________________________CHOICE (1u)

#define MCU_233_ESC_10_CH_EPB_RELEASE_WITHOUT_DRIVER_DOOR________________________CHOICE (0u)
#define MCU_233_ESC_10_CH_EPB_RELEASE_WITHOUT_DRIVER_DOOR______________________CHOICE (1u)

#define MCU_233_ESC_10_CH_EPB_HIGH_TEM_CLAMP_WK_STS________CHOICE (0u)
#define MCU_233_ESC_10_CH_EPB_HIGH_TEM_CLAMP_WK_STS______CHOICE (1u)

#define MCU_233_ESC_10_CH_EPB_SLIP_SLOPE_CLAMP_WK_STS________CHOICE (0u)
#define MCU_233_ESC_10_CH_EPB_SLIP_SLOPE_CLAMP_WK_STS______CHOICE (1u)

#define MCU_233_ESC_10_CH_EPB_TOW_MODE_WK_STS________CHOICE (0u)
#define MCU_233_ESC_10_CH_EPB_TOW_MODE_WK_STS________________________________________________CHOICE (1u)

#define MCU_233_ESC_10_CH_EPB_WARNING_LAMP_ON_OFF_CHOICE (0u)
#define MCU_233_ESC_10_CH_EPB_WARNING_LAMP_ON_ON_CHOICE (1u)
#define MCU_233_ESC_10_CH_EPB_WARNING_LAMP_ON_BLINKING___________________________1___________________2______________CHOICE (2u)

#define MCU_233_ESC_10_CH_EPB_PARK_LAMP_ON_OFF_CHOICE (0u)
#define MCU_233_ESC_10_CH_EPB_PARK_LAMP_ON_ON_CHOICE (1u)
#define MCU_233_ESC_10_CH_EPB_PARK_LAMP_ON_BLINKING___________________________1___________2___________3___________4___________5______________CHOICE (2u)

#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE________________________CHOICE (0u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE________________1_CHOICE (1u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE______________________________2_CHOICE (2u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE____________________3_CHOICE (3u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE____________________4_CHOICE (4u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE____________________________5_CHOICE (5u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE_PBC_________CHOICE (6u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE________________7_CHOICE (7u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE______________8_CHOICE (8u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE_EPB_____________9_CHOICE (9u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE_EPB_______________________CHOICE (10u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE____________________________11_CHOICE (11u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE__________________CHOICE (12u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE_EPB_____________14_CHOICE (14u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE_EPB_______________________________CHOICE (15u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE______________________________16_CHOICE (16u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE_ECU_______________________CHOICE (17u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE_PBC_____________CHOICE (18u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE______________19_CHOICE (19u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE_EPB_____________20_CHOICE (20u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE_RESERVED_CHOICE (63u)

#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAIL_LEVEL________CHOICE (0u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAIL_LEVEL__________1_CHOICE (1u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAIL_LEVEL__________2_CHOICE (2u)
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAIL_LEVEL__________3_CHOICE (3u)

#define MCU_233_ADAS_CAM_107H_CAMERA_DEGREE_REQ_VALID___INVALID_CHOICE (0u)
#define MCU_233_ADAS_CAM_107H_CAMERA_DEGREE_REQ_VALID___VALID_CHOICE (1u)

#define MCU_233_ADAS_CAM_107H_CAMERA_TORQUE_REQ_VALID___INVALID_0__CHOICE (0u)
#define MCU_233_ADAS_CAM_107H_CAMERA_TORQUE_REQ_VALID___VALID_1__CHOICE (1u)

#define MCU_233_ADAS_CAM_107H_CAMERA_SYS_STATUS_TO_EPS__OFF_ACU________________________CHOICE (0u)
#define MCU_233_ADAS_CAM_107H_CAMERA_SYS_STATUS_TO_EPS___READY_ACU__________________________________CHOICE (1u)
#define MCU_233_ADAS_CAM_107H_CAMERA_SYS_STATUS_TO_EPS___MODE1__ACTIVE_ACU____1_______ACU__EPS____________________CHOICE (2u)
#define MCU_233_ADAS_CAM_107H_CAMERA_SYS_STATUS_TO_EPS___MODE2__ACTIVE_ACU____2_______ACU__EPS______________________CHOICE (3u)
#define MCU_233_ADAS_CAM_107H_CAMERA_SYS_STATUS_TO_EPS___ERROR____________ACU________CHOICE (4u)

#define MCU_233_ADAS_CAM_10_AH_CAMERA_E_LKA_WORKING___NOT__WORKING____________________CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_E_LKA_WORKING___WORKING_CHOICE (1u)

#define MCU_233_ADAS_CAM_10_AH_CAMERA_LDW_STATUS__OFF_CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_LDW_STATUS___ON_CHOICE (1u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_LDW_STATUS___ERROR_CHOICE (2u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_LDW_STATUS___RESERVED_CHOICE (3u)

#define MCU_233_ADAS_CAM_10_AH_CAMERA_BLOCKAGE_STS_CAMERA__NOT__BLOCKED_CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_BLOCKAGE_STS_CAMEA__BLOCKED_CHOICE (1u)

#define MCU_233_ADAS_CAM_10_AH_CAMERA_FAULT___NORMAL_CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_FAULT___ERROR_CHOICE (1u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_FAULT_RESERVED_CHOICE (3u)

#define MCU_233_ADAS_CAM_10_AH_CAMERA_CALIBRATED_STATUS___NORMAL_CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_CALIBRATED_STATUS___NO__CALIBRATED_CHOICE (1u)

#define MCU_233_ADAS_CAM_10_AH_CAMERA_R_LANE_STATUS___NO__LANE_DETECTED____ELK___________CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_R_LANE_STATUS___LANE_DETECTED_CHOICE (1u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_R_LANE_STATUS___LANE_WARNING_VISION_CHOICE (2u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_R_LANE_STATUS___LANE_WARNING_VISION__VOICE_CHOICE (3u)

#define MCU_233_ADAS_CAM_10_AH_CAMERA_L_LANE_STATUS___NO__LANE_DETECTED_CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_L_LANE_STATUS___LANE_DETECTED_CHOICE (1u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_L_LANE_STATUS___LANE_WARNING_VISION_CHOICE (2u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_L_LANE_STATUS___LANE_WARNING_VISION__VOICE_CHOICE (3u)

#define MCU_233_ADAS_CAM_10_AH_CAMERA_E_LKA_STATUS__OFF_CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_E_LKA_STATUS___ON_CHOICE (1u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_E_LKA_STATUS___ERROR_CHOICE (2u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_E_LKA_STATUS___RESERVED_CHOICE (3u)

#define MCU_233_ADAS_CAM_10_AH_ISA_OVER_SPEED_WARNING_LEVEL_NO__WARNING_CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_ISA_OVER_SPEED_WARNING_LEVEL_WARNING__LEVEL1___________CHOICE (1u)
#define MCU_233_ADAS_CAM_10_AH_ISA_OVER_SPEED_WARNING_LEVEL_WARNING__LEVEL2____________________CHOICE (2u)
#define MCU_233_ADAS_CAM_10_AH_ISA_OVER_SPEED_WARNING_LEVEL_RESERVED_CHOICE (3u)

#define MCU_233_ADAS_CAM_10_AH_ISA_STS_ISA_OFF_CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_ISA_STS_ISA_ON_CHOICE (1u)
#define MCU_233_ADAS_CAM_10_AH_ISA_STS_ISA__ERROR_CHOICE (2u)
#define MCU_233_ADAS_CAM_10_AH_ISA_STS_RESERVE_CHOICE (3u)

#define MCU_233_ADAS_CAM_10_AH_CAMERA_HAND_OFF_WARNING___NORMAL___________________________CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_HAND_OFF_WARNING___WARNING__LEVEL_1_CHOICE (1u)

#define MCU_233_ADAS_CAM_10_AH_CAMERA_E_LKA_WARNING___NOT__WARNING_CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_CAMERA_E_LKA_WARNING___WARNING_CHOICE (1u)

#define MCU_233_ADAS_CAM_10_AH_SLIF_LIMIT_VALUE_CHANGE_TYPE___NO__REQUEST_CHOICE (0u)
#define MCU_233_ADAS_CAM_10_AH_SLIF_LIMIT_VALUE_CHANGE_TYPE___LOUDNESS1_CHOICE (1u)
#define MCU_233_ADAS_CAM_10_AH_SLIF_LIMIT_VALUE_CHANGE_TYPE___LOUDNESS2_CHOICE (2u)
#define MCU_233_ADAS_CAM_10_AH_SLIF_LIMIT_VALUE_CHANGE_TYPE___MUTE______________ADAS_______CHOICE (3u)

#define MCU_233_ADAS_CAM_118H_AEB_AEB_ACTIVE___NO_ACTIVE___________________________CHOICE (0u)
#define MCU_233_ADAS_CAM_118H_AEB_AEB_ACTIVE___ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_CAM_118H_AEB_EBA_ACTIVE___NO_ACTIVE___________________________CHOICE (0u)
#define MCU_233_ADAS_CAM_118H_AEB_EBA_ACTIVE___ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_CAM_118H_AEB_AWB_ACTIVE___NO_ACTIVE_CHOICE (0u)
#define MCU_233_ADAS_CAM_118H_AEB_AWB_ACTIVE___ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_CAM_118H_AEB_PRE_FILL_ACTIVE___NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ADAS_CAM_118H_AEB_PRE_FILL_ACTIVE___ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_CAM_118H_ACC_ENG_TRQ_REQ_ACTIVE___NO_REQUEST_CHOICE (0u)
#define MCU_233_ADAS_CAM_118H_ACC_ENG_TRQ_REQ_ACTIVE___REQUEST_CHOICE (1u)

#define MCU_233_ADAS_CAM_118H_ACC_DECEL_REQ___NO_REQUEST_CHOICE (0u)
#define MCU_233_ADAS_CAM_118H_ACC_DECEL_REQ___REQUEST_CHOICE (1u)

#define MCU_233_ADAS_CAM_118H_AEB_VEH_HLD_REQ___NO__REQUEST_CHOICE (0u)
#define MCU_233_ADAS_CAM_118H_AEB_VEH_HLD_REQ___REQUEST_CHOICE (1u)

#define MCU_233_ADAS_CAM_118H_AEB_AWB_LEVEL___NO_LEVEL_CHOICE (0u)
#define MCU_233_ADAS_CAM_118H_AEB_AWB_LEVEL__LEVEL_1_CHOICE (1u)
#define MCU_233_ADAS_CAM_118H_AEB_AWB_LEVEL__LEVEL_2_CHOICE (2u)
#define MCU_233_ADAS_CAM_118H_AEB_AWB_LEVEL__LEVEL_3_CHOICE (3u)
#define MCU_233_ADAS_CAM_118H_AEB_AWB_LEVEL__LEVEL_4_CHOICE (4u)

#define MCU_233_ADAS_CAM_118H_AEB_AEB_FAILURE___NO__FAILURE_CHOICE (0u)
#define MCU_233_ADAS_CAM_118H_AEB_AEB_FAILURE___FAILURE_CHOICE (1u)

#define MCU_233_ADAS_CAM_140H_ACC_TAKE_OVER_REQ___NO__TAKEOVER_REQUEST_CHOICE (0u)
#define MCU_233_ADAS_CAM_140H_ACC_TAKE_OVER_REQ___VALID__TAKEOVER_REQUEST__CHOICE (1u)

#define MCU_233_ADAS_CAM_140H_ACC_MOD_STS__OFF_MODE_CHOICE (0u)
#define MCU_233_ADAS_CAM_140H_ACC_MOD_STS___PASSIVE_MODE__REJECT___CHOICE (1u)
#define MCU_233_ADAS_CAM_140H_ACC_MOD_STS___PASSIVE_MODE__STAND_BY___CHOICE (2u)
#define MCU_233_ADAS_CAM_140H_ACC_MOD_STS___ACTIVE__CONTROL_MODE_CHOICE (3u)
#define MCU_233_ADAS_CAM_140H_ACC_MOD_STS___BRAKE_ONLY_MODE_CHOICE (4u)
#define MCU_233_ADAS_CAM_140H_ACC_MOD_STS___OVERRIDE_CHOICE (5u)
#define MCU_233_ADAS_CAM_140H_ACC_MOD_STS___STANDSTILL__CHOICE (6u)
#define MCU_233_ADAS_CAM_140H_ACC_MOD_STS___FAILURE_MODE_CHOICE (7u)

#define MCU_233_ADAS_CAM_140H_AEB_AEB_STS__AEB_OFF_CHOICE (0u)
#define MCU_233_ADAS_CAM_140H_AEB_AEB_STS__AEB_ON_CHOICE (1u)
#define MCU_233_ADAS_CAM_140H_AEB_AEB_STS_AEB__FAILURE_CHOICE (2u)
#define MCU_233_ADAS_CAM_140H_AEB_AEB_STS_RESERVED_CHOICE (3u)

#define MCU_233_ADAS_CAM_140H_AEB_PRE_WARNING_ACTIVE___NOT__ACTIVE_________________CHOICE (0u)
#define MCU_233_ADAS_CAM_140H_AEB_PRE_WARNING_ACTIVE___ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_CAM_140H_AEB_LATENT_WARNING_ACTIVE___NOT__ACTIVE_________________CHOICE (0u)
#define MCU_233_ADAS_CAM_140H_AEB_LATENT_WARNING_ACTIVE___ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_CAM_140H_ACC_OBJ_VALID___INVALID_CHOICE (0u)
#define MCU_233_ADAS_CAM_140H_ACC_OBJ_VALID___VALID__CHOICE (1u)

#define MCU_233_ADAS_CAM_140H_ACC_TAR_OBJ_BAR_DIS___NO_DISPLAY_CHOICE (0u)
#define MCU_233_ADAS_CAM_140H_ACC_TAR_OBJ_BAR_DIS___DISTANCE_1_ONE_BAR__CHOICE (1u)
#define MCU_233_ADAS_CAM_140H_ACC_TAR_OBJ_BAR_DIS___DISTANCE_2_TWO_BAR_CHOICE (2u)
#define MCU_233_ADAS_CAM_140H_ACC_TAR_OBJ_BAR_DIS___DISTANCE_3_THREE_BAR_CHOICE (3u)
#define MCU_233_ADAS_CAM_140H_ACC_TAR_OBJ_BAR_DIS___DISTANCE_4__FOUR_BAR__CHOICE (4u)

#define MCU_233_ADAS_CAM_140H_ACC_EGO_TARGET_TYPE_INVALID_CHOICE (0u)
#define MCU_233_ADAS_CAM_140H_ACC_EGO_TARGET_TYPE_SMALL__VEHICLE_CHOICE (1u)
#define MCU_233_ADAS_CAM_140H_ACC_EGO_TARGET_TYPE_MEDIUM__VEHICLE_CHOICE (2u)
#define MCU_233_ADAS_CAM_140H_ACC_EGO_TARGET_TYPE_LARGE__VEHICLE_CHOICE (3u)
#define MCU_233_ADAS_CAM_140H_ACC_EGO_TARGET_TYPE_PEDESTRAIN_CHOICE (4u)
#define MCU_233_ADAS_CAM_140H_ACC_EGO_TARGET_TYPE_HUMAN__RIDER_CHOICE (5u)
#define MCU_233_ADAS_CAM_140H_ACC_EGO_TARGET_TYPE_RESERVED_CHOICE (7u)

#define MCU_233_ADAS_CAM_140H_ACC_TEXT_IN_FO_NO__IN_FO_CHOICE (0u)
#define MCU_233_ADAS_CAM_140H_ACC_TEXT_IN_FO_ACC__ACTIVATE__FAILED_________________________CHOICE (1u)

#define MCU_233_ADAS_CAM_140H_ACC_TIM_GAP_SET___NO_DISPLAY_CHOICE (0u)
#define MCU_233_ADAS_CAM_140H_ACC_TIM_GAP_SET___BAR_1_CHOICE (1u)
#define MCU_233_ADAS_CAM_140H_ACC_TIM_GAP_SET___BAR_2_CHOICE (2u)
#define MCU_233_ADAS_CAM_140H_ACC_TIM_GAP_SET___BAR_3_CHOICE (3u)
#define MCU_233_ADAS_CAM_140H_ACC_TIM_GAP_SET___BAR_4_CHOICE (4u)

#define MCU_233_ADAS_CAM_318H_ADAS_ELK_SWITCH_FB_OFF_CHOICE (0u)
#define MCU_233_ADAS_CAM_318H_ADAS_ELK_SWITCH_FB_ON_CHOICE (1u)

#define MCU_233_ADAS_CAM_318H_ADAS_LDW_ALARM_SENSITIVITY_FB___RESERVED_CHOICE (0u)
#define MCU_233_ADAS_CAM_318H_ADAS_LDW_ALARM_SENSITIVITY_FB___LOW_CHOICE (1u)
#define MCU_233_ADAS_CAM_318H_ADAS_LDW_ALARM_SENSITIVITY_FB___MID_CHOICE (2u)
#define MCU_233_ADAS_CAM_318H_ADAS_LDW_ALARM_SENSITIVITY_FB___HIGH_CHOICE (3u)

#define MCU_233_ADAS_CAM_318H_ADAS_LDW_ALARM_METHOD_FB___DISPLAY_CHOICE (0u)
#define MCU_233_ADAS_CAM_318H_ADAS_LDW_ALARM_METHOD_FB___DISPLAY__SOUND_CHOICE (1u)

#define MCU_233_ADAS_CAM_318H_ADAS_LDW_SWITCH_FB_OFF_CHOICE (0u)
#define MCU_233_ADAS_CAM_318H_ADAS_LDW_SWITCH_FB_ON_CHOICE (1u)

#define MCU_233_ADAS_CAM_318H_ADAS_FCW_AEB_ALARM_SENSITIVITY_FB___RESERVED_CHOICE (0u)
#define MCU_233_ADAS_CAM_318H_ADAS_FCW_AEB_ALARM_SENSITIVITY_FB___LOW_CHOICE (1u)
#define MCU_233_ADAS_CAM_318H_ADAS_FCW_AEB_ALARM_SENSITIVITY_FB___MID_CHOICE (2u)
#define MCU_233_ADAS_CAM_318H_ADAS_FCW_AEB_ALARM_SENSITIVITY_FB___HIGH_CHOICE (3u)

#define MCU_233_ADAS_CAM_318H_ADAS_FCW_AEB_SWITCH_FB_OFF_CHOICE (0u)
#define MCU_233_ADAS_CAM_318H_ADAS_FCW_AEB_SWITCH_FB_ON_CHOICE (1u)

#define MCU_233_ADAS_CAM_318H_ADAS_SLWF_ALARM_METHOD_SET_DISPLAY_CHOICE (0u)
#define MCU_233_ADAS_CAM_318H_ADAS_SLWF_ALARM_METHOD_SET_DISPLAY__SOUND_CHOICE (1u)

#define MCU_233_ADAS_CAM_318H_ADAS_SLWF_SWITCH_FB_OFF_CHOICE (0u)
#define MCU_233_ADAS_CAM_318H_ADAS_SLWF_SWITCH_FB_ON_CHOICE (1u)

#define MCU_233_ADAS_CAM_318H_ADAS_SLIF_REMINDER_METHOD_FB___RESERVED_CHOICE (0u)
#define MCU_233_ADAS_CAM_318H_ADAS_SLIF_REMINDER_METHOD_FB___LOUDNESS1_CHOICE (1u)
#define MCU_233_ADAS_CAM_318H_ADAS_SLIF_REMINDER_METHOD_FB___LOUDNESS2_CHOICE (2u)
#define MCU_233_ADAS_CAM_318H_ADAS_SLIF_REMINDER_METHOD_FB___MUTE_CHOICE (3u)

#define MCU_233_ADAS_CAM_318H_ADAS_SLIF_SWITCH_FB_OFF_CHOICE (0u)
#define MCU_233_ADAS_CAM_318H_ADAS_SLIF_SWITCH_FB_ON_CHOICE (1u)

#define MCU_233_ADAS_CAM_318H_ADAS_ELK_ALARM_METHOD_FB___DISPLAY_CHOICE (0u)
#define MCU_233_ADAS_CAM_318H_ADAS_ELK_ALARM_METHOD_FB___DISPLAY__SOUND_CHOICE (1u)

#define MCU_233_ADAS_RAD_070H_ARS_MOIS_STATE___FUNCTION__CLOSE_CHOICE (0u)
#define MCU_233_ADAS_RAD_070H_ARS_MOIS_STATE___FUNCTION_ON_CHOICE (1u)
#define MCU_233_ADAS_RAD_070H_ARS_MOIS_STATE___INIT_CHOICE (2u)
#define MCU_233_ADAS_RAD_070H_ARS_MOIS_STATE___FAILURE_CHOICE (3u)

#define MCU_233_ADAS_RAD_070H_ARS_MOIS_WARNING___NO__ALARM_CHOICE (0u)
#define MCU_233_ADAS_RAD_070H_ARS_MOIS_WARNING___ALARM__LEVEL_1_________________CHOICE (1u)
#define MCU_233_ADAS_RAD_070H_ARS_MOIS_WARNING_ALARM__LEVEL_2_VISION_________________CHOICE (2u)
#define MCU_233_ADAS_RAD_070H_ARS_MOIS_WARNING_ALARM__LEVEL_2_VISION__VOICE__________________________CHOICE (3u)

#define MCU_233_ADAS_RAD_070H_ASR_MOIS_ALARM_METHOD_FB_SOUND_OFF_CHOICE (0u)
#define MCU_233_ADAS_RAD_070H_ASR_MOIS_ALARM_METHOD_FB_SOUND_ON_CHOICE (1u)

#define MCU_233_ADAS_RAD_070H_ASR_MOIS_SWITCH_FB_OFF_CHOICE (0u)
#define MCU_233_ADAS_RAD_070H_ASR_MOIS_SWITCH_FB_ON_CHOICE (1u)

#define MCU_233_ADAS_RL_RAD_071H_ARS_DOW_SWITCH_FB_OFF_CHOICE (0u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_DOW_SWITCH_FB_ON_CHOICE (1u)

#define MCU_233_ADAS_RL_RAD_071H_ARS_BSIS_ALARM_METHOD_FB_DISPLAY_CHOICE (0u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_BSIS_ALARM_METHOD_FB___DISPLAY__SOUND_CHOICE (1u)

#define MCU_233_ADAS_RL_RAD_071H_ARS_BSD_LCA_L_STATE__OFF__DOW_______________________CHOICE (0u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_BSD_LCA_L_STATE__ON_CHOICE (1u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_BSD_LCA_L_STATE_FAILURE_CHOICE (2u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_BSD_LCA_L_STATE_RESERVED_CHOICE (3u)

#define MCU_233_ADAS_RL_RAD_071H_ARS_L_BSIS_L_STATE_NORMAL_CHOICE (0u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_L_BSIS_L_STATE_FAILURE_CHOICE (1u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_L_BSIS_L_STATE_RESERVED_CHOICE (3u)

#define MCU_233_ADAS_RL_RAD_071H_ARS_L_BSIS_L_WARNING___NO__ALARM_CHOICE (0u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_L_BSIS_L_WARNING___LEVEL_1__ALARM_VISION_CHOICE (1u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_L_BSIS_L_WARNING___LEVEL_2__ALARM_VISION_CHOICE (2u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_L_BSIS_L_WARNING_LEVEL_2__ALARM_VISION__VOICE_CHOICE (3u)

#define MCU_233_ADAS_RL_RAD_071H_ARS_BSDL_WARNING___NO__ALARM_CHOICE (0u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_BSDL_WARNING___LEVEL_1__ALARM_____________CHOICE (1u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_BSDL_WARNING___LEVEL_2__ALARM______________________CHOICE (2u)

#define MCU_233_ADAS_RL_RAD_071H_ARS_LCAL_WARNING___NO__ALARM_CHOICE (0u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_LCAL_WARNING___LEVEL_1__ALARM_____________CHOICE (1u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_LCAL_WARNING___LEVEL_2__ALARM______________________CHOICE (2u)

#define MCU_233_ADAS_RL_RAD_071H_ARS_BSD_SWITCH_FB_OFF_CHOICE (0u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_BSD_SWITCH_FB_ON_CHOICE (1u)

#define MCU_233_ADAS_RL_RAD_071H_ARS_DOWL_WARNING___NO__ALARM_CHOICE (0u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_DOWL_WARNING___LEVEL_1__ALARM_____________CHOICE (1u)
#define MCU_233_ADAS_RL_RAD_071H_ARS_DOWL_WARNING___LEVEL_2__ALARM______________________CHOICE (2u)

#define MCU_233_ADAS_RR_RAD_02_BH_ARS_BSD_LCA_R_STATE__OFF_CHOICE (0u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_BSD_LCA_R_STATE__ON_CHOICE (1u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_BSD_LCA_R_STATE_FAILURE_CHOICE (2u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_BSD_LCA_R_STATE_RESERVED_CHOICE (3u)

#define MCU_233_ADAS_RR_RAD_02_BH_ARS_R_BSIS_R_STATE_NORMAL_CHOICE (0u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_R_BSIS_R_STATE_FAILURE_CHOICE (1u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_R_BSIS_R_STATE_RESERVED_CHOICE (3u)

#define MCU_233_ADAS_RR_RAD_02_BH_ARS_R_BSIS_R_WARNING___NO__ALARM_CHOICE (0u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_R_BSIS_R_WARNING_LEVEL_1__ALARM_VISION_CHOICE (1u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_R_BSIS_R_WARNING_LEVEL_2__ALARM_VISION_CHOICE (2u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_R_BSIS_R_WARNING_LEVEL_2__ALARM_VISION__VOICE_CHOICE (3u)

#define MCU_233_ADAS_RR_RAD_02_BH_ARS_BSDR_WARNING___NO__ALARM_CHOICE (0u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_BSDR_WARNING___LEVEL_1__ALARM_____________CHOICE (1u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_BSDR_WARNING___LEVEL_2__ALARM______________________CHOICE (2u)

#define MCU_233_ADAS_RR_RAD_02_BH_ARS_LCAR_WARNING___NO__ALARM_CHOICE (0u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_LCAR_WARNING___LEVEL_1__ALARM_____________CHOICE (1u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_LCAR_WARNING___LEVEL_2__ALARM______________________CHOICE (2u)

#define MCU_233_ADAS_RR_RAD_02_BH_ARS_DOWR_WARNING___NO__ALARM_CHOICE (0u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_DOWR_WARNING___LEVEL_1__ALARM_____________CHOICE (1u)
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_DOWR_WARNING___LEVEL_2__ALARM______________________CHOICE (2u)

#define MCU_233_ADAS_NM_406H_NM_SLEEP_ACK_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ADAS_NM_406H_NM_SLEEP_ACK_ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_NM_406H_NM_SLEEP_IND_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ADAS_NM_406H_NM_SLEEP_IND_ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_NM_406H_NM_LIMPHOME_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ADAS_NM_406H_NM_LIMPHOME_ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_NM_406H_NM_RING_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ADAS_NM_406H_NM_RING_ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_NM_406H_NM_ALIVE_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ADAS_NM_406H_NM_ALIVE_ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_NM_408H_NM_SLEEP_ACK_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ADAS_NM_408H_NM_SLEEP_ACK_ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_NM_408H_NM_SLEEP_IND_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ADAS_NM_408H_NM_SLEEP_IND_ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_NM_408H_NM_LIMPHOME_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ADAS_NM_408H_NM_LIMPHOME_ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_NM_408H_NM_RING_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ADAS_NM_408H_NM_RING_ACTIVE_CHOICE (1u)

#define MCU_233_ADAS_NM_408H_NM_ALIVE_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ADAS_NM_408H_NM_ALIVE_ACTIVE_CHOICE (1u)

#define MCU_233_ACU_021H_AIR_BAG_FAIL_STS_FAIL_NO_PRESENT_LAMP_OFF_CHOICE (0u)
#define MCU_233_ACU_021H_AIR_BAG_FAIL_STS_SELF_INSPECTION_ACU_______________CHOICE (1u)
#define MCU_233_ACU_021H_AIR_BAG_FAIL_STS_FAIL_PRESENT__LAMP_ON_CHOICE (2u)
#define MCU_233_ACU_021H_AIR_BAG_FAIL_STS_RESERVED_CHOICE (3u)

#define MCU_233_ACU_021H_CRASH_OUTPUT_STS_NO_CRASH_CHOICE (0u)
#define MCU_233_ACU_021H_CRASH_OUTPUT_STS_FRONT_CHOICE (1u)
#define MCU_233_ACU_021H_CRASH_OUTPUT_STS_SIDE_CHOICE (2u)
#define MCU_233_ACU_021H_CRASH_OUTPUT_STS_FRONT_AND_SIDE_CHOICE (3u)

#define MCU_233_VCU_119H_VCU_GEAR_LEVEL_STS__P_CHOICE (0u)
#define MCU_233_VCU_119H_VCU_GEAR_LEVEL_STS__R_CHOICE (1u)
#define MCU_233_VCU_119H_VCU_GEAR_LEVEL_STS__N_CHOICE (2u)
#define MCU_233_VCU_119H_VCU_GEAR_LEVEL_STS__D___________CHOICE (3u)

#define MCU_233_VCU_119H_VCU_GEAR_LEVEL_V_NO__FAULT_CHOICE (0u)
#define MCU_233_VCU_119H_VCU_GEAR_LEVEL_V_FAULT_CHOICE (1u)

#define MCU_233_VCU_119H_VCU_BRAKE_PEDAL_STS_V_INVALID_CHOICE (0u)
#define MCU_233_VCU_119H_VCU_BRAKE_PEDAL_STS_V_VALID_CHOICE (1u)

#define MCU_233_VCU_119H_VCU_BRAKE_PEDAL_STS_NOT__PRESSED_CHOICE (0u)
#define MCU_233_VCU_119H_VCU_BRAKE_PEDAL_STS_PRESSED_CHOICE (1u)

#define MCU_233_VCU_119H_VCU_RGN_MOT_TRQ_V_INVALID_CHOICE (0u)
#define MCU_233_VCU_119H_VCU_RGN_MOT_TRQ_V_VALID_CHOICE (1u)

#define MCU_233_VCU_119H_VCU_MOT_TRQ_RGN_LIM_V_INVALID_CHOICE (0u)
#define MCU_233_VCU_119H_VCU_MOT_TRQ_RGN_LIM_V_VALID_CHOICE (1u)

#define MCU_233_VCU_119H_VCU_VEHICLE_STS_NOT__READY_CHOICE (0u)
#define MCU_233_VCU_119H_VCU_VEHICLE_STS_READY_CHOICE (1u)

#define MCU_233_VCU_119H_VCU_ACC_PEDL_POSN_V_INVALID_CHOICE (0u)
#define MCU_233_VCU_119H_VCU_ACC_PEDL_POSN_V_VALID_CHOICE (1u)

#define MCU_233_VCU_123H_TPMS_RESET_REQUEST_NOT_REQUEST_CHOICE (0u)
#define MCU_233_VCU_123H_TPMS_RESET_REQUEST_REQUEST_CHOICE (1u)

#define MCU_233_VCU_123H_BCM_DRV_SEAT_BELT_R_ST_LAMP_OFF_______CHOICE (0u)
#define MCU_233_VCU_123H_BCM_DRV_SEAT_BELT_R_ST_FAULT___RESERVED__CHOICE (1u)
#define MCU_233_VCU_123H_BCM_DRV_SEAT_BELT_R_ST_LAMP_ON_________CHOICE (2u)
#define MCU_233_VCU_123H_BCM_DRV_SEAT_BELT_R_ST_RESERVED_CHOICE (3u)

#define MCU_233_VCU_123H_BCM_DRIVER_DOOR_STS_CLOSED_CHOICE (0u)
#define MCU_233_VCU_123H_BCM_DRIVER_DOOR_STS_OPEN_CHOICE (1u)

#define MCU_233_VCU_123H_VCU_KL15_ON_OFF_CHOICE (0u)
#define MCU_233_VCU_123H_VCU_KL15_ON_ON_CHOICE (1u)

#define MCU_233_VCU_123H_ESC_OFF_SWITCH_NOT_ACTIVE_CHOICE (0u)
#define MCU_233_VCU_123H_ESC_OFF_SWITCH_ACTIVE_CHOICE (1u)

#define MCU_233_VCU_123H_AVH_SWITCH_NOT_ACTIVE_CHOICE (0u)
#define MCU_233_VCU_123H_AVH_SWITCH_ACTIVE_CHOICE (1u)

#define MCU_233_VCU_123H_VCU_MCU_FAULT_LEVEL___NO__ERROR_CHOICE (0u)
#define MCU_233_VCU_123H_VCU_MCU_FAULT_LEVEL___WARNING______________________CHOICE (1u)
#define MCU_233_VCU_123H_VCU_MCU_FAULT_LEVEL_DERATING________________________CHOICE (2u)
#define MCU_233_VCU_123H_VCU_MCU_FAULT_LEVEL___DISABLE_________________CHOICE (3u)

#define MCU_233_VCU_123H_GW_OUTSIDE_TEMP_V_INVALID_CHOICE (0u)
#define MCU_233_VCU_123H_GW_OUTSIDE_TEMP_V_VALID_CHOICE (1u)

#define MCU_233_VCU_251H_VCU_GASPEDAL_OVERRIDE_NO__OVERRIDE_CHOICE (0u)
#define MCU_233_VCU_251H_VCU_GASPEDAL_OVERRIDE_OVERRIDE_CHOICE (1u)

#define MCU_233_VCU_251H_VCU_GASPEDAL_OVERRIDE_V_VALID__CHOICE (0u)
#define MCU_233_VCU_251H_VCU_GASPEDAL_OVERRIDE_V_INVALID__CHOICE (1u)

#define MCU_233_VCU_201H_VCU_EPB_WIRE_CONTROL_REQUEST________CHOICE (0u)
#define MCU_233_VCU_201H_VCU_EPB_WIRE_CONTROL_REQUEST__________CHOICE (1u)
#define MCU_233_VCU_201H_VCU_EPB_WIRE_CONTROL_REQUEST___________________EPB__________EPB_____________________________CHOICE (2u)

#define MCU_233_VCU_201H_VCU_EPB_CTL_MODE______________________________CHOICE (0u)
#define MCU_233_VCU_201H_VCU_EPB_CTL_MODE______________1_CHOICE (1u)
#define MCU_233_VCU_201H_VCU_EPB_CTL_MODE______________2_CHOICE (2u)
#define MCU_233_VCU_201H_VCU_EPB_CTL_MODE________________________CHOICE (4u)

#define MCU_233_VCU_201H_VCU_EPB_TOW_MODE_ENABLE_NOT_ENABLE_CHOICE (0u)
#define MCU_233_VCU_201H_VCU_EPB_TOW_MODE_ENABLE_ENABLE_CHOICE (1u)

#define MCU_233_VCU_201H_VCU_EPB_SLV_PARKING_V_INVALID_CHOICE (0u)
#define MCU_233_VCU_201H_VCU_EPB_SLV_PARKING_V_VALID_CHOICE (1u)

#define MCU_233_VCU_201H_VCU_EPB_SLV_PARKING_VCU_EPB_SLV_REQUEST_NONE_CHOICE (0u)
#define MCU_233_VCU_201H_VCU_EPB_SLV_PARKING_VCU_EPB_SLV_REQUEST_PARK_APPLY_CHOICE (1u)
#define MCU_233_VCU_201H_VCU_EPB_SLV_PARKING_VCU_EPB_SLV_REQUEST_RELEASE_CHOICE (2u)
#define MCU_233_VCU_201H_VCU_EPB_SLV_PARKING_RESERVED_CHOICE (3u)

#define MCU_233_VCU_201H_DRIVER_REQ_MCU_TORQUE_V_INVALID_CHOICE (0u)
#define MCU_233_VCU_201H_DRIVER_REQ_MCU_TORQUE_V_VALID_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_MODE_FACE_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_MODE_FACE_AND__FOOT_CHOICE (1u)
#define MCU_233_ACMM_IHU_301H_ACMM_MODE_FOOT_CHOICE (2u)
#define MCU_233_ACMM_IHU_301H_ACMM_MODE_FOOT_AND__DEFROST_CHOICE (3u)

#define MCU_233_ACMM_IHU_301H_ACMM_CYCLE_STU_OUTSIDE__CYCLE_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_CYCLE_STU_INSIDE__CYCLE_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_DEFROST_STU_OFF_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_DEFROST_STU_ON_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_AC_SWITCH_STU_OFF_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_AC_SWITCH_STU_ON_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_AUTO_SWITCH_STU_OFF_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_AUTO_SWITCH_STU_ON_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_MAIN_SWTICH_STU_OFF_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_MAIN_SWTICH_STU_ON_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_AIR_P_STU_OFF_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_AIR_P_STU_ON_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_PTC_STU_OFF_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_PTC_STU_ON_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_MAXAC_STU_OFF_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_MAXAC_STU_ON_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_F_BLOWER_LVL_NO_REQUEST_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_BLOWER_LVL______1_CHOICE (1u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_BLOWER_LVL_______2_CHOICE (2u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_BLOWER_LVL______3_CHOICE (3u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_BLOWER_LVL_______4_CHOICE (4u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_BLOWER_LVL______5_CHOICE (5u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_BLOWER_LVL______6_CHOICE (6u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_BLOWER_LVL______7_CHOICE (7u)

#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV_LOW_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV______1_CHOICE (1u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV_______2_CHOICE (2u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV______3_CHOICE (3u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV_______4_CHOICE (4u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV______5_CHOICE (5u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV______6_CHOICE (6u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV______7_CHOICE (7u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV______8_CHOICE (8u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV______9_CHOICE (9u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV______10_CHOICE (10u)
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV_HI_CHOICE (11u)

#define MCU_233_ACMM_IHU_301H_ACMM_MAXPTC_STU_OFF_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_MAXPTC_STU_ON_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_R_MAIN_SWTICH_STU_OFF_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_MAIN_SWTICH_STU_ON_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_R_MODE_FACE_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_MODE_FACE_AND__FOOT_CHOICE (1u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_MODE_FOOT_CHOICE (2u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_MODE_RESERVE_CHOICE (3u)

#define MCU_233_ACMM_IHU_301H_ACMM_R_AC_STU_OFF_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_AC_STU_ON_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_R_PTC_STU_OFF_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_PTC_STU_ON_CHOICE (1u)

#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_EV______1_CHOICE (1u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_EV_______2_CHOICE (2u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_EV______3_CHOICE (3u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_EV_______4_CHOICE (4u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_EV______5_CHOICE (5u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_EV______6_CHOICE (6u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_EV______7_CHOICE (7u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_EV______8_CHOICE (8u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_EV______9_CHOICE (9u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_EV______10_CHOICE (10u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_EV_HI_CHOICE (11u)

#define MCU_233_ACMM_IHU_301H_ACMM_TEM_SAME_STU_OFF_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_TEM_SAME_STU_ON_1_CHOICE (1u)
#define MCU_233_ACMM_IHU_301H_ACMM_TEM_SAME_STU_ON_2_CHOICE (2u)
#define MCU_233_ACMM_IHU_301H_ACMM_TEM_SAME_STU_RESERVED_CHOICE (3u)

#define MCU_233_ACMM_IHU_301H_ACMM_R_BLOWER_LVL_NO_REQUEST_CHOICE (0u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_BLOWER_LVL______1_CHOICE (1u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_BLOWER_LVL_______2_CHOICE (2u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_BLOWER_LVL______3_CHOICE (3u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_BLOWER_LVL_______4_CHOICE (4u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_BLOWER_LVL______5_CHOICE (5u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_BLOWER_LVL______6_CHOICE (6u)
#define MCU_233_ACMM_IHU_301H_ACMM_R_BLOWER_LVL______7_CHOICE (7u)

#define MCU_233_ACMM_IHU_302H_ACMM_WORK_STA_OFF____________________________________________CHOICE (0u)
#define MCU_233_ACMM_IHU_302H_ACMM_WORK_STA_ON________________________________________________1_CHOICE (1u)
#define MCU_233_ACMM_IHU_302H_ACMM_WORK_STA_ERROR______________CHOICE (2u)
#define MCU_233_ACMM_IHU_302H_ACMM_WORK_STA_OFF_______________________________________________CHOICE (3u)
#define MCU_233_ACMM_IHU_302H_ACMM_WORK_STA_ON________________________________________________4_CHOICE (4u)
#define MCU_233_ACMM_IHU_302H_ACMM_WORK_STA_ERROR_________________CHOICE (5u)
#define MCU_233_ACMM_IHU_302H_ACMM_WORK_STA_ON_____________________CHOICE (6u)
#define MCU_233_ACMM_IHU_302H_ACMM_WORK_STA_ERROR____________________CHOICE (7u)

#define MCU_233_ACMM_IHU_302H_EAC_WORK_STA_OFF___EAC_____________________________________CHOICE (0u)
#define MCU_233_ACMM_IHU_302H_EAC_WORK_STA_ON____EAC________________________________________CHOICE (1u)
#define MCU_233_ACMM_IHU_302H_EAC_WORK_STA_ERROR___EAC_______CHOICE (2u)
#define MCU_233_ACMM_IHU_302H_EAC_WORK_STA_OFF______EAC_____________________________________CHOICE (3u)
#define MCU_233_ACMM_IHU_302H_EAC_WORK_STA_ON_______EAC_____________________________________CHOICE (4u)
#define MCU_233_ACMM_IHU_302H_EAC_WORK_STA_ERROR______EAC_______CHOICE (5u)
#define MCU_233_ACMM_IHU_302H_EAC_WORK_STA_ON__________EAC_______CHOICE (6u)
#define MCU_233_ACMM_IHU_302H_EAC_WORK_STA_ERROR_________EAC_______CHOICE (7u)

#define MCU_233_ACMM_IHU_302H_PTC_WORK_STA_OFF___PTC_____________________________________0_CHOICE (0u)
#define MCU_233_ACMM_IHU_302H_PTC_WORK_STA_ON____PTC________________________________________CHOICE (1u)
#define MCU_233_ACMM_IHU_302H_PTC_WORK_STA_ERROR___PTC_______2_CHOICE (2u)
#define MCU_233_ACMM_IHU_302H_PTC_WORK_STA_OFF___PTC_____________________________________3_CHOICE (3u)
#define MCU_233_ACMM_IHU_302H_PTC_WORK_STA_ON____PTC_____________________________________CHOICE (4u)
#define MCU_233_ACMM_IHU_302H_PTC_WORK_STA_ERROR___PTC_______5_CHOICE (5u)
#define MCU_233_ACMM_IHU_302H_PTC_WORK_STA_ON_______PTC_______CHOICE (6u)
#define MCU_233_ACMM_IHU_302H_PTC_WORK_STA_ERROR______PTC_______CHOICE (7u)

#define MCU_233_ACMM_IHU_302H_AC_FRONT_PTC_ENABLE_DISABLE_CHOICE (0u)
#define MCU_233_ACMM_IHU_302H_AC_FRONT_PTC_ENABLE___PTC_____1_CHOICE (1u)
#define MCU_233_ACMM_IHU_302H_AC_FRONT_PTC_ENABLE___PTC_____2_CHOICE (2u)
#define MCU_233_ACMM_IHU_302H_AC_FRONT_PTC_ENABLE______PTC_____CHOICE (3u)

#define MCU_233_ACMM_EAC_304H_AC_FR_COMPRESSOR_ENABLE_DISABLE_CHOICE (0u)
#define MCU_233_ACMM_EAC_304H_AC_FR_COMPRESSOR_ENABLE____________CHOICE (1u)

#define MCU_233_ACMM_EAC_304H_AC_RR_COMPRESSOR_ENABLE_DISABLE_CHOICE (0u)
#define MCU_233_ACMM_EAC_304H_AC_RR_COMPRESSOR_ENABLE____________CHOICE (1u)

#define MCU_233_ACMM_308H_L_PM25_AIR_IN_Q_LEVEL___LEVEL_1__CHOICE (0u)
#define MCU_233_ACMM_308H_L_PM25_AIR_IN_Q_LEVEL___LEVEL_2__CHOICE (1u)
#define MCU_233_ACMM_308H_L_PM25_AIR_IN_Q_LEVEL___LEVEL_3__CHOICE (2u)
#define MCU_233_ACMM_308H_L_PM25_AIR_IN_Q_LEVEL___LEVEL_4__CHOICE (3u)
#define MCU_233_ACMM_308H_L_PM25_AIR_IN_Q_LEVEL___LEVEL_5__CHOICE (4u)
#define MCU_233_ACMM_308H_L_PM25_AIR_IN_Q_LEVEL___LEVEL_6__CHOICE (5u)
#define MCU_233_ACMM_308H_L_PM25_AIR_IN_Q_LEVEL___RESERVED__CHOICE (6u)
#define MCU_233_ACMM_308H_L_PM25_AIR_IN_Q_LEVEL___INVALID_CHOICE (7u)

#define MCU_233_ACMM_308H_F_COOLG_FAN_DUTY_0__CHOICE (0u)
#define MCU_233_ACMM_308H_F_COOLG_FAN_DUTY_1__CHOICE (1u)
#define MCU_233_ACMM_308H_F_COOLG_FAN_DUTY_2__CHOICE (2u)
#define MCU_233_ACMM_308H_F_COOLG_FAN_DUTY_3____CHOICE (3u)
#define MCU_233_ACMM_308H_F_COOLG_FAN_DUTY_97__CHOICE (97u)
#define MCU_233_ACMM_308H_F_COOLG_FAN_DUTY_98__CHOICE (98u)
#define MCU_233_ACMM_308H_F_COOLG_FAN_DUTY_99__CHOICE (99u)
#define MCU_233_ACMM_308H_F_COOLG_FAN_DUTY_100__CHOICE (100u)

#define MCU_233_ACMM_308H_F_COOLG_FAN_SWTICH_STS_OFF_CHOICE (0u)
#define MCU_233_ACMM_308H_F_COOLG_FAN_SWTICH_STS_ON_CHOICE (1u)

#define MCU_233_ACMM_331H_AC_WORK_STA_OFF_CHOICE (0u)
#define MCU_233_ACMM_331H_AC_WORK_STA_ON___0_X2_CHOICE (1u)

#define MCU_233_ACMM_332H_AC_WORK_STA_RR_OFF_CHOICE (0u)
#define MCU_233_ACMM_332H_AC_WORK_STA_RR_ON_______________________0_X2_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_WORK_STA_OFF_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_WORK_STA_WAIT_CHOICE (1u)
#define MCU_233_ACMM_333H_FRONT_WORK_STA_FAULT_CHOICE (2u)
#define MCU_233_ACMM_333H_FRONT_WORK_STA_ON_CHOICE (3u)

#define MCU_233_ACMM_333H_FRONT_PTC_HV_DISCONNECT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_HV_DISCONNECT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_IGBT_OVER_TEM_PROTN___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_IGBT_OVER_TEM_PROTN___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_OTLT_OVER_TEM_PROTN___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_OTLT_OVER_TEM_PROTN___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_BATT_UNDER_VOLT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_BATT_UNDER_VOLT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_BATT_OVER_VOLT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_BATT_OVER_VOLT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_PCB_TEMP_SNSR_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_PCB_TEMP_SNSR_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_HI_CRNT_SNSR_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_HI_CRNT_SNSR_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_PCB_OVER_TEMP_PROTN___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_PCB_OVER_TEMP_PROTN___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_HV_UNDER_VOLT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_HV_UNDER_VOLT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_IGBT_TEM_SNSR_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_IGBT_TEM_SNSR_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_OTLT_TEM_SNSR_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_OTLT_TEM_SNSR_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_COMM_ERROR___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_COMM_ERROR___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_CORE_OR_IGBT_OPEN_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_CORE_OR_IGBT_OPEN_ERR___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_IGBT_SHRT_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_IGBT_SHRT_ERR___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_CORE_SHRT_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_CORE_SHRT_ERR___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_HV_OVER_CRNT_PROTN___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_HV_OVER_CRNT_PROTN___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_333H_FRONT_PTC_HV_OVER_VOLT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_333H_FRONT_PTC_HV_OVER_VOLT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_WORK_STA_OFF_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_WORK_STA_WAIT_CHOICE (1u)
#define MCU_233_ACMM_334H_SIDE_PTC_WORK_STA_FAULT_CHOICE (2u)
#define MCU_233_ACMM_334H_SIDE_PTC_WORK_STA_ON_CHOICE (3u)

#define MCU_233_ACMM_334H_SIDE_PTC_HV_DISCONNECT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_HV_DISCONNECT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_IGBT_OVER_TEM_PROTN___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_IGBT_OVER_TEM_PROTN___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_OTLT_OVER_TEM_PROTN___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_OTLT_OVER_TEM_PROTN___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_BATT_UNDER_VOLT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_BATT_UNDER_VOLT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_BATT_OVER_VOLT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_BATT_OVER_VOLT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_PCB_TEMP_SNSR_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_PCB_TEMP_SNSR_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_HI_CRNT_SNSR_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_HI_CRNT_SNSR_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_PCB_OVER_TEMP_PROTN___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_PCB_OVER_TEMP_PROTN___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_HV_UNDER_VOLT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_HV_UNDER_VOLT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_IGBT_TEM_SNSR_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_IGBT_TEM_SNSR_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_OTLT_TEM_SNSR_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_OTLT_TEM_SNSR_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_COMM_ERROR___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_COMM_ERROR___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_CORE_OR_IGBT_OPEN_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_CORE_OR_IGBT_OPEN_ERR___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_IGBT_SHRT_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_IGBT_SHRT_ERR___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_CORE_SHRT_ERR___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_CORE_SHRT_ERR___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_HV_OVER_CRNT_PROTN___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_HV_OVER_CRNT_PROTN___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_334H_SIDE_PTC_HV_OVER_VOLT_FLT___NO__FAILURE_CHOICE (0u)
#define MCU_233_ACMM_334H_SIDE_PTC_HV_OVER_VOLT_FLT___FAILURE_CHOICE (1u)

#define MCU_233_ACMM_FR34_CC_335H_AC_WORK_STA_OFF_CHOICE (0u)
#define MCU_233_ACMM_FR34_CC_335H_AC_WORK_STA_ON___0_X2_CHOICE (1u)

#define MCU_233_ACMM_RR45_CC_336H_AC_WORK_STA_RR_OFF_CHOICE (0u)
#define MCU_233_ACMM_RR45_CC_336H_AC_WORK_STA_RR_ON_______________________0_X2_CHOICE (1u)

#define MCU_233_SMM_2_F4H_SMM_HEAT_LEVEL_D_OFF_CHOICE (0u)
#define MCU_233_SMM_2_F4H_SMM_HEAT_LEVEL_D_LOW_CHOICE (1u)
#define MCU_233_SMM_2_F4H_SMM_HEAT_LEVEL_D_MID_CHOICE (2u)
#define MCU_233_SMM_2_F4H_SMM_HEAT_LEVEL_D_HIGH_CHOICE (3u)
#define MCU_233_SMM_2_F4H_SMM_HEAT_LEVEL_D_INVALID_CHOICE (7u)

#define MCU_233_SMM_2_F4H_SMM_FAN_LEVEL_D_OFF_CHOICE (0u)
#define MCU_233_SMM_2_F4H_SMM_FAN_LEVEL_D_LOW_CHOICE (1u)
#define MCU_233_SMM_2_F4H_SMM_FAN_LEVEL_D_MID_CHOICE (2u)
#define MCU_233_SMM_2_F4H_SMM_FAN_LEVEL_D_HIGH_CHOICE (3u)
#define MCU_233_SMM_2_F4H_SMM_FAN_LEVEL_D_RESERVED_CHOICE (6u)
#define MCU_233_SMM_2_F4H_SMM_FAN_LEVEL_D_INVALID_CHOICE (7u)

#define MCU_233_ICM_3_F_EH_IHU_ICM_THEME_FEEDBACK_DARK_CHOICE (0u)
#define MCU_233_ICM_3_F_EH_IHU_ICM_THEME_FEEDBACK_LIGHT_CHOICE (1u)

#define MCU_233_ICM_3_F_EH_PS_SEAT_BELT_R_ST_LAMP_OFF_______CHOICE (0u)
#define MCU_233_ICM_3_F_EH_PS_SEAT_BELT_R_ST_FAULT___RESERVED__CHOICE (1u)
#define MCU_233_ICM_3_F_EH_PS_SEAT_BELT_R_ST_LAMP_ON_________CHOICE (2u)
#define MCU_233_ICM_3_F_EH_PS_SEAT_BELT_R_ST_RESERVED_CHOICE (3u)

#define MCU_233_ICM_3_F_EH_DRV_SEAT_BELT_R_ST_LAMP_OFF_______CHOICE (0u)
#define MCU_233_ICM_3_F_EH_DRV_SEAT_BELT_R_ST_FAULT___RESERVED__CHOICE (1u)
#define MCU_233_ICM_3_F_EH_DRV_SEAT_BELT_R_ST_LAMP_ON_________CHOICE (2u)
#define MCU_233_ICM_3_F_EH_DRV_SEAT_BELT_R_ST_RESERVED_CHOICE (3u)

#define MCU_233_ICM_3_F_EH_ICM_TOTAL_ODOMETER_VALID_VALID_CHOICE (0u)
#define MCU_233_ICM_3_F_EH_ICM_TOTAL_ODOMETER_VALID_INVALID_CHOICE (1u)

#define MCU_233_ICM_3_F_EH_IHU_ICM_UNIT_SET_BACK_KM_H_CHOICE (0u)
#define MCU_233_ICM_3_F_EH_IHU_ICM_UNIT_SET_BACK_MPH_H_CHOICE (1u)

#define MCU_233_ICM_3_F_EH_IHU_ICM_LANGUANGE_SET_BACK_CHINA_CHOICE (0u)
#define MCU_233_ICM_3_F_EH_IHU_ICM_LANGUANGE_SET_BACK_ENGLISH_CHOICE (1u)

#define MCU_233_ICM_3_F_EH_ICM_SPEED_WARN_MAXBACK_INVALID_CHOICE (0u)
#define MCU_233_ICM_3_F_EH_ICM_SPEED_WARN_MAXBACK_80KM_H_CHOICE (1u)
#define MCU_233_ICM_3_F_EH_ICM_SPEED_WARN_MAXBACK_90KM_H_CHOICE (2u)
#define MCU_233_ICM_3_F_EH_ICM_SPEED_WARN_MAXBACK_100KM_H_CHOICE (3u)
#define MCU_233_ICM_3_F_EH_ICM_SPEED_WARN_MAXBACK_110KM_H_CHOICE (4u)
#define MCU_233_ICM_3_F_EH_ICM_SPEED_WARN_MAXBACK_120KM_H_CHOICE (5u)
#define MCU_233_ICM_3_F_EH_ICM_SPEED_WARN_MAXBACK_130KM_H_CHOICE (6u)
#define MCU_233_ICM_3_F_EH_ICM_SPEED_WARN_MAXBACK_RESERVE_CHOICE (21u)

#define MCU_233_ICM_NM_412H_NM_SLEEP_ACK_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ICM_NM_412H_NM_SLEEP_ACK_ACTIVE_CHOICE (1u)

#define MCU_233_ICM_NM_412H_NM_SLEEP_IND_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ICM_NM_412H_NM_SLEEP_IND_ACTIVE_CHOICE (1u)

#define MCU_233_ICM_NM_412H_NM_LIMPHOME_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ICM_NM_412H_NM_LIMPHOME_ACTIVE_CHOICE (1u)

#define MCU_233_ICM_NM_412H_NM_RING_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ICM_NM_412H_NM_RING_ACTIVE_CHOICE (1u)

#define MCU_233_ICM_NM_412H_NM_ALIVE_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ICM_NM_412H_NM_ALIVE_ACTIVE_CHOICE (1u)

#define MCU_233_VSP_283H_VSP_PPD_SWITCH_STATUS_CLOSE_CHOICE (0u)
#define MCU_233_VSP_283H_VSP_PPD_SWITCH_STATUS_OPEN_CHOICE (1u)

#define MCU_233_WCM_347H_WPC_PHONE_DETECTION_STATUS________CHOICE (0u)
#define MCU_233_WCM_347H_WPC_PHONE_DETECTION_STATUS______________CHOICE (1u)

#define MCU_233_WCM_347H_WPC_WIRELESS_CHARGING_STATUS______1_CHOICE (1u)
#define MCU_233_WCM_347H_WPC_WIRELESS_CHARGING_STATUS________CHOICE (2u)
#define MCU_233_WCM_347H_WPC_WIRELESS_CHARGING_STATUS______________________CHOICE (3u)
#define MCU_233_WCM_347H_WPC_WIRELESS_CHARGING_STATUS_FOD_________CHOICE (4u)
#define MCU_233_WCM_347H_WPC_WIRELESS_CHARGING_STATUS________________________________CHOICE (5u)
#define MCU_233_WCM_347H_WPC_WIRELESS_CHARGING_STATUS______________________________CHOICE (6u)
#define MCU_233_WCM_347H_WPC_WIRELESS_CHARGING_STATUS_PEPS_________________CHOICE (7u)
#define MCU_233_WCM_347H_WPC_WIRELESS_CHARGING_STATUS______15_CHOICE (15u)

#define MCU_233_WCM_347H_WPC_WIRELESS_CHARGING_SET_STATUS___________0_CHOICE (0u)
#define MCU_233_WCM_347H_WPC_WIRELESS_CHARGING_SET_STATUS___________1_CHOICE (1u)

#define MCU_233_BCM_211H_BCM_POWER_MODE_OFF_CHOICE (0u)
#define MCU_233_BCM_211H_BCM_POWER_MODE_ON____IG1_____CHOICE (1u)
#define MCU_233_BCM_211H_BCM_POWER_MODE__________2_CHOICE (2u)
#define MCU_233_BCM_211H_BCM_POWER_MODE______3_CHOICE (3u)
#define MCU_233_BCM_211H_BCM_POWER_MODE__________4_CHOICE (4u)
#define MCU_233_BCM_211H_BCM_POWER_MODE______7_CHOICE (7u)

#define MCU_233_BCM_211H_BCM_AUTH_STUS_NOT__AUTHENT_CHOICE (0u)
#define MCU_233_BCM_211H_BCM_AUTH_STUS_AUTHENT__FAILURE_CHOICE (1u)
#define MCU_233_BCM_211H_BCM_AUTH_STUS_AUTHENT__SUCCESS_CHOICE (2u)
#define MCU_233_BCM_211H_BCM_AUTH_STUS_AUTHENTING_CHOICE (3u)

#define MCU_233_BCM_105H_BCM_CLOSING_CAR_LOCK_STS_OFF_CHOICE (0u)
#define MCU_233_BCM_105H_BCM_CLOSING_CAR_LOCK_STS_ON_CHOICE (1u)

#define MCU_233_BCM_105H_BCM_VEHICLE_POWER_MODE_STS_NORMAL_CHOICE (0u)
#define MCU_233_BCM_105H_BCM_VEHICLE_POWER_MODE_STS_INTELLIGENT_CHOICE (1u)

#define MCU_233_BCM_105H_BCM_LOCK_CAR_CLOSE_WINDOW_STS_OFF_CHOICE (0u)
#define MCU_233_BCM_105H_BCM_LOCK_CAR_CLOSE_WINDOW_STS_ON_CHOICE (1u)

#define MCU_233_BCM_105H_BCM_VENTILATION_SW_STATUS_OFF_CHOICE (0u)
#define MCU_233_BCM_105H_BCM_VENTILATION_SW_STATUS_ON_CHOICE (1u)

#define MCU_233_BCM_105H_BCM_LEAVING_CAR_LOCK_STS_OFF_CHOICE (0u)
#define MCU_233_BCM_105H_BCM_LEAVING_CAR_LOCK_STS_ON_CHOICE (1u)

#define MCU_233_BCM_105H_BCM_DOOR_LOCK_SET_STS_DRIVER__PASSENGER__DOOR_CHOICE (0u)
#define MCU_233_BCM_105H_BCM_DOOR_LOCK_SET_STS_ALL__DOOR_CHOICE (1u)

#define MCU_233_BCM_105H_BCM_LOCK_PROMPT_STS_OFF_CHOICE (0u)
#define MCU_233_BCM_105H_BCM_LOCK_PROMPT_STS_ON_CHOICE (1u)

#define MCU_233_BCM_112H_BCM_SOLAR_RIGHT_PASSG_SIDE___INVALID_CHOICE (255u)

#define MCU_233_BCM_112H_BCM_SOLAR_LEFT_DRIVESIDE___INVALID__CHOICE (255u)

#define MCU_233_BCM_112H_BCM_FOLLOW_ME_HOME_FEDB___OFF_CHOICE (0u)
#define MCU_233_BCM_112H_BCM_FOLLOW_ME_HOME_FEDB___30S_CHOICE (1u)
#define MCU_233_BCM_112H_BCM_FOLLOW_ME_HOME_FEDB___60S_CHOICE (2u)
#define MCU_233_BCM_112H_BCM_FOLLOW_ME_HOME_FEDB___90S_CHOICE (3u)
#define MCU_233_BCM_112H_BCM_FOLLOW_ME_HOME_FEDB___120S_____________________________________________________________________________________________CHOICE (4u)

#define MCU_233_BCM_113H_BCM_MIRROR_FOLD_STS_______0_CHOICE (0u)
#define MCU_233_BCM_113H_BCM_MIRROR_FOLD_STS_______1_CHOICE (1u)
#define MCU_233_BCM_113H_BCM_MIRROR_FOLD_STS_______________________________________________________________________________________________________CHOICE (2u)

#define MCU_233_BCM_ESCL_AUTH_025H_BCM_ESCL_REQUST_REQUEST__RANDOM__DATA__CHOICE (0u)
#define MCU_233_BCM_ESCL_AUTH_025H_BCM_ESCL_REQUST_REQUEST__UNLOCK_CHOICE (1u)
#define MCU_233_BCM_ESCL_AUTH_025H_BCM_ESCL_REQUST_REQUEST__LOCK_CHOICE (2u)
#define MCU_233_BCM_ESCL_AUTH_025H_BCM_ESCL_REQUST_RESERVED_CHOICE (3u)

#define MCU_233_BCM_NM_404H_NM_SLEEP_ACK_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_BCM_NM_404H_NM_SLEEP_ACK_ACTIVE_CHOICE (1u)

#define MCU_233_BCM_NM_404H_NM_SLEEP_IND_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_BCM_NM_404H_NM_SLEEP_IND_ACTIVE_CHOICE (1u)

#define MCU_233_BCM_NM_404H_NM_LIMPHOME_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_BCM_NM_404H_NM_LIMPHOME_ACTIVE_CHOICE (1u)

#define MCU_233_BCM_NM_404H_NM_RING_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_BCM_NM_404H_NM_RING_ACTIVE_CHOICE (1u)

#define MCU_233_BCM_NM_404H_NM_ALIVE_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_BCM_NM_404H_NM_ALIVE_ACTIVE_CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_R_WHEEL_SW___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_R_WHEEL_SW___PRESSED______________________CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_R_RIGHT_SW___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_R_RIGHT_SW___PRESSED_____________________CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_R_LEFT_SW___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_R_LEFT_SW___PRESSED_____________________CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_R_WHEEL_DOWN___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_R_WHEEL_DOWN___PRESSED____________________CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_R_WHEEL_UP___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_R_WHEEL_UP___PRESSED____________________CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_R_FUNC_SW2___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_R_FUNC_SW2___PRESSED______________________________CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_R_FUNC_SW1___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_R_FUNC_SW1___PRESSED______________________________CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_L_ACC_NO__PRESSED_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_L_ACC_SHORT__PRESSED_CHOICE (1u)
#define MCU_233_FSW_3_C1H_MFS_L_ACC_LONG__PRESSED_CHOICE (2u)
#define MCU_233_FSW_3_C1H_MFS_L_ACC_RESERVED_CHOICE (3u)

#define MCU_233_FSW_3_C1H_MFS_L_GAP_PLUS___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_L_GAP_PLUS___PRESSED__________CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_L_GAP_MINUS___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_L_GAP_MINUS___PRESSED__________CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_L_SPEED_MINUS_SET___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_L_SPEED_MINUS_SET___PRESSED__________CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_L_SPEED_PLUS___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_L_SPEED_PLUS___PRESSED__________CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_L_FUNC_SW2___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_L_FUNC_SW2___PRESSED__________________________________CHOICE (1u)

#define MCU_233_FSW_3_C1H_MFS_L_FUNC_SW1___NORMAL_CHOICE (0u)
#define MCU_233_FSW_3_C1H_MFS_L_FUNC_SW1___PRESSED______________________________CHOICE (1u)

#define MCU_233_SWH_STATE_3_C2H_SWH_STEER_WHEEL_HEATG_ERR___NO__FAULT___CHOICE (0u)
#define MCU_233_SWH_STATE_3_C2H_SWH_STEER_WHEEL_HEATG_ERR___FAULT__OCCURRED__CHOICE (1u)

#define MCU_233_SWH_STATE_3_C2H_SWH_STEER_WHEEL_HEATG_STS__OFF___CHOICE (0u)
#define MCU_233_SWH_STATE_3_C2H_SWH_STEER_WHEEL_HEATG_STS__ON__CHOICE (1u)

#define MCU_233_SWH_STATE_3_C2H_SWH_RESPONSE_ERROR___NO_ERROR_CHOICE (0u)
#define MCU_233_SWH_STATE_3_C2H_SWH_RESPONSE_ERROR___ERROR_CHOICE (1u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_DEFROST_SWITCH_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_DEFROST_SWITCH_OFF_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_DEFROST_SWITCH_ON_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_DEFROST_SWITCH_RESERVED_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_AC_SWITCH_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_AC_SWITCH_OFF_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_AC_SWITCH_ON_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_AC_SWITCH_RESERVED_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_AUTO_SWITCH_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_AUTO_SWITCH_ON_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_AUTO_SWITCH_RESERVED_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_MAIN_SWTICH_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MAIN_SWTICH_OFF_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MAIN_SWTICH_ON_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MAIN_SWTICH_RESERVED_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_F_BLOWER_LVL_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_BLOWER_LVL______1_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_BLOWER_LVL_______2_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_BLOWER_LVL______3_CHOICE (3u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_BLOWER_LVL_______4_CHOICE (4u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_BLOWER_LVL______5_CHOICE (5u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_BLOWER_LVL______6_CHOICE (6u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_BLOWER_LVL______7_CHOICE (7u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_MODE_SWITCH_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MODE_SWITCH_FACE_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MODE_SWITCH_FACE_AND__FOOT_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MODE_SWITCH_FOOT_CHOICE (3u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MODE_SWITCH_FOOT_AND__DEFROST_CHOICE (4u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_CYCLE_SWITCH_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_CYCLE_SWITCH_OUTSIDE__CYCLE_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_CYCLE_SWITCH_INSIDE__CYCLE_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_CYCLE_SWITCH_RESERVED_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV_LOW_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV______2_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV_____0_X4_CHOICE (3u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV______5_CHOICE (5u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV______6_CHOICE (6u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV______7_CHOICE (7u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV______8_CHOICE (8u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV______9_CHOICE (9u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV______10_CHOICE (10u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV______11_CHOICE (11u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV_HI_CHOICE (12u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_R_PTC_SET_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_PTC_SET_OFF_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_PTC_SET_ON_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_PTC_SET_RESERVED_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_R_MAIN_SWTICH_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_MAIN_SWTICH_OFF_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_MAIN_SWTICH_ON_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_MAIN_SWTICH_RESERVED_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_F_PTC_SET_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_PTC_SET_OFF_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_PTC_SET_ON_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_PTC_SET_RESERVED_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_R_MODE_SWTICH_NO_REQUEST___________CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_MODE_SWTICH_FACE_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_MODE_SWTICH_FACE_AND__FOOT_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_MODE_SWTICH_FOOT_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_R_BLOWER_LVL_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_BLOWER_LVL______1_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_BLOWER_LVL_______CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_BLOWER_LVL_____0_X4_CHOICE (3u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_BLOWER_LVL______5_CHOICE (5u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_BLOWER_LVL______6_CHOICE (6u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_BLOWER_LVL______7_CHOICE (7u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV_LOW_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV______2_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV_____0_X4_CHOICE (3u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV______5_CHOICE (5u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV______6_CHOICE (6u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV______7_CHOICE (7u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV______8_CHOICE (8u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV______9_CHOICE (9u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV______10_CHOICE (10u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV______11_CHOICE (11u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV_HI_CHOICE (12u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_R_AC_SWITCH_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_AC_SWITCH_OFF_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_AC_SWITCH_ON_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_AC_SWITCH_RESERVED_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_MAXPTC_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MAXPTC_OFF_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MAXPTC_ON_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MAXPTC_RESERVED_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_MAXAC_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MAXAC_OFF_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MAXAC_ON_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_MAXAC_RESERVED_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_KEY_AIRPURIFICATION_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_KEY_AIRPURIFICATION_OFF_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_KEY_AIRPURIFICATION_ON_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_KEY_AIRPURIFICATION_RESERVED_CHOICE (3u)

#define MCU_233_IHU_ACMM_2_F9H_IHU_TEM_SAME_SET_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_TEM_SAME_SET_OFF_CHOICE (1u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_TEM_SAME_SET_ON_CHOICE (2u)
#define MCU_233_IHU_ACMM_2_F9H_IHU_TEM_SAME_SET_RESERVED_CHOICE (3u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_AVH_SWITCH_NOT_ACTIVE_CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_AVH_SWITCH_ACTIVE_CHOICE (1u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_ESC_OFF_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_ESC_OFF_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_EPB_TOW_MODE_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_EPB_TOW_MODE_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_TPMS_RESET_SWITCH_NO_REQUEST___________CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_TPMS_RESET_SWITCH_RESET_CHOICE (1u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_VSP_SOUND_OFF_OFF_CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_VSP_SOUND_OFF_ON_CHOICE (1u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_SLOW_CHARGING_PRESERVATION_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_SLOW_CHARGING_PRESERVATION_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_EXTERNAL_DISCHARGE_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_EXTERNAL_DISCHARGE_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_WORM_MODE_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_WORM_MODE_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_DRIVING_MODE_COMFORT_CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_DRIVING_MODE_ECO_CHOICE (1u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_DRIVING_MODE_SPORT_CHOICE (2u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_DRIVING_MODE_RESERVE_CHOICE (3u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_WCM_SWITCH_NO_REQUEST___________CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_WCM_SWITCH_CLOSE_CHOICE (1u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_WCM_SWITCH_OPEN_CHOICE (2u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_WCM_SWITCH_ERROR_CHOICE (3u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_EPB_SWITCH________CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_EPB_SWITCH_IHU_____CHOICE (1u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_EPB_SWITCH_IHU_______________CHOICE (2u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_ENERGY_RECOVERY______0_CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_ENERGY_RECOVERY______1_CHOICE (1u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_ENERGY_RECOVERY______2_CHOICE (2u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_ENERGY_RECOVERY_RESERVE_CHOICE (3u)

#define MCU_233_IHU_VCU_2_F_AH_IHU_POW_BAT_DEEP_DISCHARGE_NO_REQUEST___________CHOICE (0u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_POW_BAT_DEEP_DISCHARGE_OPEN_CHOICE (1u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_POW_BAT_DEEP_DISCHARGE_CLOSE_CHOICE (2u)
#define MCU_233_IHU_VCU_2_F_AH_IHU_POW_BAT_DEEP_DISCHARGE_RESERVE_CHOICE (3u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_SPEED_WARN_MAX_SPEED_SET_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_SPEED_WARN_MAX_SPEED_SET_80KM_H_CHOICE (1u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_SPEED_WARN_MAX_SPEED_SET_90KM_H_CHOICE (2u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_SPEED_WARN_MAX_SPEED_SET_100KM_H_CHOICE (3u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_SPEED_WARN_MAX_SPEED_SET_110KM_H_CHOICE (4u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_SPEED_WARN_MAX_SPEED_SET_120KM_H_CHOICE (5u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_SPEED_WARN_MAX_SPEED_SET_130KM_H_CHOICE (6u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_SPEED_WARN_MAX_SPEED_SET_RESERVE_CHOICE (7u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_RESI_MILG_MODE_SET_NOMINAL_CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_RESI_MILG_MODE_SET_ACTUAL_CHOICE (1u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_THEME_DARK_CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_THEME_LIGHT_CHOICE (1u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_FATIGUE_DRIVING_WARN_NOREQUEST_CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_FATIGUE_DRIVING_WARN_FATIGUE_DRIVING_CHOICE (1u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_OVERSPEED_WARN_NOREQUEST_CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_OVERSPEED_WARN_OVERSPEED_CHOICE (1u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_ALARM_NO_ALARM_CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_ALARM_ALARM_CHOICE (1u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_STATE_INVALID_CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_STATE_CAMERA_SHELTER_CHOICE (1u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_STATE_FACE_SHELTER_CHOICE (2u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_STATE_RESERVE_CHOICE (3u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_DISTRACT_LVL_NORMAL_CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_DISTRACT_LVL_INVALID_CHOICE (1u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_DISTRACT_LVL_DISTRACT_CHOICE (2u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_DISTRACT_LVL_RESERVE_CHOICE (3u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_FATIGUED_LVL_NORMAL_CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_FATIGUED_LVL_INVALID_CHOICE (1u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_FATIGUED_LVL_LIGHT_FATIGUED_CHOICE (2u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_FATIGUED_LVL_MIDDLE_FATIGUED_CHOICE (3u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_FATIGUED_LVL_SERIOUS_FATIGUED_CHOICE (4u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_FATIGUE_DRIVING_WARNSET______CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_FATIGUE_DRIVING_WARNSET_1____0__2__2____________0__3__3____0__4__4____0__5__CHOICE (1u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_FATIGUE_DRIVING_WARNSET___RESERVED_CHOICE (7u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_UNIT_SET_KM_H_CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_UNIT_SET_MPH_H_CHOICE (1u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_LANGUANGE_SET_CHINA_CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_LANGUANGE_SET_ENGLISH_CHOICE (1u)

#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_VALID_INVALID_CHOICE (0u)
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_VALID_VALID_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_ELK_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_ELK_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_LDW_ALARM_SENSITIVITY_SET___RESERVED_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_LDW_ALARM_SENSITIVITY_SET___LOW_CHOICE (1u)
#define MCU_233_IHU_ADAS_2_FC_IHU_LDW_ALARM_SENSITIVITY_SET___MID_CHOICE (2u)
#define MCU_233_IHU_ADAS_2_FC_IHU_LDW_ALARM_SENSITIVITY_SET___HIGH_CHOICE (3u)

#define MCU_233_IHU_ADAS_2_FC_IHU_LDW_ALARM_METHOD_SET_DISPLAY_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_LDW_ALARM_METHOD_SET_DISPLAY__SOUND_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_LDW_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_LDW_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_FCW_AEB_ALARM_SENSITIVITY_SET___RESERVED_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_FCW_AEB_ALARM_SENSITIVITY_SET___LOW_CHOICE (1u)
#define MCU_233_IHU_ADAS_2_FC_IHU_FCW_AEB_ALARM_SENSITIVITY_SET___MID_CHOICE (2u)
#define MCU_233_IHU_ADAS_2_FC_IHU_FCW_AEB_ALARM_SENSITIVITY_SET___HIGH_CHOICE (3u)

#define MCU_233_IHU_ADAS_2_FC_IHU_FCW_AEB_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_FCW_AEB_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_SLWF_ALARM_METHOD_SOUND_OFF_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_SLWF_ALARM_METHOD_SOUND_ON_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_MOIS_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_MOIS_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_SLWF_ALARM_METHOD_SET_DISPLAY_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_SLWF_ALARM_METHOD_SET_DISPLAY__SOUND_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_SLWF_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_SLWF_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_SLIF_REMINDER_METHOD_SET___RESERVED_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_SLIF_REMINDER_METHOD_SET___LOUDNESS1_CHOICE (1u)
#define MCU_233_IHU_ADAS_2_FC_IHU_SLIF_REMINDER_METHOD_SET___LOUDNESS2_CHOICE (2u)
#define MCU_233_IHU_ADAS_2_FC_IHU_SLIF_REMINDER_METHOD_SET___MUTE_CHOICE (3u)

#define MCU_233_IHU_ADAS_2_FC_IHU_SLIF_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_SLIF_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_ELK_ALARM_METHOD_SET_DISPLAY_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_ELK_ALARM_METHOD_SET_DISPLAY__SOUND_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_BSD_LCW_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_BSD_LCW_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_DOW_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_DOW_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_ADAS_2_FC_IHU_BSIS_ALARM_METHOD_SET_DISPLAY_CHOICE (0u)
#define MCU_233_IHU_ADAS_2_FC_IHU_BSIS_ALARM_METHOD_SET_DISPLAY__SOUND_CHOICE (1u)

#define MCU_233_IHU_TIME_3_E3H_IHU_YEAR_TIME__2019_CHOICE (0u)
#define MCU_233_IHU_TIME_3_E3H_IHU_YEAR_TIME__2274_CHOICE (255u)

#define MCU_233_IHU_TIME_3_E3H_IHU_MONTH_TIME___JANUARY_CHOICE (0u)
#define MCU_233_IHU_TIME_3_E3H_IHU_MONTH_TIME___DECEMBER_CHOICE (11u)

#define MCU_233_IHU_TIME_3_E3H_IHU_DAY_TIME__DAY1_CHOICE (0u)
#define MCU_233_IHU_TIME_3_E3H_IHU_DAY_TIME__DAY31_CHOICE (30u)

#define MCU_233_IHU_TIME_3_E3H_IHU_HOUR_TIME__HOUR_0_CHOICE (0u)
#define MCU_233_IHU_TIME_3_E3H_IHU_HOUR_TIME__HOUR_23_CHOICE (23u)

#define MCU_233_IHU_TIME_3_E3H_IHU_MINUTE_TIME__MINTUE_0_CHOICE (0u)
#define MCU_233_IHU_TIME_3_E3H_IHU_MINUTE_TIME__MINTUE_59_CHOICE (59u)

#define MCU_233_IHU_TIME_3_E3H_IHU_SECOND_TIME__SECOND_0_CHOICE (0u)
#define MCU_233_IHU_TIME_3_E3H_IHU_SECOND_TIME__SECOND_59_CHOICE (59u)

#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_STATUS___NAVIGATION_ERROR_CHOICE (0u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_STATUS___LIMITED_SPEED_CHOICE (1u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_STATUS___NO_LIMITED_SPEED_CHOICE (2u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_STATUS___NO_DATA_CHOICE (3u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_STATUS__RESERVED_4_CHOICE (4u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_STATUS__RESERVED_5_CHOICE (5u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_STATUS__RESERVED_6_CHOICE (6u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_STATUS___INVALID_CHOICE (7u)

#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_UNITS___INVAILD_CHOICE (0u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_UNITS___KM_H_CHOICE (1u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_UNITS__MPH_CHOICE (2u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_UNITS___RESERVED_CHOICE (3u)

#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___INVALID_CHOICE (0u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___NO_LINIT_SPEED_CHOICE (1u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___DISPLAY_SPEED_LIMIT_CHOICE (2u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___CONDITIONAL_SPL_CHOICE (3u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___IMPLICIT_SPL_CHOICE (4u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___RESERVED_5_CHOICE (5u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___RESERVED_6_CHOICE (6u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___RESERVED_7_CHOICE (7u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___RESERVED_8_CHOICE (8u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___RESERVED_9_CHOICE (9u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___RESERVED_10_CHOICE (10u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___RESERVED_11_CHOICE (11u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___RESERVED_12_CHOICE (12u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___RESERVED_13_CHOICE (13u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___RESERVED_14_CHOICE (14u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE___RESERVED_15_CHOICE (15u)

#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE___INVALID_CHOICE (0u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE__FC1_CHOICE (1u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE__FC2_CHOICE (2u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE__FC3_CHOICE (3u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE__FC4__CHOICE (4u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE__FC5_CHOICE (5u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE___RESERVED_6_CHOICE (6u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE___RESERVED_7_CHOICE (7u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE___RESERVED_8_CHOICE (8u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE___RESERVED_9_CHOICE (9u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE___RESERVED_10_CHOICE (10u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE___RESERVED_11_CHOICE (11u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE___RESERVED_12_CHOICE (12u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE___RESERVED_13_CHOICE (13u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE___RESERVED_14_CHOICE (14u)
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE___RESERVED_15_CHOICE (15u)

#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___INVALID_CHOICE (0u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___RAIN_CHOICE (1u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___WETNESS_CHOICE (2u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___SNOW_CHOICE (3u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___ICY_CHOICE (4u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___FOG_CHOICE (5u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___TIME_CHOICE (6u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___SEASON_CHOICE (7u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___DISTANCE_FOR_CHOICE (8u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___DISTANCE_IN_CHOICE (9u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___VEHICLE__CATEGORY_CHOICE (10u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___RESERVED_11_CHOICE (11u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___RESERVED_12_CHOICE (12u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___RESERVED_13_CHOICE (13u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___RESERVED_14_CHOICE (14u)
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE___RESERVED_15_CHOICE (15u)

#define MCU_233_NAV_2_F2H_NAV_ENTER_RAMP___NOT_ENTERED_CHOICE (0u)
#define MCU_233_NAV_2_F2H_NAV_ENTER_RAMP___ON_THE_GATEWAY_____1KM_________________CHOICE (1u)
#define MCU_233_NAV_2_F2H_NAV_ENTER_RAMP___ON_THE_GATEWAY_____1KM___________________CHOICE (2u)
#define MCU_233_NAV_2_F2H_NAV_ENTER_RAMP___INVALID_CHOICE (3u)

#define MCU_233_NAV_2_F3H_NAV_ROUNDABOUT_DIST___INVALID_CHOICE (511u)

#define MCU_233_NAV_2_F3H_NAV_JUNCTION_DIST___INVALID_CHOICE (511u)

#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___NO_MARK_CHOICE (0u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___TRAFFIC__LIGHTS_CHOICE (1u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___STOP__SIGNS_CHOICE (2u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___YIELD__SIGNS__CHOICE (3u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___NO__ENTRY_CHOICE (4u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___RESERVED_5_CHOICE (5u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___RESERVED_6_CHOICE (6u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___RESERVED_7_CHOICE (7u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___RESERVED_8_CHOICE (8u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___RESERVED_9_CHOICE (9u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___RESERVED_10_CHOICE (10u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___RESERVED_11_CHOICE (11u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___RESERVED_12_CHOICE (12u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___RESERVED_13_CHOICE (13u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___RESERVED_14_CHOICE (14u)
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN___INVALID_CHOICE (15u)

#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN_DIST___INVALID_CHOICE (511u)

#define MCU_233_NAV_2_F3H_NAV_ROAD_WINDING___INVALID_CHOICE (255u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_LEAVING_CAR_LOCK_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_LEAVING_CAR_LOCK_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_DOOR_LOCK_SET_DRIVER__PASSENGER__DOOR_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_DOOR_LOCK_SET_ALL__DOOR_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_CHILD_LOCK_SWITCH_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_CHILD_LOCK_SWITCH_LO_CK_CHOICE (1u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_CHILD_LOCK_SWITCH_UNLO_CK_CHOICE (2u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_CHILD_LOCK_SWITCH_RESERVED_CHOICE (3u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_IP_LIGHT_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_IP_LIGHT_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_APL_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_APL_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_MODE_SELECT_SWITCH_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_MODE_SELECT_SWITCH_VENTILATION_MODE_____________CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_MIR_FOLD_HEAT_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_MIR_FOLD_HEAT_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_WINDSCREEN_HEAT_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_WINDSCREEN_HEAT_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_LOCK_PROMPT_SWITCH_OFF_________CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_LOCK_PROMPT_SWITCH_ON______________CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_FOLLOW_ME_TIME_SET_OFF_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_FOLLOW_ME_TIME_SET_30S_CHOICE (1u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_FOLLOW_ME_TIME_SET_60S_CHOICE (2u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_FOLLOW_ME_TIME_SET_90S_CHOICE (3u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_FOLLOW_ME_TIME_SET_120S_CHOICE (4u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_LOGO_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_LOGO_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_ELECTRIC_SLIDING_DOOR_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_ELECTRIC_SLIDING_DOOR_CLOSE_CHOICE (1u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_ELECTRIC_SLIDING_DOOR_OPEN_CHOICE (2u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_ELECTRIC_SLIDING_DOOR_ERROR_CHOICE (3u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_SEARCH_VEHICLE_METHOD_LIGHTING__WHISTLE_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_SEARCH_VEHICLE_METHOD_LIGHTING_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_D_F_RW_AUTO_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_D_F_RW_AUTO_CLOSE_CHOICE (1u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_D_F_RW_AUTO_OPEN_CHOICE (2u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_D_F_RW_AUTO_ERROR_CHOICE (3u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_D_F_LW_AUTO_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_D_F_LW_AUTO_CLOSE_CHOICE (1u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_D_F_LW_AUTO_OPEN_CHOICE (2u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_D_F_LW_AUTO_ERROR_CHOICE (3u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_VEHICLE_POWER_MODE_SET_NO__REQUEST_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_VEHICLE_POWER_MODE_SET_NORMAL_CHOICE (1u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_VEHICLE_POWER_MODE_SET_INTELLIGENT_CHOICE (2u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_VEHICLE_POWER_MODE_SET_RESERVE_CHOICE (3u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_DOOR_CENT_LOCK_SET_NO_REQUEST_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_DOOR_CENT_LOCK_SET_LOCK_CHOICE (1u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_DOOR_CENT_LOCK_SET_UNLOCK_CHOICE (2u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_DOOR_CENT_LOCK_SET_RESERVED_CHOICE (3u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_LOCK_CAR_CLOSE_WINDOW_SET_OFF_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_LOCK_CAR_CLOSE_WINDOW_SET_ON_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_FOLLOW_ME_CAR_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_FOLLOW_ME_CAR_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_WELCOME_FEATURE_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_WELCOME_FEATURE_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_STEERING_WHEEL_HEATING_OFF_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_STEERING_WHEEL_HEATING_ON_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_CLOSING_CAR_LOCK_SWITCH_OFF_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_CLOSING_CAR_LOCK_SWITCH_ON_CHOICE (1u)

#define MCU_233_IHU_BCM_2_F_BH_IHU_DELAY_POWER_OFF_KEEP__TIME_CHOICE (0u)
#define MCU_233_IHU_BCM_2_F_BH_IHU_DELAY_POWER_OFF_TIME_S__UP_CHOICE (1u)

#define MCU_233_IHU_ESC_255H_AUTOHOLD_WITCHSETTINGS___OFF_CHOICE (0u)
#define MCU_233_IHU_ESC_255H_AUTOHOLD_WITCHSETTINGS___STANDBY__CHOICE (1u)
#define MCU_233_IHU_ESC_255H_AUTOHOLD_WITCHSETTINGS___ACTIVE_CHOICE (2u)
#define MCU_233_IHU_ESC_255H_AUTOHOLD_WITCHSETTINGS___RESERVED_CHOICE (3u)

#define MCU_233_TBOX_ACMM_213H_TBOX_DEFROST_SWITCH_NO_REQUEST_CHOICE (0u)
#define MCU_233_TBOX_ACMM_213H_TBOX_DEFROST_SWITCH_OFF_CHOICE (1u)
#define MCU_233_TBOX_ACMM_213H_TBOX_DEFROST_SWITCH_ON_CHOICE (2u)
#define MCU_233_TBOX_ACMM_213H_TBOX_DEFROST_SWITCH_RESERVED_CHOICE (3u)

#define MCU_233_TBOX_ACMM_213H_TBOX_MAIN_SWTICH_NO_REQUEST_CHOICE (0u)
#define MCU_233_TBOX_ACMM_213H_TBOX_MAIN_SWTICH_OFF_CHOICE (1u)
#define MCU_233_TBOX_ACMM_213H_TBOX_MAIN_SWTICH_ON_CHOICE (2u)
#define MCU_233_TBOX_ACMM_213H_TBOX_MAIN_SWTICH_RESERVED_CHOICE (3u)

#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV_NO_REQUEST_CHOICE (0u)
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV_LOW_CHOICE (1u)
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV______2_CHOICE (2u)
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV_____0_X4_CHOICE (3u)
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV______5_CHOICE (5u)
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV______6_CHOICE (6u)
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV______7_CHOICE (7u)
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV______8_CHOICE (8u)
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV______9_CHOICE (9u)
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV______10_CHOICE (10u)
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV______11_CHOICE (11u)
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV_HI_CHOICE (12u)

#define MCU_233_TBOX_ACMM_213H_TBOX_MAXPTC_NO_REQUEST_CHOICE (0u)
#define MCU_233_TBOX_ACMM_213H_TBOX_MAXPTC_OFF_CHOICE (1u)
#define MCU_233_TBOX_ACMM_213H_TBOX_MAXPTC_ON_CHOICE (2u)
#define MCU_233_TBOX_ACMM_213H_TBOX_MAXPTC_RESERVED_CHOICE (3u)

#define MCU_233_TBOX_ACMM_213H_TBOX_MAXAC_NO_REQUEST_CHOICE (0u)
#define MCU_233_TBOX_ACMM_213H_TBOX_MAXAC_OFF_CHOICE (1u)
#define MCU_233_TBOX_ACMM_213H_TBOX_MAXAC_ON_CHOICE (2u)
#define MCU_233_TBOX_ACMM_213H_TBOX_MAXAC_RESERVED_CHOICE (3u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_W_AUTO_SWICH_NO_REQUEST_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_W_AUTO_SWICH_CLOSE_CHOICE (1u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_W_AUTO_SWICH_OPEN_CHOICE (2u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_W_AUTO_SWICH_ERROR_CHOICE (3u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_DOOR_LOCK_STS_NO_REQUEST_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_DOOR_LOCK_STS_CLOSE_CHOICE (1u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_DOOR_LOCK_STS_OPEN_CHOICE (2u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_DOOR_LOCK_STS_ERROR_CHOICE (3u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_REMOTE_POWER_ON_NO_REQUEST_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_REMOTE_POWER_ON_ON_CHOICE (1u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_REMOTE_POWER_ON_RESERVED_CHOICE (3u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_REMOTE_POWER_OFF_NO_REQUEST_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_REMOTE_POWER_OFF_ON_CHOICE (1u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_REMOTE_POWER_OFF_RESERVED_CHOICE (3u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_BT_KEY_EXIST___OFF_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_BT_KEY_EXIST___ON_CHOICE (1u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_SEARCH_VEHICLE_REQ_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SEARCH_VEHICLE_REQ_ACTIVE_CHOICE (1u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_WINDOW_VENTILATION_SWITCH_NO_REQUEST_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_WINDOW_VENTILATION_SWITCH_CLOSE_CHOICE (1u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_WINDOW_VENTILATION_SWITCH_OPEN_CHOICE (2u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_WINDOW_VENTILATION_SWITCH_ERROR_CHOICE (3u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_D_F_RW_AUTO_INVALID_VALUE_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_D_F_RW_AUTO_CLOSE_CHOICE (1u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_D_F_RW_AUTO_OPEN_CHOICE (2u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_D_F_RW_AUTO_ERROR_CHOICE (3u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_D_F_LW_AUTO_INVALID_VALUE_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_D_F_LW_AUTO_CLOSE_CHOICE (1u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_D_F_LW_AUTO_OPEN_CHOICE (2u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_D_F_LW_AUTO_ERROR_CHOICE (3u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_OTA_POWER_ON_NO__REQUEST_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_OTA_POWER_ON_ON_CHOICE (1u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_OTA_POWER_ON_RESERVED_CHOICE (3u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_HEAT_LEVEL_D___NOT__ACTIVE_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_HEAT_LEVEL_D_OFF_CHOICE (1u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_HEAT_LEVEL_D_LOW_CHOICE (2u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_HEAT_LEVEL_D_MID_CHOICE (3u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_HEAT_LEVEL_D_HIGH_CHOICE (4u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_HEAT_LEVEL_D_RESERVED_CHOICE (7u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_FAN_LEVEL_D___NOT__ACTIVE_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_FAN_LEVEL_D_OFF_CHOICE (1u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_FAN_LEVEL_D_LOW_CHOICE (2u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_FAN_LEVEL_D_MID_CHOICE (3u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_FAN_LEVEL_D_HIGH_CHOICE (4u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_FAN_LEVEL_D_RESERVED_CHOICE (7u)

#define MCU_233_TBOX_BCM_2_F1H_TBOX_OTA_POWER_OFF_NO__REQUEST_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_OTA_POWER_OFF_ON_CHOICE (1u)
#define MCU_233_TBOX_BCM_2_F1H_TBOX_OTA_POWER_OFF_RESERVED_CHOICE (3u)

#define MCU_233_TBOX_BCM_2_F5H_T_BOX_REM_AUTHENTICATION_RQ_NO__REQUEST_CHOICE (0u)
#define MCU_233_TBOX_BCM_2_F5H_T_BOX_REM_AUTHENTICATION_RQ_ON__REQUEST_TO_BCM_CHOICE (1u)
#define MCU_233_TBOX_BCM_2_F5H_T_BOX_REM_AUTHENTICATION_RQ_ON__REQUEST_TO_PEPS_CHOICE (2u)
#define MCU_233_TBOX_BCM_2_F5H_T_BOX_REM_AUTHENTICATION_RQ_RESERVED_CHOICE (3u)

#define MCU_233_IHU_NM_40_AH_NM_SLEEP_ACK_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_IHU_NM_40_AH_NM_SLEEP_ACK_ACTIVE_CHOICE (1u)

#define MCU_233_IHU_NM_40_AH_NM_SLEEP_IND_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_IHU_NM_40_AH_NM_SLEEP_IND_ACTIVE_CHOICE (1u)

#define MCU_233_IHU_NM_40_AH_NM_LIMPHOME_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_IHU_NM_40_AH_NM_LIMPHOME_ACTIVE_CHOICE (1u)

#define MCU_233_IHU_NM_40_AH_NM_RING_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_IHU_NM_40_AH_NM_RING_ACTIVE_CHOICE (1u)

#define MCU_233_IHU_NM_40_AH_NM_ALIVE_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_IHU_NM_40_AH_NM_ALIVE_ACTIVE_CHOICE (1u)

#define MCU_233_TBOX_NM_410H_NM_SLEEP_ACK_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_TBOX_NM_410H_NM_SLEEP_ACK_ACTIVE_CHOICE (1u)

#define MCU_233_TBOX_NM_410H_NM_SLEEP_IND_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_TBOX_NM_410H_NM_SLEEP_IND_ACTIVE_CHOICE (1u)

#define MCU_233_TBOX_NM_410H_NM_LIMPHOME_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_TBOX_NM_410H_NM_LIMPHOME_ACTIVE_CHOICE (1u)

#define MCU_233_TBOX_NM_410H_NM_RING_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_TBOX_NM_410H_NM_RING_ACTIVE_CHOICE (1u)

#define MCU_233_TBOX_NM_410H_NM_ALIVE_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_TBOX_NM_410H_NM_ALIVE_ACTIVE_CHOICE (1u)

#define MCU_233_CGW_NM_402H_NM_SLEEP_ACK_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_CGW_NM_402H_NM_SLEEP_ACK_ACTIVE_CHOICE (1u)

#define MCU_233_CGW_NM_402H_NM_SLEEP_IND_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_CGW_NM_402H_NM_SLEEP_IND_ACTIVE_CHOICE (1u)

#define MCU_233_CGW_NM_402H_NM_LIMPHOME_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_CGW_NM_402H_NM_LIMPHOME_ACTIVE_CHOICE (1u)

#define MCU_233_CGW_NM_402H_NM_RING_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_CGW_NM_402H_NM_RING_ACTIVE_CHOICE (1u)

#define MCU_233_CGW_NM_402H_NM_ALIVE_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_CGW_NM_402H_NM_ALIVE_ACTIVE_CHOICE (1u)

#define MCU_233_ESCL_STATUS_031H_ESCL_FAILURE_STATUS_NO__WARNING_CHOICE (0u)
#define MCU_233_ESCL_STATUS_031H_ESCL_FAILURE_STATUS___LOCK__FAILURE_CHOICE (1u)
#define MCU_233_ESCL_STATUS_031H_ESCL_FAILURE_STATUS___UNLOCK__FAILURE_CHOICE (2u)
#define MCU_233_ESCL_STATUS_031H_ESCL_FAILURE_STATUS_RESERVED_CHOICE (3u)

#define MCU_233_ESCL_STATUS_031H_ESCL_AUTHENTICATION_FAILURE_NO__ERROR_CHOICE (0u)
#define MCU_233_ESCL_STATUS_031H_ESCL_AUTHENTICATION_FAILURE_PROTECT__MODE_CHOICE (1u)
#define MCU_233_ESCL_STATUS_031H_ESCL_AUTHENTICATION_FAILURE_WARNING_AUTHENTIFICATION_CHOICE (2u)
#define MCU_233_ESCL_STATUS_031H_ESCL_AUTHENTICATION_FAILURE_RESERVED_CHOICE (3u)

#define MCU_233_ESCL_STATUS_031H_ESCL_LOCK_LIMIT_SW_LOCK_CHOICE (0u)
#define MCU_233_ESCL_STATUS_031H_ESCL_LOCK_LIMIT_SW___NOT__LOCK_CHOICE (1u)
#define MCU_233_ESCL_STATUS_031H_ESCL_LOCK_LIMIT_SW_RESERVED_CHOICE (3u)

#define MCU_233_ESCL_STATUS_031H_ESCL_UNLOCK_LIMIT_SW_UN_LOCK_CHOICE (0u)
#define MCU_233_ESCL_STATUS_031H_ESCL_UNLOCK_LIMIT_SW___NOT__UN_LOCK_CHOICE (1u)
#define MCU_233_ESCL_STATUS_031H_ESCL_UNLOCK_LIMIT_SW_RESERVED_CHOICE (3u)

#define MCU_233_ESCL_STATUS_031H_ESCL_LOCK_SWITCH_FAILURE_OFF_CHOICE (0u)
#define MCU_233_ESCL_STATUS_031H_ESCL_LOCK_SWITCH_FAILURE_ON_CHOICE (1u)

#define MCU_233_ESCL_STATUS_031H_ESCL_DIAG_FAILURE_OFF_CHOICE (0u)
#define MCU_233_ESCL_STATUS_031H_ESCL_DIAG_FAILURE_ON_CHOICE (1u)

#define MCU_233_ESCL_STATUS_031H_ESCL_BOLT_BLOCKED_STATUS_OFF_CHOICE (0u)
#define MCU_233_ESCL_STATUS_031H_ESCL_BOLT_BLOCKED_STATUS_ON_CHOICE (1u)

#define MCU_233_ESCL_STATUS_031H_ESCL_NM_USR_DATA3_OFF_CHOICE (0u)
#define MCU_233_ESCL_STATUS_031H_ESCL_NM_USR_DATA3_ON_CHOICE (1u)

#define MCU_233_ESCL_STATUS_031H_ESCL_MORTOR_OPEN_FAILURE_OFF_CHOICE (0u)
#define MCU_233_ESCL_STATUS_031H_ESCL_MORTOR_OPEN_FAILURE_ON_CHOICE (1u)

#define MCU_233_ESCL_STATUS_031H_ESCL_UNLOCK_SWITCH_PARTICLE_FAILURE_OFF_CHOICE (0u)
#define MCU_233_ESCL_STATUS_031H_ESCL_UNLOCK_SWITCH_PARTICLE_FAILURE_ON_CHOICE (1u)

#define MCU_233_ESCL_STATUS_031H_ESCL_LOCK_SWITCH_PARTICLE_FAILURE_OFF_CHOICE (0u)
#define MCU_233_ESCL_STATUS_031H_ESCL_LOCK_SWITCH_PARTICLE_FAILURE_ON_CHOICE (1u)

#define MCU_233_ESCL_STATUS_031H_ESCL_UNLOCK_SWITCH_FAILURE_OFF_CHOICE (0u)
#define MCU_233_ESCL_STATUS_031H_ESCL_UNLOCK_SWITCH_FAILURE_ON_CHOICE (1u)

#define MCU_233_ESCL_NM_405H_NM_SLEEP_ACK_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ESCL_NM_405H_NM_SLEEP_ACK_ACTIVE_CHOICE (1u)

#define MCU_233_ESCL_NM_405H_NM_SLEEP_IND_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ESCL_NM_405H_NM_SLEEP_IND_ACTIVE_CHOICE (1u)

#define MCU_233_ESCL_NM_405H_NM_LIMPHOME_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ESCL_NM_405H_NM_LIMPHOME_ACTIVE_CHOICE (1u)

#define MCU_233_ESCL_NM_405H_NM_RING_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ESCL_NM_405H_NM_RING_ACTIVE_CHOICE (1u)

#define MCU_233_ESCL_NM_405H_NM_ALIVE_NOT__ACTIVE_CHOICE (0u)
#define MCU_233_ESCL_NM_405H_NM_ALIVE_ACTIVE_CHOICE (1u)

#define MCU_233_CCS_2_F7H_CCS_TEM_SET_NOT__PRESSED_CHOICE (0u)
#define MCU_233_CCS_2_F7H_CCS_TEM_SET______1_CHOICE (1u)
#define MCU_233_CCS_2_F7H_CCS_TEM_SET______2_CHOICE (2u)
#define MCU_233_CCS_2_F7H_CCS_TEM_SET_RESERVED_CHOICE (3u)

#define MCU_233_CCS_2_F7H_CCS_AC_SWITCH_NOT__PRESSED_CHOICE (0u)
#define MCU_233_CCS_2_F7H_CCS_AC_SWITCH_PRESSED_CHOICE (1u)

#define MCU_233_CCS_2_F7H_CCS_DEFROST_SWITCH_NOT__PRESSED_CHOICE (0u)
#define MCU_233_CCS_2_F7H_CCS_DEFROST_SWITCH_PRESSED_CHOICE (1u)

#define MCU_233_CCS_2_F7H_CCS_CYCLE_SWITCH_NOT__PRESSED_CHOICE (0u)
#define MCU_233_CCS_2_F7H_CCS_CYCLE_SWITCH_PRESSED_CHOICE (1u)

#define MCU_233_CCS_2_F7H_CCS_AUTO_SWITCH_NOT__PRESSED_CHOICE (0u)
#define MCU_233_CCS_2_F7H_CCS_AUTO_SWITCH_PRESSED_CHOICE (1u)

#define MCU_233_CCS_2_F7H_CCS_MAIN_SWTICH_NOT__PRESSED_CHOICE (0u)
#define MCU_233_CCS_2_F7H_CCS_MAIN_SWTICH_PRESSED_CHOICE (1u)

#define MCU_233_CCS_2_F7H_CCS_BLOWERL_LVL_SET_NOT__PRESSED_CHOICE (0u)
#define MCU_233_CCS_2_F7H_CCS_BLOWERL_LVL_SET______1_CHOICE (1u)
#define MCU_233_CCS_2_F7H_CCS_BLOWERL_LVL_SET______2_CHOICE (2u)
#define MCU_233_CCS_2_F7H_CCS_BLOWERL_LVL_SET_RESERVED_CHOICE (3u)

#define MCU_233_PSD_188H_PSD_CHILDLOCKSTATUS____________0_CHOICE (0u)
#define MCU_233_PSD_188H_PSD_CHILDLOCKSTATUS____________1_CHOICE (1u)

#define MCU_233_PSD_288H_PSD_VOICE_CONTROL_RESERVED_CHOICE (0u)
#define MCU_233_PSD_288H_PSD_VOICE_CONTROL______CHOICE (1u)
#define MCU_233_PSD_288H_PSD_VOICE_CONTROL_____0__03___RESERVED_CHOICE (2u)

/* Frame Names. */
#define MCU_233_VCU_103H_NAME "VCU_103h"
#define MCU_233_VCU_200H_NAME "VCU_200h"
#define MCU_233_VCU_ICM_3_F_DH_NAME "VCU_ICM_3FDh"
#define MCU_233_VCU_106H_NAME "VCU_106h"
#define MCU_233_VCU_18_FH_NAME "VCU_18Fh"
#define MCU_233_VCU_520H_NAME "VCU_520h"
#define MCU_233_VCU_526H_NAME "VCU_526h"
#define MCU_233_VCU_IHU_2_F_EH_NAME "VCU_IHU_2FEh"
#define MCU_233_VCU_PEPS_527H_NAME "VCU_PEPS_527h"
#define MCU_233_SSW_120H_NAME "SSW_120h"
#define MCU_233_BMS_099H_NAME "BMS_099h"
#define MCU_233_BMS_243H_NAME "BMS_243h"
#define MCU_233_BMS_244H_NAME "BMS_244h"
#define MCU_233_BMS_246H_NAME "BMS_246h"
#define MCU_233_BMS_249H_NAME "BMS_249h"
#define MCU_233_BMS_252H_NAME "BMS_252h"
#define MCU_233_BMS_254H_NAME "BMS_254h"
#define MCU_233_BMS_PACK1_260H_NAME "BMS_PACK1_260h"
#define MCU_233_BMS_PACK1_262H_NAME "BMS_PACK1_262h"
#define MCU_233_BMS_PACK1_268H_NAME "BMS_PACK1_268h"
#define MCU_233_BMS_PACK1_26_CH_NAME "BMS_PACK1_26Ch"
#define MCU_233_BMS_3_E1H_NAME "BMS_3E1h"
#define MCU_233_FVB_521H_NAME "FVB_521h"
#define MCU_233_MCU_097H_NAME "MCU_097h"
#define MCU_233_MCU_098H_NAME "MCU_098h"
#define MCU_233_MCU_26_EH_NAME "MCU_26Eh"
#define MCU_233_MCU_3_E5H_NAME "MCU_3E5h"
#define MCU_233_EOP_1_A0H_NAME "EOP_1A0h"
#define MCU_233_DCDC_1_F7H_NAME "DCDC_1F7h"
#define MCU_233_BOBC_2_E8H_NAME "BOBC_2E8h"
#define MCU_233_BOBC_297H_NAME "BOBC_297h"
#define MCU_233_EPS_117H_NAME "EPS_117h"
#define MCU_233_EPS_131H_NAME "EPS_131h"
#define MCU_233_EHB_13_AH_NAME "EHB_13Ah"
#define MCU_233_EHB_13_CH_NAME "EHB_13Ch"
#define MCU_233_EHB_13_BH_NAME "EHB_13Bh"
#define MCU_233_ESC_101H_NAME "ESC_101h"
#define MCU_233_ESC_102H_NAME "ESC_102h"
#define MCU_233_ESC_104H_NAME "ESC_104h"
#define MCU_233_ESC_109H_NAME "ESC_109h"
#define MCU_233_ESC_125H_NAME "ESC_125h"
#define MCU_233_ESC_126H_NAME "ESC_126h"
#define MCU_233_ESC_108H_NAME "ESC_108h"
#define MCU_233_ESC_10_CH_NAME "ESC_10Ch"
#define MCU_233_ADAS_CAM_107H_NAME "ADAS_CAM_107h"
#define MCU_233_ADAS_CAM_10_AH_NAME "ADAS_CAM_10Ah"
#define MCU_233_ADAS_CAM_118H_NAME "ADAS_CAM_118h"
#define MCU_233_ADAS_CAM_140H_NAME "ADAS_CAM_140h"
#define MCU_233_ADAS_CAM_318H_NAME "ADAS_CAM_318h"
#define MCU_233_ADAS_RAD_070H_NAME "ADAS_RAD_070h"
#define MCU_233_ADAS_RL_RAD_071H_NAME "ADAS_RL_RAD_071h"
#define MCU_233_ADAS_RR_RAD_02_BH_NAME "ADAS_RR_RAD_02Bh"
#define MCU_233_ADAS_NM_406H_NAME "ADAS_NM_406h"
#define MCU_233_ADAS_NM_408H_NAME "ADAS_NM_408h"
#define MCU_233_ACU_021H_NAME "ACU_021h"
#define MCU_233_VCU_119H_NAME "VCU_119h"
#define MCU_233_VCU_123H_NAME "VCU_123h"
#define MCU_233_VCU_251H_NAME "VCU_251h"
#define MCU_233_VCU_201H_NAME "VCU_201h"
#define MCU_233_ACMM_IHU_301H_NAME "ACMM_IHU_301h"
#define MCU_233_ACMM_IHU_302H_NAME "ACMM_IHU_302h"
#define MCU_233_ACMM_PTC_303H_NAME "ACMM_PTC_303h"
#define MCU_233_ACMM_EAC_304H_NAME "ACMM_EAC_304h"
#define MCU_233_ACMM_307H_NAME "ACMM_307h"
#define MCU_233_ACMM_308H_NAME "ACMM_308h"
#define MCU_233_ACMM_331H_NAME "ACMM_331h"
#define MCU_233_ACMM_332H_NAME "ACMM_332h"
#define MCU_233_ACMM_333H_NAME "ACMM_333h"
#define MCU_233_ACMM_334H_NAME "ACMM_334h"
#define MCU_233_ACMM_FR34_CC_335H_NAME "ACMM_FR34CC_335h"
#define MCU_233_ACMM_RR45_CC_336H_NAME "ACMM_RR45CC_336h"
#define MCU_233_SMM_2_F4H_NAME "SMM_2F4h"
#define MCU_233_ICM_3_F_EH_NAME "ICM_3FEh"
#define MCU_233_ICM_NM_412H_NAME "ICM_NM_412h"
#define MCU_233_VSP_283H_NAME "VSP_283h"
#define MCU_233_WCM_347H_NAME "WCM_347h"
#define MCU_233_BCM_211H_NAME "BCM_211h"
#define MCU_233_BCM_105H_NAME "BCM_105h"
#define MCU_233_BCM_112H_NAME "BCM_112h"
#define MCU_233_BCM_113H_NAME "BCM_113h"
#define MCU_233_BCM_111H_NAME "BCM_111h"
#define MCU_233_BCM_114H_NAME "BCM_114h"
#define MCU_233_BCM_212H_NAME "BCM_212h"
#define MCU_233_BCM_VCU_AUTH_022H_NAME "BCM_VCU_Auth_022h"
#define MCU_233_BCM_TBOX_AUTH_024H_NAME "BCM_TBOX_Auth_024h"
#define MCU_233_BCM_ESCL_AUTH_025H_NAME "BCM_ESCL_Auth_025h"
#define MCU_233_BCM_NM_404H_NAME "BCM_NM_404h"
#define MCU_233_FSW_3_C1H_NAME "FSW_3C1h"
#define MCU_233_SWH_STATE_3_C2H_NAME "SWH_State_3C2h"
#define MCU_233_IHU_ACMM_2_F9H_NAME "IHU_ACMM_2F9h"
#define MCU_233_IHU_VCU_2_F_AH_NAME "IHU_VCU_2FAh"
#define MCU_233_IHU_ICM_2_F_FH_NAME "IHU_ICM_2FFh"
#define MCU_233_IHU_ADAS_2_FC_NAME "IHU_ADAS_2FC"
#define MCU_233_IHU_TIME_3_E3H_NAME "IHU_TIME_3E3h"
#define MCU_233_NAV_2_F2H_NAME "Nav_2F2h"
#define MCU_233_NAV_2_F3H_NAME "Nav_2F3h"
#define MCU_233_IHU_BCM_2_F_BH_NAME "IHU_BCM_2FBh"
#define MCU_233_IHU_ESC_255H_NAME "IHU_ESC_255h"
#define MCU_233_TBOX_ACMM_213H_NAME "TBOX_ACMM_213h"
#define MCU_233_TBOX_BCM_2_F1H_NAME "TBOX_BCM_2F1h"
#define MCU_233_TBOX_BCM_2_F5H_NAME "TBOX_BCM_2F5h"
#define MCU_233_IHU_NM_40_AH_NAME "IHU_NM_40Ah"
#define MCU_233_TBOX_NM_410H_NAME "TBOX_NM_410h"
#define MCU_233_CGW_NM_402H_NAME "CGW_NM_402h"
#define MCU_233_ESCL_STATUS_031H_NAME "ESCL_Status_031h"
#define MCU_233_ESCL_CERTIFICATION_032H_NAME "ESCL_Certification_032h"
#define MCU_233_ESCL_NM_405H_NAME "ESCL_NM_405h"
#define MCU_233_CCS_2_F7H_NAME "CCS_2F7h"
#define MCU_233_PSD_188H_NAME "PSD_188h"
#define MCU_233_PSD_288H_NAME "PSD_288h"

/* Signal Names. */
#define MCU_233_VCU_103H_VCU_HV_BAT_MD_REQ_NAME "VCU_HVBatMdReq"
#define MCU_233_VCU_103H_VCU_DISCHARGE_ALW_NAME "VCU_DischargeAlw"
#define MCU_233_VCU_103H_VCU_CHARGE_ALW_NAME "VCU_ChargeAlw"
#define MCU_233_VCU_103H_VCU_DCDC_WAKEUO_SLEEP_CTRL_NAME "VCU_DCDCWakeuoSleepCtrl"
#define MCU_233_VCU_103H_VCU_DCDC_MD_REQ_NAME "VCU_DCDCMdReq"
#define MCU_233_VCU_103H_VCU_MCU_TARGE_SPD_REQ_NAME "VCU_MCUTargeSpdReq"
#define MCU_233_VCU_103H_VCU_MCU_TARGET_TOQ_REQ_NAME "VCU_MCUTargetToqReq"
#define MCU_233_VCU_103H_VCU_BOBC_WAKEUP_SLEEP_CTRL_NAME "VCU_BOBCWakeupSleepCtrl"
#define MCU_233_VCU_103H_VCU_OBC_WAKEUP_SLEEP_CTRL_NAME "VCU_OBCWakeupSleepCtrl"
#define MCU_233_VCU_103H_VCU_VTMS_WAKEUP_SLEEP_CTRL_NAME "VCU_VTMSWakeupSleepCtrl"
#define MCU_233_VCU_103H_VCU_MCU_ANTI_SHAKE_NAME "VCU_MCUAntiShake"
#define MCU_233_VCU_103H_VCU_MCU_SLEEP_CMD_NAME "VCU_MCUSleepCmd"
#define MCU_233_VCU_103H_VCU_MOT_WORKING_MODE_REQ_NAME "VCU_MotWorkingModeReq"
#define MCU_233_VCU_103H_VCU_APP_SEC_RELAY_REQ_NAME "VCU_AppSecRelayReq"
#define MCU_233_VCU_103H_VCU_APP_FIR_RELAY_REQ_NAME "VCU_AppFirRelayReq"
#define MCU_233_VCU_103H_VCU_BMS_EXTRA_RANGE_NAME "VCU_BMSExtraRange"
#define MCU_233_VCU_103H_VCU_BMS_HEAT_PRESE_REQ_NAME "VCU_BMSHeatPreseReq"
#define MCU_233_VCU_103H_VCU_MCU_DISCHARGE_REQ_NAME "VCU_MCUDischargeReq"
#define MCU_233_VCU_103H_VCU_MC_UENABLED_HHC_NAME "VCU_MCUenabledHHC"
#define MCU_233_VCU_103H_VCU_103_ROLLING_COUNTER_NAME "VCU_103_RollingCounter"
#define MCU_233_VCU_103H_VCU_103_CHECK_SUM_NAME "VCU_103_CheckSum"
#define MCU_233_VCU_200H_VCU_DRIVE_MODE_NAME "VCU_DriveMode"
#define MCU_233_VCU_200H_VCU_PT_RDY_NAME "VCU_PtRdy"
#define MCU_233_VCU_200H_VCU_SHIFT_LEVEL_POSITION_NAME "VCU_ShiftLevelPosition"
#define MCU_233_VCU_200H_VCU_CAN_COM_FLT_NAME "VCU_CANComFlt"
#define MCU_233_VCU_200H_VCU_HVIL_CLSD_FLT_NAME "VCU_HVILClsdFlt"
#define MCU_233_VCU_200H_VCU_ACCIDENTLY_DISCON_NAME "VCU_Accidently_Discon"
#define MCU_233_VCU_200H_VCU_SYS_FAULEV_NAME "VCU_SysFaulev"
#define MCU_233_VCU_200H_VCU_SCURT_AUTHN_FAIL_REASON_NAME "VCU_ScurtAuthnFailReason"
#define MCU_233_VCU_200H_VCU_CHRGNG_CNCTD_STS_NAME "VCU_ChrgngCnctdSts"
#define MCU_233_VCU_200H_VCU_VEH_CHARGE_STS_NAME "VCU_VehChargeSts"
#define MCU_233_VCU_200H_VCU_VEH_MODE_NAME "VCU_VehMode"
#define MCU_233_VCU_200H_VCU_VCU_ERR_LV_NAME "VCU_VCUErrLv"
#define MCU_233_VCU_200H_VCU_GEAR_CONTROL_MODULE_NAME "VCU_Gear_Control_module"
#define MCU_233_VCU_200H_VCU_TORQUE_CONTROL_MODULE_NAME "VCU_Torque_Control_module"
#define MCU_233_VCU_200H_VCU_VEH_REAL_T_EGY_CNSE_NAME "VCU_VehRealTEgyCnse"
#define MCU_233_VCU_200H_VCU_INLET_ELECTRONIC_LOCK_STS_NAME "VCU_InletElectronicLockSts"
#define MCU_233_VCU_200H_VCU_INTELLIGENT_RECHARGE_STS_NAME "VCU_IntelligentRechargeSts"
#define MCU_233_VCU_200H_VCU_VEH_STATUS_NAME "VCU_VehStatus"
#define MCU_233_VCU_200H_VCU_BRAKE_CONTROL_MODULE_NAME "VCU_Brake_Control_module"
#define MCU_233_VCU_200H_VCU_INLET_ELECTRONIC_LOCK_REQ_NAME "VCU_InletElectronicLockReq"
#define MCU_233_VCU_200H_VCU_200_ROLLING_COUNTER_NAME "VCU_200_RollingCounter"
#define MCU_233_VCU_200H_VCU_200_CHECK_SUM_NAME "VCU_200_CheckSum"
#define MCU_233_VCU_ICM_3_F_DH_VCU_TOTAL_ODOMETER_NAME "VCU_TotalOdometer"
#define MCU_233_VCU_ICM_3_F_DH_VCU_VEH_AVRG_EGY_CNSE_NAME "VCU_VehAvrgEgyCnse"
#define MCU_233_VCU_ICM_3_F_DH_VCU_RESI_MILG_NAME "VCU_ResiMilg"
#define MCU_233_VCU_106H_VCU_DCDC_ACTU_AVLBL_PWR_MAX_NAME "VCU_DCDCActuAvlblPwrMax"
#define MCU_233_VCU_106H_VCU_DCDC_OUT_VOL_REQ_NAME "VCU_DCDCOutVolReq"
#define MCU_233_VCU_106H_VCU_BMS_CHARGE_VTMS_PWR_PEQ_NAME "VCU_BMSChargeVTMSPwrPeq"
#define MCU_233_VCU_106H_VCU_ACMM_PWR_MAX_NAME "VCU_ACMMPwrMax"
#define MCU_233_VCU_106H_VCU_106_ROLLING_COUNTER_NAME "VCU_106_RollingCounter"
#define MCU_233_VCU_106H_VCU_106_CHECK_SUM_NAME "VCU_106_CheckSum"
#define MCU_233_VCU_18_FH_VCU_EOP_SLEEP_REQ_NAME "VCU_EOPSleepReq"
#define MCU_233_VCU_18_FH_VCU_EOP_ENABLE_NAME "VCU_EOPEnable"
#define MCU_233_VCU_18_FH_VCU_EOP_MOT_SPEED_REQ_NAME "VCU_EOPMotSpeedReq"
#define MCU_233_VCU_18_FH_VCU_EOP_OIL_TEMP_NAME "VCU_EOPOilTemp"
#define MCU_233_VCU_18_FH_VCU_EOP_CHECK_SUM_NAME "VCU_EOPCheckSum"
#define MCU_233_VCU_18_FH_VCU_EOP_ROLLING_COUNTER_NAME "VCU_EOPRollingCounter"
#define MCU_233_VCU_520H_VCU_FVB_ENABLE_NAME "VCU_FVB_Enable"
#define MCU_233_VCU_520H_VCU_FVB_B_OPEN_VALUE_NAME "VCU_FVB_BOpenValue"
#define MCU_233_VCU_520H_VCU_FVB_C_OPEN_VALUE_NAME "VCU_FVB_COpenValue"
#define MCU_233_VCU_520H_VCU_520_CHECK_SUM_NAME "VCU_520_CheckSum"
#define MCU_233_VCU_520H_VCU_520_ROLLING_COUNTER_NAME "VCU_520_RollingCounter"
#define MCU_233_VCU_526H_VCU_CRUISE_CONTROL_STS_NAME "VCU_CruiseControlSts"
#define MCU_233_VCU_526H_VCU_CRS_VEH_SPD_NAME "VCU_CrsVehSpd"
#define MCU_233_VCU_IHU_2_F_EH_VCU_POW_BAT_DEEP_DISCHARGE_NAME "VCU_PowBatDeepDischarge"
#define MCU_233_VCU_IHU_2_F_EH_VCU_ENERGY_RECOVERY_NAME "VCU_EnergyRecovery"
#define MCU_233_VCU_IHU_2_F_EH_VCU_SLOW_CHARGING_PRESERVATION_STATUS_NAME "VCU_SlowChargingPreservation_Status"
#define MCU_233_VCU_IHU_2_F_EH_VCU_EXTERNAL_DISCHARGE_STATUS_NAME "VCU_ExternalDischarge_Status"
#define MCU_233_VCU_IHU_2_F_EH_VCU_WORM_MODE_STATUS_NAME "VCU_WormMode_Status"
#define MCU_233_VCU_IHU_2_F_EH_VCU_LOADCONDITIONS_NAME "VCU_loadconditions"
#define MCU_233_VCU_IHU_2_F_EH_VCU_REARAXLE_NAME "VCU_Rearaxle"
#define MCU_233_VCU_IHU_2_F_EH_VCU_CONLOADSENSORS_NAME "VCU_Conloadsensors"
#define MCU_233_VCU_PEPS_527H_VCU_CHALLENGE_RANDOM1_NAME "VCU_ChallengeRandom1"
#define MCU_233_VCU_PEPS_527H_VCU_CHALLENGE_RANDOM2_NAME "VCU_ChallengeRandom2"
#define MCU_233_VCU_PEPS_527H_VCU_CHALLENGE_RANDOM3_NAME "VCU_ChallengeRandom3"
#define MCU_233_VCU_PEPS_527H_VCU_CHALLENGE_RANDOM4_NAME "VCU_ChallengeRandom4"
#define MCU_233_SSW_120H_SSW_KNOB_POSITION_NAME "SSW_KnobPosition"
#define MCU_233_SSW_120H_SSW_FAULT_NAME "SSW_Fault"
#define MCU_233_SSW_120H_SSW_SHIFT_POS_VALID_NAME "SSW_ShiftPosValid"
#define MCU_233_SSW_120H_SSW_GEAR_CHG_REMINDING_NAME "SSW_GearChgReminding"
#define MCU_233_SSW_120H_SSW_CHECK_SUM_NAME "SSW_CheckSum"
#define MCU_233_SSW_120H_SSW_ROLLING_COUNTER_NAME "SSW_RollingCounter"
#define MCU_233_BMS_099H_BMS_HEATING_RELAY_CNCTD_NAME "BMS_HeatingRelayCnctd"
#define MCU_233_BMS_099H_BMS_PRCHRGR_RELAY_CNCTD_NAME "BMS_PrchrgrRelayCnctd"
#define MCU_233_BMS_099H_BMS_CC_CNCTD_STS_NAME "BMS_CCCnctdSts"
#define MCU_233_BMS_099H_BMS_CHRGNG_PLUG_CNCTD_STS_NAME "BMS_ChrgngPlugCnctdSts"
#define MCU_233_BMS_099H_BMS_HV_BAT_WOKNG_MD_NAME "BMS_HVBatWokngMd"
#define MCU_233_BMS_099H_BMS_HEATING_COOLING_REQ_NAME "BMS_HeatingCoolingReq"
#define MCU_233_BMS_099H_BMS_BALANCING_STS_NAME "BMS_BalancingSts"
#define MCU_233_BMS_099H_BMS_INSULATION_MONITOR_WARN_NAME "BMS_InsulationMonitorWarn"
#define MCU_233_BMS_099H_BMS_HV_BAT_NGTV_RELAY_CNCTD_NAME "BMS_HVBatNgtvRelayCnctd"
#define MCU_233_BMS_099H_BMS_HV_BAT_PSTV_RELAY_CNCTD_NAME "BMS_HVBatPstvRelayCnctd"
#define MCU_233_BMS_099H_BMS_INSULATION_RESISTANCE_NAME "BMS_InsulationResistance"
#define MCU_233_BMS_099H_BMS_D_CCHRGR_NGTV_RELAY_CNCTD_NAME "BMS_DCchrgrNgtvRelayCnctd"
#define MCU_233_BMS_099H_BMS_D_CCHRGR_PSTV_RELAY_CNCTD_NAME "BMS_DCchrgrPstvRelayCnctd"
#define MCU_233_BMS_099H_BMS_HV_BAT_TARGE_TEM_NAME "BMS_HVBatTargeTem"
#define MCU_233_BMS_099H_BMS_SLEEP_ALLOWED_NAME "BMS_SleepAllowed"
#define MCU_233_BMS_099H_BMS_KON_POWER_MODULE_NAME "BMS_KONPowerModule"
#define MCU_233_BMS_099H_BMS_OUTSIDE_TOTAL_VOLTAGE_NAME "BMS_OutsideTotalVoltage"
#define MCU_233_BMS_099H_BMS_99_ROLLING_COUNTER_NAME "BMS_99_RollingCounter"
#define MCU_233_BMS_099H_BMS_99_CHECK_SUM_NAME "BMS_99_CheckSum"
#define MCU_233_BMS_243H_BMS_CC2_MODE_NAME "BMS_CC2Mode"
#define MCU_233_BMS_243H_BMS_CC_RESISTANCE_NAME "BMS_CCResistance"
#define MCU_233_BMS_243H_BMS_CHARGER_MODE_REQ_NAME "BMS_ChargerModeReq"
#define MCU_233_BMS_243H_BMS_CHARGE_REQ_NAME "BMS_ChargeReq"
#define MCU_233_BMS_243H_BMS_CHARGER_OUTPUT_CURRENT_REQ_NAME "BMS_ChargerOutputCurrentReq"
#define MCU_233_BMS_243H_BMS_CHARGER_OUTPUT_VOLTAGE_REQ_NAME "BMS_ChargerOutputVoltageReq"
#define MCU_233_BMS_243H_BMS_DC_CHARGE_PORT_PSTV_TEMP_NAME "BMS_DCChargePortPstvTemp"
#define MCU_233_BMS_243H_BMS_DC_CHARGE_PORT_NGTV_TEMP_NAME "BMS_DCChargePortNgtvTemp"
#define MCU_233_BMS_243H_BMS_243_CHECK_SUM_NAME "BMS_243_CheckSum"
#define MCU_233_BMS_243H_BMS_243_ROLLING_COUNTER_NAME "BMS_243_RollingCounter"
#define MCU_233_BMS_244H_BMS_HV_BAT_CHG_CURRENT_10S_NAME "BMS_HVBatChgCurrent_10s"
#define MCU_233_BMS_244H_BMS_HV_BAT_DIS_CHG_CURRENT_MAX10S_NAME "BMS_HVBatDisChgCurrent_Max10s"
#define MCU_233_BMS_244H_BMS_HV_BAT_CRNT_NAME "BMS_HVBatCrnt"
#define MCU_233_BMS_244H_BMS_HV_BAT_VOL_NAME "BMS_HVBatVol"
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_OVER_VOL_STS_NAME "BMS_HVBatCellOverVolSts"
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_UNDER_VOL_STS_NAME "BMS_HVBatCellUnderVolSts"
#define MCU_233_BMS_246H_BMS_CUTOFF_ERROR_NAME "BMS_CutoffError"
#define MCU_233_BMS_246H_BMS_THERMAL_RUNAWAY_NAME "BMS_ThermalRunaway"
#define MCU_233_BMS_246H_BMS_HV_BAT_ERR_LVL_NAME "BMS_HVBatErrLvl"
#define MCU_233_BMS_246H_BMS_BAT_OVER_DIS_CHG_NAME "BMS_BatOverDisChg"
#define MCU_233_BMS_246H_BMS_BAT_OVER_CHG_NAME "BMS_BatOverChg"
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_VOL_DIFF_STS_NAME "BMS_HVBatCellVolDiffSts"
#define MCU_233_BMS_246H_BMS_HV_BAT_PACK_OVER_VOL_STS_NAME "BMS_HVBatPackOverVolSts"
#define MCU_233_BMS_246H_BMS_HV_BAT_PACK_UNDER_VOL_STS_NAME "BMS_HVBatPackUnderVolSts"
#define MCU_233_BMS_246H_BMS_BAT_NOT_MATCH_FLT_NAME "BMS_BatNotMatchFlt"
#define MCU_233_BMS_246H_BMS_SOC_JUMP_FLT_NAME "BMS_SOCJumpFlt"
#define MCU_233_BMS_246H_BMS_D_CCHRG_OUTLET_TEMP_FAULT_NAME "BMS_DCchrgOutletTempFault"
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_TEM_DIFF_STS_NAME "BMS_HVBatCellTemDiffSts"
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_UNDER_TEM_STS_NAME "BMS_HVBatCellUnderTemSts"
#define MCU_233_BMS_246H_BMS_HV_BAT_CELL_OVER_TEM_STS_NAME "BMS_HVBatCellOverTemSts"
#define MCU_233_BMS_246H_BMS_VCU_COMM_FAULT_NAME "BMS_VCUCommFault"
#define MCU_233_BMS_246H_BMS_ACAN_BUS_FAULT_NAME "BMS_ACANBusFault"
#define MCU_233_BMS_246H_BMS_HV_BAT_FEEDBACK_CURR_FAULT_NAME "BMS_HVBatFeedbackCurrFault"
#define MCU_233_BMS_246H_BMS_HV_BAT_CHARGE_CURR_FAULT_NAME "BMS_HVBatChargeCurrFault"
#define MCU_233_BMS_246H_BMS_HV_BAT_DIS_CHRG_CURR_FAULT_NAME "BMS_HVBatDisChrgCurrFault"
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_ERROR_NAME "BMS_HVBRelayContactorError"
#define MCU_233_BMS_246H_BMS_HVB_RELAY_CONTACTOR_FAULT_NAME "BMS_HVBRelayContactorFault"
#define MCU_233_BMS_246H_BMS_HV_BAT_NGTV_RELAY_CON_FAULT_NAME "BMS_HVBatNgtvRelayConFault"
#define MCU_233_BMS_246H_BMS_HV_BAT_PSTV_RELAY_CON_FAULT_NAME "BMS_HVBatPstvRelayConFault"
#define MCU_233_BMS_246H_BMS_BMS_HARSWARE_FAULT_NAME "BMS_BMSHarswareFault"
#define MCU_233_BMS_246H_BMS_CAN_COM_FLT_WITH_LECU_NAME "BMS_CANComFltWithLECU"
#define MCU_233_BMS_246H_BMS_HVIL_CLSD_FLT_NAME "BMS_HVILClsdFlt"
#define MCU_233_BMS_246H_BMS_CHAR_SIGNAL_ABNORMALITY_NAME "BMS_CharSignalAbnormality"
#define MCU_233_BMS_246H_BMS_POWER_IN_ABNORMALITY_NAME "BMS_PowerInAbnormality"
#define MCU_233_BMS_246H_BMS_FAULT_COUNTER_NAME "BMS_FaultCounter"
#define MCU_233_BMS_246H_BMS_246_ROLLING_COUNTER_NAME "BMS_246_RollingCounter"
#define MCU_233_BMS_246H_BMS_246_CHECK_SUM_NAME "BMS_246_CheckSum"
#define MCU_233_BMS_249H_BMS_HV_BAT_AVL_SOC_NAME "BMS_HVBatAvlSOC"
#define MCU_233_BMS_249H_BMS_HV_BAT_ABS_SOC_NAME "BMS_HVBatAbsSOC"
#define MCU_233_BMS_249H_BMS_HV_BAT_SOH_NAME "BMS_HVBatSOH"
#define MCU_233_BMS_249H_BMS_CHARGE_STS_NAME "BMS_ChargeSts"
#define MCU_233_BMS_249H_BMS_APP_SEC_RELAY_CNCTD_NAME "BMS_AppSecRelayCnctd"
#define MCU_233_BMS_249H_BMS_APP_FIR_RELAY_CNCTD_NAME "BMS_AppFirRelayCnctd"
#define MCU_233_BMS_249H_BMS_REMAINING_CHARGE_TIME_NAME "BMS_RemainingChargeTime"
#define MCU_233_BMS_249H_BMS_SOC_HIGH_FLT_NAME "BMS_SOCHighFlt"
#define MCU_233_BMS_249H_BMS_SOC_LOW_FLT_NAME "BMS_SOCLowFlt"
#define MCU_233_BMS_249H_BMS_EXTRA_RANGE_STS_NAME "BMS_ExtraRangeSts"
#define MCU_233_BMS_249H_BMS_EMERG_ALLOW_NAME "BMS_EmergAllow"
#define MCU_233_BMS_249H_BMS_HV_BAT_SOE_NAME "BMS_HVBatSOE"
#define MCU_233_BMS_249H_BMS_249_ROLLING_COUNTER_NAME "BMS_249_RollingCounter"
#define MCU_233_BMS_249H_BMS_249_CHECK_SUM_NAME "BMS_249_CheckSum"
#define MCU_233_BMS_252H_BMS_HV_BAT_CHG_CURRENT_30S_NAME "BMS_HVBatChgCurrent_30s"
#define MCU_233_BMS_252H_BMS_HV_BAT_CONTN_CHRG_CRNT_NAME "BMS_HVBatContnChrgCrnt"
#define MCU_233_BMS_252H_BMS_HV_BAT_DIS_CHG_CURRENT_MAX_30S_NAME "BMS_HVBatDisChgCurrent_Max_30s"
#define MCU_233_BMS_252H_BMS_HV_BAT_CONTN_DISCHRG_CRNT_NAME "BMS_HVBatContnDischrgCrnt"
#define MCU_233_BMS_254H_BMS_TOTAL_CHARGE_ENERGY_NAME "BMS_TotalChargeEnergy"
#define MCU_233_BMS_254H_BMS_TOTAL_DISCHARGE_ENERGY_NAME "BMS_TotalDischargeEnergy"
#define MCU_233_BMS_254H_BMS_CHARGE_NU_M_NAME "BMS_ChargeNuM"
#define MCU_233_BMS_254H_BMS_TOTAL_FEEDBACK_ENERGY_NAME "BMS_TotalFeedbackEnergy"
#define MCU_233_BMS_PACK1_260H_BMS_HV_BAT_LOWEST_VOL_CELL_NUM_NAME "BMS_HVBatLowestVolCellNum"
#define MCU_233_BMS_PACK1_260H_BMS_HV_BAT_HIGHEST_VOL_CELL_NUM_NAME "BMS_HVBatHighestVolCellNum"
#define MCU_233_BMS_PACK1_260H_BMS_HV_BAT_LOWEST_CELL_VOL_NAME "BMS_HVBatLowestCellVol"
#define MCU_233_BMS_PACK1_260H_BMS_HV_BAT_HIGHEST_CELL_VOL_NAME "BMS_HVBatHighestCellVol"
#define MCU_233_BMS_PACK1_260H_BMS_260_ROLLING_COUNTER_NAME "BMS_260_RollingCounter"
#define MCU_233_BMS_PACK1_260H_BMS_260_CHECK_SUM_NAME "BMS_260_CheckSum"
#define MCU_233_BMS_PACK1_262H_BMS_HV_BAT_LOWEST_TEM_CELL_NUM_NAME "BMS_HVBatLowestTemCellNum"
#define MCU_233_BMS_PACK1_262H_BMS_HV_BAT_HIGHEST_TEM_CELL_NUM_NAME "BMS_HVBatHighestTemCellNum"
#define MCU_233_BMS_PACK1_262H_BMS_HV_BAT_HIGHEST_TEM_NAME "BMS_HVBatHighestTem"
#define MCU_233_BMS_PACK1_262H_BMS_HV_BAT_LOWEST_TEM_NAME "BMS_HVBatLowestTem"
#define MCU_233_BMS_PACK1_262H_BMS_HV_BAT_AVG_TEM_NAME "BMS_HVBatAvgTem"
#define MCU_233_BMS_PACK1_262H_BMS_262_CHECK_SUM_NAME "BMS_262_CheckSum"
#define MCU_233_BMS_PACK1_262H_BMS_262_ROLLING_COUNTER_NAME "BMS_262_RollingCounter"
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER_NAME "BMS_CellVolSerialNumber"
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER1_NAME "BMS_CellVolSerialNumber1"
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER2_NAME "BMS_CellVolSerialNumber2"
#define MCU_233_BMS_PACK1_268H_BMS_CELL_VOL_SERIAL_NUMBER3_NAME "BMS_CellVolSerialNumber3"
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER_NAME "BMS_CellTSerialNumber"
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER1_NAME "BMS_CellTSerialNumber1"
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER2_NAME "BMS_CellTSerialNumber2"
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER3_NAME "BMS_CellTSerialNumber3"
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER4_NAME "BMS_CellTSerialNumber4"
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER5_NAME "BMS_CellTSerialNumber5"
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER6_NAME "BMS_CellTSerialNumber6"
#define MCU_233_BMS_PACK1_26_CH_BMS_CELL_T_SERIAL_NUMBER7_NAME "BMS_CellTSerialNumber7"
#define MCU_233_BMS_3_E1H_BMS_HV_BAT_MAXCHRG_VOL_NAME "BMS_HVBatMaxchrgVol"
#define MCU_233_BMS_3_E1H_BMS_HV_BAT_RATED_VOL_NAME "BMS_HVBatRatedVol"
#define MCU_233_BMS_3_E1H_BMS_HV_BAT_RATED_CAPACITY_NAME "BMS_HVBatRatedCapacity"
#define MCU_233_BMS_3_E1H_BMS_HV_BAT_RATED_ENERGY_NAME "BMS_HVBatRatedEnergy"
#define MCU_233_FVB_521H_FVB_ERROR_NAME "FVB_Error"
#define MCU_233_FVB_521H_FVB_B_OPEN_VALUE_NAME "FVB_BOpenValue"
#define MCU_233_FVB_521H_FVB_C_OPEN_VALUE_NAME "FVB_COpenValue"
#define MCU_233_FVB_521H_FVB_521_CHECK_SUM_NAME "FVB_521_CheckSum"
#define MCU_233_FVB_521H_FVB_521_ROLLING_COUNTER_NAME "FVB_521_RollingCounter"
#define MCU_233_MCU_097H_MCU_ANTI_SHAKE_NAME "MCU_AntiShake"
#define MCU_233_MCU_097H_MCU_MOT_SPD_VALID_NAME "MCU_MotSpdValid"
#define MCU_233_MCU_097H_MCU_MOT_TOQ_VALID_NAME "MCU_MotToqValid"
#define MCU_233_MCU_097H_MCU_MOT_WORKING_STS_NAME "MCU_MotWorkingSts"
#define MCU_233_MCU_097H_MCU_DISCHARGE_STS_NAME "MCU_DischargeSts"
#define MCU_233_MCU_097H_MCU_MOT_ACTU_TOQ_NAME "MCU_MotActuToq"
#define MCU_233_MCU_097H_MCU_MOT_ACTU_SPD_NAME "MCU_MotActuSpd"
#define MCU_233_MCU_097H_MCU_MOT_TOQ_LMT_NAME "MCU_MotToqLmt"
#define MCU_233_MCU_097H_MCU_97_CHECKSUM_NAME "MCU_97_Checksum"
#define MCU_233_MCU_097H_MCU_97_ROLLING_COUNTER_NAME "MCU_97_RollingCounter"
#define MCU_233_MCU_098H_MCU_AC_ACTU_CRNT_NAME "MCU_ACActuCrnt"
#define MCU_233_MCU_098H_MCU_MOT_MOVING_STS_NAME "MCU_MotMovingSts"
#define MCU_233_MCU_098H_MCU_98_CHECKSUM_NAME "MCU_98_Checksum"
#define MCU_233_MCU_098H_MCU_98_ROLLING_COUNTER_NAME "MCU_98_RollingCounter"
#define MCU_233_MCU_26_EH_MCU_PHASE_IGBT_MAX_TEMP_NAME "MCU_PhaseIGBTMaxTemp"
#define MCU_233_MCU_26_EH_MCU_MOT_ACTU_TEMP_NAME "MCU_MotActuTemp"
#define MCU_233_MCU_26_EH_MCU_IPM_RADIATOR_TEMP_NAME "MCU_IPMRadiatorTemp"
#define MCU_233_MCU_26_EH_MCU_DC_ACTU_CRNT_NAME "MCU_DCActuCrnt"
#define MCU_233_MCU_26_EH_MCU_DC_LINK_VOLT_NAME "MCU_DCLinkVolt"
#define MCU_233_MCU_26_EH_MCU_26_E_ROLLING_COUNTER_NAME "MCU_26E_RollingCounter"
#define MCU_233_MCU_26_EH_MCU_26_E_CHECKSUM_NAME "MCU_26E_Checksum"
#define MCU_233_MCU_3_E5H_MCU_DC_LINK_OVER_VOLT_FLT_NAME "MCU_DCLinkOverVoltFlt"
#define MCU_233_MCU_3_E5H_MCU_MOT_OVER_TEM_FLT_NAME "MCU_MotOverTemFlt"
#define MCU_233_MCU_3_E5H_MCU_IGBT_OVER_TEMP_FLT_NAME "MCU_IGBTOverTempFlt"
#define MCU_233_MCU_3_E5H_MCU_ROTARY_TRANSFORMER_FLT_NAME "MCU_RotaryTransformerFlt"
#define MCU_233_MCU_3_E5H_MCU_CURRENT_HALL_FLT_NAME "MCU_CurrentHallFlt"
#define MCU_233_MCU_3_E5H_MCU_MOT_LACK_OF_PHA_FLT_NAME "MCU_MotLackOfPhaFlt"
#define MCU_233_MCU_3_E5H_MCU_IGBT_FLT_NAME "MCU_IGBTFlt"
#define MCU_233_MCU_3_E5H_MCU_MOT_OVER_CRNT_FLT_NAME "MCU_MotOverCrntFlt"
#define MCU_233_MCU_3_E5H_MCU_MOT_OVER_TEMP_LIM_TOQ_NAME "MCU_MotOverTempLimToq"
#define MCU_233_MCU_3_E5H_MCU_CAN_COM_FLT_NAME "MCU_CANComFlt"
#define MCU_233_MCU_3_E5H_MCU_CPLD_RUN_STS_NAME "MCU_CPLDRunSts"
#define MCU_233_MCU_3_E5H_MCU_DRV_LOWER_ARM_FLT_NAME "MCU_DrvLowerArmFlt"
#define MCU_233_MCU_3_E5H_MCU_DRV_UPPER_ARM_FLT_NAME "MCU_DrvUpperArmFlt"
#define MCU_233_MCU_3_E5H_MCU_HW_OVERL_CURRENT_FLT_NAME "MCU_HWOverlCurrentFlt"
#define MCU_233_MCU_3_E5H_MCU_HW_OVER_VOLT_FLT_NAME "MCU_HWOverVoltFlt"
#define MCU_233_MCU_3_E5H_MCU_DC_LINK_UNDER_VOLT_FLT_NAME "MCU_DCLinkUnderVoltFlt"
#define MCU_233_MCU_3_E5H_MCU_IGBT_SAM_ERR_NAME "MCU_IGBTSamErr"
#define MCU_233_MCU_3_E5H_MCU_MOT_ER_LVL_NAME "MCU_MotErLvl"
#define MCU_233_MCU_3_E5H_MCU_OVER_LOAD_LAG_NAME "MCU_OverLoadLag"
#define MCU_233_MCU_3_E5H_MCU_MOT_OVER_SPD_FLT_NAME "MCU_MotOverSpdFlt"
#define MCU_233_MCU_3_E5H_MCU_RADIATOR_OVER_TEMP_LIM_TOQ_NAME "MCU_RadiatorOverTempLimToq"
#define MCU_233_MCU_3_E5H_MCU_IGBT_JUNC_OV_TEMP_LIM_TOQ_NAME "MCU_IGBT_JuncOvTempLimToq"
#define MCU_233_MCU_3_E5H_MCU_IGBT_NTC_OVER_TEMP_LIM_TOQ_NAME "MCU_IGBT_NTCOverTempLimToq"
#define MCU_233_MCU_3_E5H_MCU_M12_UNDER_VOL_NAME "MCU_M12UnderVol"
#define MCU_233_MCU_3_E5H_MCU_MOTOR_SAM_ERR_NAME "MCU_MotorSamErr"
#define MCU_233_MCU_3_E5H_MCU_3_E5_ROLLING_COUNTER_NAME "MCU_3E5_RollingCounter"
#define MCU_233_MCU_3_E5H_MCU_3_E5_CHECK_SUM_NAME "MCU_3E5_CheckSum"
#define MCU_233_EOP_1_A0H_EOP_MOTOER_SPEED_NAME "EOP_MotoerSpeed"
#define MCU_233_EOP_1_A0H_EOP_ERR_LEVEL_NAME "EOP_ErrLevel"
#define MCU_233_EOP_1_A0H_EOP_5_V_UNDER_VOLT_ERR_NAME "EOP_5VUnderVoltErr"
#define MCU_233_EOP_1_A0H_EOP_5_V_OVER_VOLT_ERR_NAME "EOP_5VOverVoltErr"
#define MCU_233_EOP_1_A0H_EOP_5_V_OVER_CUR_ERR_NAME "EOP_5VOverCurErr"
#define MCU_233_EOP_1_A0H_EOP_UNDER_SPEED_ERR_NAME "EOP_UnderSpeedErr"
#define MCU_233_EOP_1_A0H_EOP_ZERO_POSITION_ERR_NAME "EOP_ZeroPositionErr"
#define MCU_233_EOP_1_A0H_EOP_RESOLVER_SIG_ERR_NAME "EOP_ResolverSigErr"
#define MCU_233_EOP_1_A0H_EOP_UNDER_VOLT_ERR_NAME "EOP_UnderVoltErr"
#define MCU_233_EOP_1_A0H_EOP_RATING_FIAG_NAME "EOP_RatingFiag"
#define MCU_233_EOP_1_A0H_EOP_OPERATION_MODE_NAME "EOP_OperationMode"
#define MCU_233_EOP_1_A0H_EOP_OVER_CUR_ERR_NAME "EOP_OverCurErr"
#define MCU_233_EOP_1_A0H_EOP_CHECKSUM_ERR_NAME "EOP_ChecksumErr"
#define MCU_233_EOP_1_A0H_EOP_OVER_SPEED_ERR_NAME "EOP_OverSpeedErr"
#define MCU_233_EOP_1_A0H_EOP_CUR_OFFSET_ERR_NAME "EOP_CurOffsetErr"
#define MCU_233_EOP_1_A0H_EOP_PCB_OVER_TEMP_ERR_NAME "EOP_PCBOverTempErr"
#define MCU_233_EOP_1_A0H_EOP_OVER_VOLT_ERR_1_NAME "EOP_OverVoltErr_1"
#define MCU_233_EOP_1_A0H_EOP_UNDER_VOLT_ERR_1_NAME "EOP_UnderVoltErr_1"
#define MCU_233_EOP_1_A0H_EOP_TEMP_SENSOR_OVER_VOLT_ERR_NAME "EOP_TempSensorOverVoltErr"
#define MCU_233_EOP_1_A0H_EOP_TEMP_SENSOR_UNDER_VOLT_ERR_NAME "EOP_TempSensorUnderVoltErr"
#define MCU_233_EOP_1_A0H_EOP_SENSOR_OVER_VOLT_ERR_NAME "EOP_SensorOverVoltErr"
#define MCU_233_EOP_1_A0H_EOP_SENSOR_UNDER_VOLT_ERR_NAME "EOP_SensorUnderVoltErr"
#define MCU_233_EOP_1_A0H_EOP_OVER_VOLT_ERR_NAME "EOP_OverVoltErr"
#define MCU_233_EOP_1_A0H_EOP_POWER_STAGE_ERR_NAME "EOP_PowerStageErr"
#define MCU_233_EOP_1_A0H_EOP_MOT_BLOKED_ERR_NAME "EOP_MotBlokedErr"
#define MCU_233_EOP_1_A0H_EOP_DRY_RUN_ERR_NAME "EOP_DryRunErr"
#define MCU_233_EOP_1_A0H_EOP_COMM_ERR_NAME "EOP_CommErr"
#define MCU_233_EOP_1_A0H_EOP_RAM_ERR_NAME "EOP_RAMErr"
#define MCU_233_EOP_1_A0H_EOP_ROM_ERR_NAME "EOP_ROMErr"
#define MCU_233_EOP_1_A0H_EOP_E2_PROM_ERR_NAME "EOP_E2PROMErr"
#define MCU_233_EOP_1_A0H_EOP_WATCHDOG_ERR_NAME "EOP_WatchdogErr"
#define MCU_233_EOP_1_A0H_EOP_CHECKSUM_NAME "EOP_Checksum"
#define MCU_233_EOP_1_A0H_EOP_ROLLING_COUNTER_NAME "EOP_RollingCounter"
#define MCU_233_DCDC_1_F7H_DCDC_B1_HV_LOCK_NAME "DCDC_b1HVLock"
#define MCU_233_DCDC_1_F7H_DCDC_CAN_TIME_OUT_NAME "DCDC_CanTimeOut"
#define MCU_233_DCDC_1_F7H_DCDC_12_V_FAULT_NAME "DCDC_12VFault"
#define MCU_233_DCDC_1_F7H_DCDC_TEM_FLT_NAME "DCDC_TemFlt"
#define MCU_233_DCDC_1_F7H_DCDC_MD_NAME "DCDC_Md"
#define MCU_233_DCDC_1_F7H_DCDC_STS_ERR_LVL_NAME "DCDC_StsErrLvl"
#define MCU_233_DCDC_1_F7H_DCDC_ACTU_HIGH_VOL_NAME "DCDC_ActuHighVol"
#define MCU_233_DCDC_1_F7H_DCDC_ACTU_CRNT_AT_HV_NAME "DCDC_ActuCrntAtHV"
#define MCU_233_DCDC_1_F7H_DCDC_ACTU_LOW_VOL_NAME "DCDC_ActuLowVol"
#define MCU_233_DCDC_1_F7H_DCDC_ACTU_CRNT_AT_LV_NAME "DCDC_ActuCrntAtLV"
#define MCU_233_DCDC_1_F7H_DCDC_ACTU_TEM_NAME "DCDC_ActuTem"
#define MCU_233_DCDC_1_F7H_DCDC_B1_HARD_FAULT_NAME "DCDC_b1HardFault"
#define MCU_233_DCDC_1_F7H_DCDC_B1_SCT_NAME "DCDC_b1SCT"
#define MCU_233_DCDC_1_F7H_DCDC_B1_VH_OV_NAME "DCDC_b1VhOV"
#define MCU_233_DCDC_1_F7H_DCDC_B1_OCP_NAME "DCDC_b1OCP"
#define MCU_233_DCDC_1_F7H_DCDC_B1_VOUT_UV_NAME "DCDC_b1VoutUV"
#define MCU_233_DCDC_1_F7H_DCDC_B1_VOUT_OV_NAME "DCDC_b1VoutOV"
#define MCU_233_DCDC_1_F7H_DCDC_B1_VIN_UV_NAME "DCDC_b1VinUV"
#define MCU_233_DCDC_1_F7H_DCDC_B1_VIN_OV_NAME "DCDC_b1VinOV"
#define MCU_233_BOBC_2_E8H_BOBC_TEMP_NAME "BOBC_Temp"
#define MCU_233_BOBC_2_E8H_BOBC_OUTPUT_VOLT_NAME "BOBC_OutputVolt"
#define MCU_233_BOBC_2_E8H_BOBC_DCAC_REQUEST_NAME "BOBC_DCACRequest"
#define MCU_233_BOBC_2_E8H_BOBC_OUTPUT_CRRT_NAME "BOBC_OutputCrrt"
#define MCU_233_BOBC_2_E8H_BOBC_S2_STATUS_NAME "BOBC_S2Status"
#define MCU_233_BOBC_2_E8H_BOBC_PFCAC_OUTPUT_OV_FAULT_NAME "BOBC_PFCACOutputOVFault"
#define MCU_233_BOBC_2_E8H_BOBC_PFCAC_OUTPUT_CURR_FAULT_NAME "BOBC_PFCACOutputCurrFault"
#define MCU_233_BOBC_2_E8H_BOBC_LLCHVDC_CURR_INPUT_FAULT_NAME "BOBC_LLCHVDCCurrInputFault"
#define MCU_233_BOBC_2_E8H_BOBC_LLCHVDC_INPUT_UV_FAULT_NAME "BOBC_LLCHVDCInputUVFault"
#define MCU_233_BOBC_2_E8H_BOBC_DCAC_MOD_NAME "BOBC_DCACMod"
#define MCU_233_BOBC_2_E8H_BOBC_AC_CHARGE_PORT_TEMP_NAME "BOBC_ACChargePortTemp"
#define MCU_233_BOBC_2_E8H_BOBC_CHARGER_OUTPUT_MAX_VOLTAGE_NAME "BOBC_ChargerOutputMAXVoltage"
#define MCU_233_BOBC_2_E8H_BOBC_LLCLVDC_UNDER_VOLT_FAULT_NAME "BOBC_LLCLVDCUnderVoltFault"
#define MCU_233_BOBC_2_E8H_BOBC_LLCLVDC_OVER_VOLT_FAULT_NAME "BOBC_LLCLVDCOverVoltFault"
#define MCU_233_BOBC_2_E8H_BOBC_LLC_VOLT_OVER_FAULT_NAME "BOBC_LLCVoltOverFault"
#define MCU_233_BOBC_2_E8H_BOBC_LLC_CURR_FAULT_NAME "BOBC_LLCCurrFault"
#define MCU_233_BOBC_2_E8H_BOBC_PFCACOUT_PRO_NAME "BOBC_PFCACOUTPro"
#define MCU_233_BOBC_2_E8H_BOBC_PFCDC_OVER_VOLT_FAULT_NAME "BOBC_PFCDCOverVoltFault"
#define MCU_233_BOBC_2_E8H_BOBC_PFCDC_UNDER_VOLT_FAULT_NAME "BOBC_PFCDCUnderVoltFault"
#define MCU_233_BOBC_2_E8H_BOBC_A_CCHG_OUTLET_TEMP_FAULT_NAME "BOBC_ACchgOutletTempFault"
#define MCU_233_BOBC_297H_BOBC_PFCAC_INPUT_CURR_FAULT_NAME "BOBC_PFCACInputCurrFault"
#define MCU_233_BOBC_297H_BOBC_CHARGER_OTP_NAME "BOBC_ChargerOTP"
#define MCU_233_BOBC_297H_BOBC_CHARGER_HARDWARE_FAULT_NAME "BOBC_ChargerHardwareFault"
#define MCU_233_BOBC_297H_BOBC_INLET_ELECTRONIC_LOCK_NAME "BOBC_InletElectronicLock"
#define MCU_233_BOBC_297H_BOBC_CHARGER_MODE_NAME "BOBC_ChargerMode"
#define MCU_233_BOBC_297H_BOBC_STS_ERR_LVL_NAME "BOBC_StsErrLvl"
#define MCU_233_BOBC_297H_BOBC_PFCAC_INPUT_O_VOLT_FAULT_NAME "BOBC_PFCACInputOVoltFault"
#define MCU_233_BOBC_297H_BOBC_PFCAC_UNDER_VOLT_FAULT_NAME "BOBC_PFCACUnderVoltFault"
#define MCU_233_BOBC_297H_BOBC_PFC_CURR_FAULT_NAME "BOBC_PFCCurrFault"
#define MCU_233_BOBC_297H_BOBC_CHRGNG_PLUG_CNCTD_STS_NAME "BOBC_ChrgngPlugCnctdSts"
#define MCU_233_BOBC_297H_BOBC_CHARGER_STATUS_NAME "BOBC_ChargerStatus"
#define MCU_233_BOBC_297H_BOBC_KL30_UNDER_VOLT_NAME "BOBC_KL30UnderVolt"
#define MCU_233_BOBC_297H_BOBC_CHARGER_COM_FAULT_NAME "BOBC_ChargerComFault"
#define MCU_233_BOBC_297H_BOBC_CHARGER_INPUT_PWM_NAME "BOBC_ChargerInputPWM"
#define MCU_233_BOBC_297H_BOBC_CHARGER_DC_VOLTAGE_NAME "BOBC_ChargerDCVoltage"
#define MCU_233_BOBC_297H_BOBC_CHARGER_TEMPERATURE_NAME "BOBC_ChargerTemperature"
#define MCU_233_BOBC_297H_BOBC_CHARGER_DC_CURRENT_NAME "BOBC_ChargerDCCurrent"
#define MCU_233_BOBC_297H_BOBC_LLCHVDCOP_CURR_FAULT_NAME "BOBC_LLCHVDCOPCurrFault"
#define MCU_233_BOBC_297H_BOBC_LLCHVDC_OUTPUT_UV_FAULT_NAME "BOBC_LLCHVDCOutputUVFault"
#define MCU_233_BOBC_297H_BOBC_LLCHVDC_OVER_VOLT_FAULT_NAME "BOBC_LLCHVDCOverVoltFault"
#define MCU_233_BOBC_297H_BOBC_PFCA_CFREQU_FAULT_NAME "BOBC_PFCACfrequFault"
#define MCU_233_BOBC_297H_BOBC_BOOKING_CHRG_STS_NAME "BOBC_BookingChrgSts"
#define MCU_233_EPS_117H_EPS_STR_ANG_V_NAME "EPS_StrAng_V"
#define MCU_233_EPS_117H_EPS_MODE_NAME "EPS_Mode"
#define MCU_233_EPS_117H_EPS_FAILURE_STS_NAME "EPS_FailureSts"
#define MCU_233_EPS_117H_EPS_CALIBRATION_STS_NAME "EPS_CalibrationSts"
#define MCU_233_EPS_117H_EPS_STR_ANG_NAME "EPS_StrAng"
#define MCU_233_EPS_117H_EPS_STR_ANG_SPD_NAME "EPS_StrAngSpd"
#define MCU_233_EPS_117H_EPS_FAULT_LEVEL_NAME "EPSFaultLevel"
#define MCU_233_EPS_117H_EPS_FAIL_STATUS_NAME "EPS_FailStatus"
#define MCU_233_EPS_117H_EPS_STR_ANG_SPD_V_NAME "EPS_StrAngSpd_V"
#define MCU_233_EPS_117H_EPS_FAULT_CODE_NAME "EPS_Fault_CODE"
#define MCU_233_EPS_117H_EPS_CHECKSUM_NAME "EPS_Checksum"
#define MCU_233_EPS_117H_EPS_ROLLING_COUNTER_NAME "EPS_RollingCounter"
#define MCU_233_EPS_131H_VIBRATION_ALARM_CTRL_STS_NAME "Vibration_AlarmCtrlSts"
#define MCU_233_EPS_131H_EPS_CTRL_STS_NAME "EPS_CtrlSts"
#define MCU_233_EPS_131H_DRIVER_INPUT_TRQ_VALUE_NAME "DriverInputTrqValue"
#define MCU_233_EPS_131H_EPS_CAMERA_CTRL_STATUS_NAME "EPS_CameraCtrlStatus"
#define MCU_233_EPS_131H_EPS_DRIVER_INTERVENTION_STEERING_NAME "EPS_DriverInterventionSteering"
#define MCU_233_EPS_131H_EPS_DRIVER_INTERVENTION_STEERING_V_NAME "EPS_DriverInterventionSteeringV"
#define MCU_233_EPS_131H_DRIVER_INPUT_TORQUE_V_NAME "DriverInput_Torque_V"
#define MCU_233_EPS_131H_EPS_TORQUE_NAME "EPS_Torque"
#define MCU_233_EPS_131H_EPS_OUTPUT_CURRENT_NAME "EPS_OutputCurrent"
#define MCU_233_EPS_131H_HAND_DETECTION_NAME "HandDetection"
#define MCU_233_EPS_131H_EPS_CHECKSUM_NAME "EPS_Checksum"
#define MCU_233_EPS_131H_EPS_ROLLING_COUNTER_NAME "EPS_RollingCounter"
#define MCU_233_EHB_13_AH_EHB_BRAKE_CONDITION_NAME "EHB_BrakeCondition"
#define MCU_233_EHB_13_AH_EHB_STATUS_NAME "EHBStatus"
#define MCU_233_EHB_13_AH_EHB_S_OUTPUT_ROD_DRIVER_NAME "EHB_sOutputRodDriver"
#define MCU_233_EHB_13_AH_EHB_S_OUTPUT_ROD_ACT_V_NAME "EHB_sOutputRodAct_V"
#define MCU_233_EHB_13_AH_EHB_S_OUTPUT_ROD_DRIVER_V_NAME "EHB_sOutputRodDriver_V"
#define MCU_233_EHB_13_AH_EHB_S_OUTPUT_ROD_ACT_NAME "EHB_sOutputRodAct"
#define MCU_233_EHB_13_AH_EHB_MCYLINDER_PRESSURE_V_NAME "EHB_Mcylinder_Pressure_V"
#define MCU_233_EHB_13_AH_EHB_MCYLINDER_PRESSURE_NAME "EHB_Mcylinder_Pressure"
#define MCU_233_EHB_13_AH_EHB_EHB_DIAG_ACTIVE_NAME "EHB_EHBDiagActive"
#define MCU_233_EHB_13_AH_EHB_FAULT_LEVEL_NAME "EHBFaultLevel"
#define MCU_233_EHB_13_AH_EHB_FAULT_MESSAGE_NAME "EHBFault_Message"
#define MCU_233_EHB_13_AH_EHB_CHECKSUM_NAME "EHB_Checksum"
#define MCU_233_EHB_13_AH_EHB_ROLLING_COUNTER_NAME "EHB_RollingCounter"
#define MCU_233_EHB_13_CH_EHB_BRAKE_PEDAL_APPLIED_V_NAME "EHB_BrakePedalApplied_V"
#define MCU_233_EHB_13_CH_EHB_BRAKE_PEDAL_APPLIED_NAME "EHB_BrakePedalApplied"
#define MCU_233_EHB_13_CH_EHB_RGN_BRK_TQ_REQ_NAME "EHB_RgnBrkTqReq"
#define MCU_233_EHB_13_CH_EHB_LLS_V_NAME "EHB_LLS_V"
#define MCU_233_EHB_13_CH_EHB_LLS_NAME "EHB_LLS"
#define MCU_233_EHB_13_CH_EHB_DOUBLE_FLA_LIGHTS_RQ_NAME "EHB_DoubleFlaLightsRQ"
#define MCU_233_EHB_13_CH_EHB_BRK_LIGHTS_RQ_NAME "EHB_BrkLightsRQ"
#define MCU_233_EHB_13_CH_EHB_RGN_BRK_ST_NAME "EHB_RgnBrkSt"
#define MCU_233_EHB_13_CH_EHB_RGN_BRK_TQ_REQ_V_NAME "EHB_RgnBrkTqReq_V"
#define MCU_233_EHB_13_CH_EHB_P_RUNOUT_NAME "EHB_pRunout"
#define MCU_233_EHB_13_CH_EHB_EXT_REQ_STATUS_NAME "EHB_ExtReqStatus"
#define MCU_233_EHB_13_CH_EHB_EXT_REQ_PRIO_NAME "EHB_ExtReqPrio"
#define MCU_233_EHB_13_CH_EHB_HMI_WARNING_ON_NAME "EHB_HMI_WarningOn"
#define MCU_233_EHB_13_CH_EHB_P_RUNOUT_V_NAME "EHB_pRunout_V"
#define MCU_233_EHB_13_CH_EHB_AWB_LEVEL_NAME "EHB_AWBLevel"
#define MCU_233_EHB_13_CH_EHB_AEB_ACTIVE_NAME "EHB_AEBActive"
#define MCU_233_EHB_13_CH_EHB_EBA_ACTIVE_NAME "EHB_EBAActive"
#define MCU_233_EHB_13_CH_EHB_AWB_ACTIVE_NAME "EHB_AWBActive"
#define MCU_233_EHB_13_CH_EHB_PREFILL_ACTIVE_NAME "EHB_PrefillActive"
#define MCU_233_EHB_13_CH_EHB_CHECKSUM_NAME "EHB_Checksum"
#define MCU_233_EHB_13_CH_EHB_ROLLING_COUNTER_NAME "EHB_RollingCounter"
#define MCU_233_EHB_13_BH_EHB_HMI_VCU_COM_WARNING_NAME "EHB_HMI_VCUComWarning"
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_MODE_NAME "EHB_EPBSlv_Mode"
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_CLAMP_FORCE_V_NAME "EHB_EPBSlv_ClampForceV"
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_WARNING_NAME "EHB_EPBSlv_Warning"
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_HOST_AVAILABILITY_NAME "EHB_EPBSlv_HostAvailability"
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_ACTUATOR_STATUS_NAME "EHB_EPBSlv_ActuatorStatus"
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_CLAMP_FORCE_NAME "EHB_EPBSlv_ClampForce"
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAULT_MESSAGE_NAME "EHB_EPBSlvFault_Message"
#define MCU_233_EHB_13_BH_EHB_EPB_SLV_FAIL_LEVEL_NAME "EHB_EPBSlv_FailLevel"
#define MCU_233_EHB_13_BH_EHB_P_SET_EBR_NAME "EHB_pSetEbr"
#define MCU_233_EHB_13_BH_EHB_P_SET_EBR_V_NAME "EHB_pSetEbr_V"
#define MCU_233_EHB_13_BH_EHB_HBC_REQUEST_NAME "EHB_HbcRequest"
#define MCU_233_EHB_13_BH_EHB_CHECKSUM_NAME "EHB_Checksum"
#define MCU_233_EHB_13_BH_EHB_ROLLING_COUNTER_NAME "EHB_RollingCounter"
#define MCU_233_ESC_101H_ESC_RR_WHL_SPD_DIR_NAME "ESC_RRWhlSpd_Dir"
#define MCU_233_ESC_101H_ESC_RL_WHL_SPD_DIR_NAME "ESC_RLWhlSpd_Dir"
#define MCU_233_ESC_101H_ESC_FR_WHL_SPD_DIR_NAME "ESC_FRWhlSpd_Dir"
#define MCU_233_ESC_101H_ESC_FL_WHL_SPD_DIR_NAME "ESC_FLWhlSpd_Dir"
#define MCU_233_ESC_101H_WSS_RR_COUNTS_SUM_VALID_NAME "WssRRCountsSumValid"
#define MCU_233_ESC_101H_WSS_RL_COUNTS_SUM_VALID_NAME "WssRLCountsSumValid"
#define MCU_233_ESC_101H_WSS_FR_COUNTS_SUM_VALID_NAME "WssFRCountsSumValid"
#define MCU_233_ESC_101H_WSS_FL_COUNTS_SUM_VALID_NAME "WssFLCountsSumValid"
#define MCU_233_ESC_101H_WSS_FL_COUNTS_SUM_NAME "WssFLCountsSum"
#define MCU_233_ESC_101H_WSS_FR_COUNTS_SUM_NAME "WssFRCountsSum"
#define MCU_233_ESC_101H_WSS_RL_COUNTS_SUM_NAME "WssRLCountsSum"
#define MCU_233_ESC_101H_WSS_RR_COUNTS_SUM_NAME "WssRRCountsSum"
#define MCU_233_ESC_101H_ESC_CHECKSUM_NAME "ESC_Checksum"
#define MCU_233_ESC_101H_ESC_ROLLING_COUNTER_NAME "ESC_RollingCounter"
#define MCU_233_ESC_102H_ESC_FL_WHL_SPD_NAME "ESC_FLWhlSpd"
#define MCU_233_ESC_102H_ESC_FR_WHL_SPD_NAME "ESC_FRWhlSpd"
#define MCU_233_ESC_102H_ESC_RL_WHL_SPD_NAME "ESC_RLWhlSpd"
#define MCU_233_ESC_102H_ESC_RR_WHL_SPD_NAME "ESC_RRWhlSpd"
#define MCU_233_ESC_102H_ESC_RR_WHL_SPD_V_NAME "ESC_RRWhlSpd_V"
#define MCU_233_ESC_102H_ESC_RL_WHL_SPD_V_NAME "ESC_RLWhlSpd_V"
#define MCU_233_ESC_102H_ESC_FR_WHL_SPD_V_NAME "ESC_FRWhlSpd_V"
#define MCU_233_ESC_102H_ESC_FL_WHL_SPD_V_NAME "ESC_FLWhlSpd_V"
#define MCU_233_ESC_102H_ESC_CHECKSUM_NAME "ESC_Checksum"
#define MCU_233_ESC_102H_ESC_ROLLING_COUNTER_NAME "ESC_RollingCounter"
#define MCU_233_ESC_104H_ESC_VDC_FAIL_STS_NAME "ESC_VDCFailSts"
#define MCU_233_ESC_104H_ESC_VDC_ACTIVE_NAME "ESC_VDCActive"
#define MCU_233_ESC_104H_ESC_TCS_FAIL_STS_NAME "ESC_TCSFailSts"
#define MCU_233_ESC_104H_ESC_TCS_ACTIVE_NAME "ESC_TCSActive"
#define MCU_233_ESC_104H_ESC_EBD_FAIL_STS_NAME "ESC_EBDFailSts"
#define MCU_233_ESC_104H_ESC_EBD_ACTIVE_NAME "ESC_EBDActive"
#define MCU_233_ESC_104H_ESC_ABS_FAIL_STS_NAME "ESC_ABSFailSts"
#define MCU_233_ESC_104H_ESC_ABS_ACTIVE_NAME "ESC_ABSActive"
#define MCU_233_ESC_104H_ESC_DTC_FAIL_STS_NAME "ESC_DTCFailSts"
#define MCU_233_ESC_104H_ESC_DTC_ACTIVE_NAME "ESC_DTC_Active"
#define MCU_233_ESC_104H_ESC_HBA_FAIL_STS_NAME "ESC_HBAFailSts"
#define MCU_233_ESC_104H_ESC_HBA_ACTIVE_NAME "ESC_HBAActive"
#define MCU_233_ESC_104H_ESC_HHC_FAIL_STS_NAME "ESC_HHCFailSts"
#define MCU_233_ESC_104H_ESC_HHC_ACTIVE_NAME "ESC_HHCActive"
#define MCU_233_ESC_104H_ESC_STANDSTILL_FLAG_NAME "ESC_StandstillFlag"
#define MCU_233_ESC_104H_ESC_AVH_AVAILABLE_NAME "ESC_AVHAvailable"
#define MCU_233_ESC_104H_ESC_AVH_STS_NAME "ESC_AVHSts"
#define MCU_233_ESC_104H_ESC_EDC_ACTIVE_NAME "ESC_EDCActive"
#define MCU_233_ESC_104H_ESC_EDC_AVAILABLE_NAME "ESC_EDCAvailable"
#define MCU_233_ESC_104H_ESC_ESC_SWITCH_PUSHING_NAME "ESC_ESC_SwitchPushing"
#define MCU_233_ESC_104H_ESC_ESC_SWITCH_STATUS_NAME "ESC_ESC_SwitchStatus"
#define MCU_233_ESC_104H_ESC_CDP_AVAILABLE_NAME "ESC_CDPAvailable"
#define MCU_233_ESC_104H_ESC_CDP_ACTIVE_NAME "ESC_CDPActive"
#define MCU_233_ESC_104H_ESC_EPB_PARK_REQ_NAME "ESC_EPBParkReq"
#define MCU_233_ESC_104H_ESC_VEH_SPD_NAME "ESC_VehSpd"
#define MCU_233_ESC_104H_ESC_EPB_SWITCH_PUSHING_NAME "ESC_EPB_SwitchPushing"
#define MCU_233_ESC_104H_ESC_ESC_DIAG_ACTIVE_NAME "ESC_ESCDiagActive"
#define MCU_233_ESC_104H_ESC_DRUM_MODE_NAME "ESC_DrumMode"
#define MCU_233_ESC_104H_ESC_BRAKE_OVER_HEAT_NAME "ESC_BrakeOverHeat"
#define MCU_233_ESC_104H_ESC_VEH_SPD_V_NAME "ESC_VehSpd_V"
#define MCU_233_ESC_104H_ESC_AVH_SWITCH_PUSHING_NAME "ESC_AVH_SwitchPushing"
#define MCU_233_ESC_104H_ESC_CHECKSUM_NAME "ESC_Checksum"
#define MCU_233_ESC_104H_ESC_ROLLING_COUNTER_NAME "ESC_RollingCounter"
#define MCU_233_ESC_109H_ESC_LATERAL_ACCE_NAME "ESC_LateralAcce"
#define MCU_233_ESC_109H_ESC_LONGIT_ACCE_NAME "ESC_LongitAcce"
#define MCU_233_ESC_109H_ESC_YAW_RATE_NAME "ESC_YawRate"
#define MCU_233_ESC_109H_ESC_SLOPE_V_NAME "ESC_Slope_V"
#define MCU_233_ESC_109H_ESC_YAW_RATE_V_NAME "ESC_YawRate_V"
#define MCU_233_ESC_109H_ESC_LONGIT_ACCE_V_NAME "ESC_LongitAcce_V"
#define MCU_233_ESC_109H_ESC_LATERAL_ACCE_V_NAME "ESC_LateralAcce_V"
#define MCU_233_ESC_109H_ESC_SLOPE_NAME "ESC_Slope"
#define MCU_233_ESC_109H_ESC_CHECKSUM_NAME "ESC_Checksum"
#define MCU_233_ESC_109H_ESC_ROLLING_COUNTER_NAME "ESC_RollingCounter"
#define MCU_233_ESC_125H_ESC_MCYLINDER_PRESSURE_NAME "ESC_Mcylinder_Pressure"
#define MCU_233_ESC_125H_ESC_TORQ_REQ_RESP_V_NAME "ESCTorqReqResp_V"
#define MCU_233_ESC_125H_ESC_MCYLINDER_PRESSURE_V_NAME "ESC_Mcylinder_Pressure_V"
#define MCU_233_ESC_125H_ESC_P_EST_MAX_NAME "ESC_pEstMax"
#define MCU_233_ESC_125H_ESC_TORQ_REQ_RESP_NAME "ESCTorqReqResp"
#define MCU_233_ESC_125H_ESC_FAULT_LEVEL_NAME "ESC_FaultLevel"
#define MCU_233_ESC_125H_ESC_HMI_WARNING_ON_NAME "ESC_HMI_WarningOn"
#define MCU_233_ESC_125H_ESC_DOUBLE_FLA_LAMP_ON_NAME "ESC_DoubleFlaLampOn"
#define MCU_233_ESC_125H_ESC_BLA_LAMP_ON_NAME "ESC_BLALampOn"
#define MCU_233_ESC_125H_AVH_FUN_LAMP_ON_NAME "AVH_Fun_LampOn"
#define MCU_233_ESC_125H_ESC_FUN_LAMP_ON_NAME "ESC_Fun_LampOn"
#define MCU_233_ESC_125H_ESC_OFF_LAMP_ON_NAME "ESC_Off_LampOn"
#define MCU_233_ESC_125H_ESC_FAULT_MESSAGE_NAME "ESCFault_Message"
#define MCU_233_ESC_125H_ESC_CHECKSUM_NAME "ESC_Checksum"
#define MCU_233_ESC_125H_ESC_ROLLING_COUNTER_NAME "ESC_RollingCounter"
#define MCU_233_ESC_126H_TPMS_RR_WARNING_NAME "TPMS_RR_warning"
#define MCU_233_ESC_126H_TPMS_RL_WARNING_NAME "TPMS_RL_warning"
#define MCU_233_ESC_126H_TPMS_FR_WARNING_NAME "TPMS_FR_warning"
#define MCU_233_ESC_126H_TPMS_FL_WARNING_NAME "TPMS_FL_warning"
#define MCU_233_ESC_126H_TPMS_PRE_WARNING_ON_NAME "TPMS_Pre_WarningOn"
#define MCU_233_ESC_126H_TPMS_STATUS_NAME "TPMS_Status"
#define MCU_233_ESC_126H_TPMS_DG_PRE_WARNING_TEXT_NAME "TPMS_DgPre_Warning_Text"
#define MCU_233_ESC_126H_TPMS_MALFUNCTION_LAMP_ON_NAME "TPMS_Malfunction_LampOn"
#define MCU_233_ESC_126H_TPMS_RESET_PROGRESS_NAME "TPMS_Reset_Progress"
#define MCU_233_ESC_126H_TPMS_PRE_WARNING_TEXT_NAME "TPMS_Pre_Warning_Text"
#define MCU_233_ESC_126H_TPMS_FAULT_MESSAGE_NAME "TPMSFault_Message"
#define MCU_233_ESC_126H_ESC_CHECKSUM_NAME "ESC_Checksum"
#define MCU_233_ESC_126H_ESC_ROLLING_COUNTER_NAME "ESC_RollingCounter"
#define MCU_233_ESC_108H_ESC_EPB_MST_HOST_AVAILABILITY_NAME "ESC_EPBMst_HostAvailability"
#define MCU_233_ESC_108H_ESC_EPB_MST_ACTUATOR_STATUS_NAME "ESC_EPBMst_ActuatorStatus"
#define MCU_233_ESC_108H_ESC_EPB_MST_CLAMP_FORCE_V_NAME "ESC_EPBMst_ClampForceV"
#define MCU_233_ESC_108H_ESC_EPB_MST_REPAIR_ACTIVE_NAME "ESC_EPBMst_RepairActive"
#define MCU_233_ESC_108H_ESC_EPB_MST_ROLLERBENCH_ACTIVE_NAME "ESC_EPBMst_RollerbenchActive"
#define MCU_233_ESC_108H_ESC_EPB_MST_REQ_NAME "ESC_EPBMst_Req"
#define MCU_233_ESC_108H_ESC_EPB_MST_CLAMP_FORCE_NAME "ESC_EPBMst_ClampForce"
#define MCU_233_ESC_108H_ESC_TOTAL_BRK_PRES_REQ_V_NAME "ESC_TotalBrkPresReq_V"
#define MCU_233_ESC_108H_ESC_TOTAL_BRK_PRES_REQ_NAME "ESC_TotalBrkPresReq"
#define MCU_233_ESC_108H_ESC_HBC_ACTIVE_NAME "ESC_HBCActive"
#define MCU_233_ESC_108H_ESC_HBC_AVAILABLE_NAME "ESC_HBCAvailable"
#define MCU_233_ESC_108H_ESC_CHECKSUM_NAME "ESC_Checksum"
#define MCU_233_ESC_108H_ESC_ROLLING_COUNTER_NAME "ESC_RollingCounter"
#define MCU_233_ESC_10_CH_EPB_CDP_DEC_RQ_STS_NAME "EPB_CDPDec_RQSts"
#define MCU_233_ESC_10_CH_EPB_CONTROL_MODE_NAME "EPB_Control_Mode"
#define MCU_233_ESC_10_CH_EPB_STATUS_NAME "EPB_Status"
#define MCU_233_ESC_10_CH_ESC_EPB_MST_STATE_AVAILABLE_NAME "ESC_EPBMst_StateAvailable"
#define MCU_233_ESC_10_CH_EPB_RELEASE_WITHOUT_BRAKE_NAME "EPBRelease_Without_Brake"
#define MCU_233_ESC_10_CH_EPB_RELEASE_WITHOUT_DRV_SEAT_BELT_NAME "EPBRelease_Without_DrvSeatBelt"
#define MCU_233_ESC_10_CH_EPB_RELEASE_WITHOUT_DRIVER_DOOR_NAME "EPBRelease_Without_DriverDoor"
#define MCU_233_ESC_10_CH_EPB_HIGH_TEM_CLAMP_WK_STS_NAME "EPB_HighTemClamp_WkSts"
#define MCU_233_ESC_10_CH_EPB_SLIP_SLOPE_CLAMP_WK_STS_NAME "EPB_SlipSlopeClamp_WkSts"
#define MCU_233_ESC_10_CH_EPB_TOW_MODE_WK_STS_NAME "EPB_TowMode_WkSts"
#define MCU_233_ESC_10_CH_EPB_WARNING_LAMP_ON_NAME "EPB_Warning_LampOn"
#define MCU_233_ESC_10_CH_EPB_PARK_LAMP_ON_NAME "EPB_ParkLampOn"
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAULT_MESSAGE_NAME "ESC_EPBMstFault_Message"
#define MCU_233_ESC_10_CH_ESC_EPB_MST_FAIL_LEVEL_NAME "ESC_EPBMst_FailLevel"
#define MCU_233_ESC_10_CH_ESC_CHECKSUM_NAME "ESC_Checksum"
#define MCU_233_ESC_10_CH_ESC_ROLLING_COUNTER_NAME "ESC_RollingCounter"
#define MCU_233_ADAS_CAM_107H_CAMERA_TORQUE_REQ_NAME "Camera_TorqueReq"
#define MCU_233_ADAS_CAM_107H_CAMERA_DEGREE_REQ_NAME "Camera_DegreeReq"
#define MCU_233_ADAS_CAM_107H_CAMERA_DEGREE_REQ_VALID_NAME "Camera_DegreeReqValid"
#define MCU_233_ADAS_CAM_107H_CAMERA_TORQUE_REQ_VALID_NAME "Camera_TorqueReqValid"
#define MCU_233_ADAS_CAM_107H_CAMERA_SYS_STATUS_TO_EPS_NAME "Camera_SysStatusToEPS"
#define MCU_233_ADAS_CAM_107H_CAMERA_DEGREE_SPD_REQ_NAME "Camera_DegreeSpdReq"
#define MCU_233_ADAS_CAM_107H_CHECK_SUM_NAME "CheckSum"
#define MCU_233_ADAS_CAM_107H_ROLING_COUNTER_NAME "RolingCounter"
#define MCU_233_ADAS_CAM_10_AH_CAMERA_E_LKA_WORKING_NAME "Camera_eLKAWorking"
#define MCU_233_ADAS_CAM_10_AH_CAMERA_LDW_STATUS_NAME "Camera_LDWStatus"
#define MCU_233_ADAS_CAM_10_AH_CAMERA_BLOCKAGE_STS_NAME "Camera_BlockageSts"
#define MCU_233_ADAS_CAM_10_AH_CAMERA_FAULT_NAME "Camera_Fault"
#define MCU_233_ADAS_CAM_10_AH_CAMERA_CALIBRATED_STATUS_NAME "Camera_CalibratedStatus"
#define MCU_233_ADAS_CAM_10_AH_CAMERA_R_LANE_STATUS_NAME "Camera_RLaneStatus"
#define MCU_233_ADAS_CAM_10_AH_CAMERA_L_LANE_STATUS_NAME "Camera_LLaneStatus"
#define MCU_233_ADAS_CAM_10_AH_CAMERA_E_LKA_STATUS_NAME "Camera_eLKAStatus"
#define MCU_233_ADAS_CAM_10_AH_ISA_OVER_SPEED_WARNING_LEVEL_NAME "ISA_OverSpeedWarningLevel"
#define MCU_233_ADAS_CAM_10_AH_ISA_STS_NAME "ISASts"
#define MCU_233_ADAS_CAM_10_AH_CAMERA_HAND_OFF_WARNING_NAME "Camera_HandOFFWarning"
#define MCU_233_ADAS_CAM_10_AH_CAMERA_E_LKA_WARNING_NAME "Camera_eLKAWarning"
#define MCU_233_ADAS_CAM_10_AH_SLIF_LIMIT_VALUE_NAME "SLIF_LimitValue"
#define MCU_233_ADAS_CAM_10_AH_SLIF_LIMIT_VALUE_CHANGE_TYPE_NAME "SLIF_LimitValueChangeType"
#define MCU_233_ADAS_CAM_118H_AEB_AEB_ACTIVE_NAME "AEB_AEBActive"
#define MCU_233_ADAS_CAM_118H_AEB_EBA_ACTIVE_NAME "AEB_EBAActive"
#define MCU_233_ADAS_CAM_118H_AEB_AWB_ACTIVE_NAME "AEB_AWBActive"
#define MCU_233_ADAS_CAM_118H_AEB_PRE_FILL_ACTIVE_NAME "AEB_PreFillActive"
#define MCU_233_ADAS_CAM_118H_ACC_ENG_TRQ_REQ_ACTIVE_NAME "ACC_EngTrqReqActive"
#define MCU_233_ADAS_CAM_118H_ACC_DECEL_REQ_NAME "ACC_Decel_Req"
#define MCU_233_ADAS_CAM_118H_AEB_VEH_HLD_REQ_NAME "AEB_VehHldReq"
#define MCU_233_ADAS_CAM_118H_AEB_AWB_LEVEL_NAME "AEB_AWBLevel"
#define MCU_233_ADAS_CAM_118H_AEB_AEB_FAILURE_NAME "AEB_AEBFailure"
#define MCU_233_ADAS_CAM_118H_ACC_DECEL_REQ_VALUE_NAME "ACC_Decel_ReqValue"
#define MCU_233_ADAS_CAM_118H_ACC_ENG_TRQ_REQ_NAME "ACC_EngTrqReq"
#define MCU_233_ADAS_CAM_118H_AEB_REQ_DEC_VALUE_NAME "AEB_ReqDecValue"
#define MCU_233_ADAS_CAM_118H_CHECK_SUM_NAME "CheckSum"
#define MCU_233_ADAS_CAM_118H_ROLING_COUNTER_NAME "RolingCounter"
#define MCU_233_ADAS_CAM_140H_ACC_TAKE_OVER_REQ_NAME "ACC_TakeOverReq"
#define MCU_233_ADAS_CAM_140H_ACC_MOD_STS_NAME "ACC_ModSts"
#define MCU_233_ADAS_CAM_140H_AEB_AEB_STS_NAME "AEB_AEBSts"
#define MCU_233_ADAS_CAM_140H_AEB_PRE_WARNING_ACTIVE_NAME "AEB_PreWarningActive"
#define MCU_233_ADAS_CAM_140H_AEB_LATENT_WARNING_ACTIVE_NAME "AEB_LatentWarningActive"
#define MCU_233_ADAS_CAM_140H_ACC_OBJ_VALID_NAME "ACC_ObjValid"
#define MCU_233_ADAS_CAM_140H_ACC_TAR_OBJ_BAR_DIS_NAME "ACC_TarObjBarDis"
#define MCU_233_ADAS_CAM_140H_ACC_FOLLOW_OBJ_DIS_NAME "ACC_FollowObjDis"
#define MCU_233_ADAS_CAM_140H_ACC_SPEED_SET_DIS_NAME "ACC_SpeedSetDis"
#define MCU_233_ADAS_CAM_140H_ACC_EGO_TARGET_TYPE_NAME "ACC_EgoTargetType"
#define MCU_233_ADAS_CAM_140H_ACC_TEXT_IN_FO_NAME "ACC_TextInFo"
#define MCU_233_ADAS_CAM_140H_ACC_TIM_GAP_SET_NAME "ACC_TimGapSet"
#define MCU_233_ADAS_CAM_140H_CHECK_SUM_NAME "CheckSum"
#define MCU_233_ADAS_CAM_140H_ROLLING_COUNTER_NAME "RollingCounter"
#define MCU_233_ADAS_CAM_318H_ADAS_ELK_SWITCH_FB_NAME "ADAS_ELKSwitchFb"
#define MCU_233_ADAS_CAM_318H_ADAS_LDW_ALARM_SENSITIVITY_FB_NAME "ADAS_LDWAlarmSensitivityFb"
#define MCU_233_ADAS_CAM_318H_ADAS_LDW_ALARM_METHOD_FB_NAME "ADAS_LDWAlarmMethodFb"
#define MCU_233_ADAS_CAM_318H_ADAS_LDW_SWITCH_FB_NAME "ADAS_LDWSwitchFb"
#define MCU_233_ADAS_CAM_318H_ADAS_FCW_AEB_ALARM_SENSITIVITY_FB_NAME "ADAS_FCW_AEBAlarmSensitivityFb"
#define MCU_233_ADAS_CAM_318H_ADAS_FCW_AEB_SWITCH_FB_NAME "ADAS_FCW_AEBSwitchFb"
#define MCU_233_ADAS_CAM_318H_ADAS_SLWF_ALARM_METHOD_SET_NAME "ADAS_SLWFAlarmMethodSet"
#define MCU_233_ADAS_CAM_318H_ADAS_SLWF_SWITCH_FB_NAME "ADAS_SLWFSwitchFb"
#define MCU_233_ADAS_CAM_318H_ADAS_SLIF_REMINDER_METHOD_FB_NAME "ADAS_SLIFReminderMethodFb"
#define MCU_233_ADAS_CAM_318H_ADAS_SLIF_SWITCH_FB_NAME "ADAS_SLIFSwitchFb"
#define MCU_233_ADAS_CAM_318H_ADAS_ELK_ALARM_METHOD_FB_NAME "ADAS_ELKAlarmMethodFb"
#define MCU_233_ADAS_RAD_070H_ARS_MOIS_STATE_NAME "ARS_MOIS_State"
#define MCU_233_ADAS_RAD_070H_ARS_MOIS_WARNING_NAME "ARS_MOIS_Warning"
#define MCU_233_ADAS_RAD_070H_ASR_MOIS_ALARM_METHOD_FB_NAME "ASR_MOISAlarmMethodFb"
#define MCU_233_ADAS_RAD_070H_ASR_MOIS_SWITCH_FB_NAME "ASR_MOIS_SwitchFb"
#define MCU_233_ADAS_RL_RAD_071H_ARS_DOW_SWITCH_FB_NAME "ARS_DOWSwitchFb"
#define MCU_233_ADAS_RL_RAD_071H_ARS_BSIS_ALARM_METHOD_FB_NAME "ARS_BSISAlarmMethodFb"
#define MCU_233_ADAS_RL_RAD_071H_ARS_BSD_LCA_L_STATE_NAME "ARS_BSD_LCA_L_State"
#define MCU_233_ADAS_RL_RAD_071H_ARS_L_BSIS_L_STATE_NAME "ARS_L_BSIS_L_State"
#define MCU_233_ADAS_RL_RAD_071H_ARS_L_BSIS_L_WARNING_NAME "ARS_L_BSIS_L_Warning"
#define MCU_233_ADAS_RL_RAD_071H_ARS_BSDL_WARNING_NAME "ARS_BSDL_Warning"
#define MCU_233_ADAS_RL_RAD_071H_ARS_LCAL_WARNING_NAME "ARS_LCAL_Warning"
#define MCU_233_ADAS_RL_RAD_071H_ARS_BSD_SWITCH_FB_NAME "ARS_BSDSwitchFb"
#define MCU_233_ADAS_RL_RAD_071H_ARS_DOWL_WARNING_NAME "ARS_DOWL_Warning"
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_BSD_LCA_R_STATE_NAME "ARS_BSD_LCA_R_State"
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_R_BSIS_R_STATE_NAME "ARS_R_BSIS_R_State"
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_R_BSIS_R_WARNING_NAME "ARS_R_BSIS_R_Warning"
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_BSDR_WARNING_NAME "ARS_BSDR_Warning"
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_LCAR_WARNING_NAME "ARS_LCAR_Warning"
#define MCU_233_ADAS_RR_RAD_02_BH_ARS_DOWR_WARNING_NAME "ARS_DOWR_Warning"
#define MCU_233_ADAS_NM_406H_NM_DEST_ADDRESS_NAME "NM_DEST_ADDRESS"
#define MCU_233_ADAS_NM_406H_NM_SLEEP_ACK_NAME "NM_SLEEP_ACK"
#define MCU_233_ADAS_NM_406H_NM_SLEEP_IND_NAME "NM_SLEEP_IND"
#define MCU_233_ADAS_NM_406H_NM_LIMPHOME_NAME "NM_LIMPHOME"
#define MCU_233_ADAS_NM_406H_NM_RING_NAME "NM_RING"
#define MCU_233_ADAS_NM_406H_NM_ALIVE_NAME "NM_ALIVE"
#define MCU_233_ADAS_NM_408H_NM_DEST_ADDRESS_NAME "NM_DEST_ADDRESS"
#define MCU_233_ADAS_NM_408H_NM_SLEEP_ACK_NAME "NM_SLEEP_ACK"
#define MCU_233_ADAS_NM_408H_NM_SLEEP_IND_NAME "NM_SLEEP_IND"
#define MCU_233_ADAS_NM_408H_NM_LIMPHOME_NAME "NM_LIMPHOME"
#define MCU_233_ADAS_NM_408H_NM_RING_NAME "NM_RING"
#define MCU_233_ADAS_NM_408H_NM_ALIVE_NAME "NM_ALIVE"
#define MCU_233_ACU_021H_AIR_BAG_FAIL_STS_NAME "AirBagFailSts"
#define MCU_233_ACU_021H_CRASH_OUTPUT_STS_NAME "CrashOutputSts"
#define MCU_233_ACU_021H_ACU_CHECK_SUM_NAME "ACU_CheckSum"
#define MCU_233_ACU_021H_ACU_ROLLING_COUNTER_NAME "ACU_RollingCounter"
#define MCU_233_VCU_119H_VCU_GEAR_LEVEL_STS_NAME "VCU_GearLevelSts"
#define MCU_233_VCU_119H_VCU_GEAR_LEVEL_V_NAME "VCU_GearLevel_V"
#define MCU_233_VCU_119H_VCU_BRAKE_PEDAL_STS_V_NAME "VCU_BrakePedalSts_V"
#define MCU_233_VCU_119H_VCU_BRAKE_PEDAL_STS_NAME "VCU_BrakePedalSts"
#define MCU_233_VCU_119H_VCU_ACC_PEDL_POSN_NAME "VCU_AccPedlPosn"
#define MCU_233_VCU_119H_VCU_RGN_MOT_TRQ_V_NAME "VCU_RgnMotTrq_V"
#define MCU_233_VCU_119H_VCU_MOT_TRQ_RGN_LIM_V_NAME "VCU_MotTrqRgnLim_V"
#define MCU_233_VCU_119H_VCU_VEHICLE_STS_NAME "VCU_VehicleSts"
#define MCU_233_VCU_119H_VCU_ACC_PEDL_POSN_V_NAME "VCU_AccPedlPosn_V"
#define MCU_233_VCU_119H_VCU_MOT_TRQ_RGN_LIM_NAME "VCU_MotTrqRgnLim"
#define MCU_233_VCU_119H_VCU_RGN_MOT_TRQ_NAME "VCU_RgnMotTrq"
#define MCU_233_VCU_119H_CHECKSUM_NAME "Checksum"
#define MCU_233_VCU_119H_ROLLING_COUNTER_NAME "RollingCounter"
#define MCU_233_VCU_123H_TPMS_RESET_REQUEST_NAME "TPMS_Reset_Request"
#define MCU_233_VCU_123H_BCM_DRV_SEAT_BELT_R_ST_NAME "BCM_DrvSeatBeltRSt"
#define MCU_233_VCU_123H_BCM_DRIVER_DOOR_STS_NAME "BCM_DriverDoorSts"
#define MCU_233_VCU_123H_VCU_KL15_ON_NAME "VCU_KL15_ON"
#define MCU_233_VCU_123H_ESC_OFF_SWITCH_NAME "ESC_Off_Switch"
#define MCU_233_VCU_123H_AVH_SWITCH_NAME "AVH_Switch"
#define MCU_233_VCU_123H_GW_OUTSIDE_TEMP_NAME "GW_OutsideTemp"
#define MCU_233_VCU_123H_VCU_MCU_FAULT_LEVEL_NAME "VCU_MCUFaultLevel"
#define MCU_233_VCU_123H_GW_OUTSIDE_TEMP_V_NAME "GW_OutsideTemp_V"
#define MCU_233_VCU_123H_CHECKSUM_NAME "Checksum"
#define MCU_233_VCU_123H_ROLLING_COUNTER_NAME "RollingCounter"
#define MCU_233_VCU_251H_VCU_GASPEDAL_OVERRIDE_NAME "VCU_GaspedalOverride"
#define MCU_233_VCU_251H_VCU_GASPEDAL_OVERRIDE_V_NAME "VCU_GaspedalOverride_V"
#define MCU_233_VCU_201H_VCU_EPB_WIRE_CONTROL_REQUEST_NAME "VCU_EPB_WireControl_Request"
#define MCU_233_VCU_201H_VCU_EPB_CTL_MODE_NAME "VCU_EPBCtl_Mode"
#define MCU_233_VCU_201H_VCU_EPB_TOW_MODE_ENABLE_NAME "VCU_EPB_TowMode_Enable"
#define MCU_233_VCU_201H_VCU_MOT_ACTU_SPD_NAME "VCU_MotActuSpd"
#define MCU_233_VCU_201H_VCU_EPB_SLV_PARKING_V_NAME "VCU_EPBSlv_Parking_V"
#define MCU_233_VCU_201H_VCU_EPB_SLV_PARKING_NAME "VCU_EPBSlv_Parking"
#define MCU_233_VCU_201H_DRIVER_REQ_MCU_TORQUE_V_NAME "Driver_ReqMCUTorque_V"
#define MCU_233_VCU_201H_DRIVER_REQ_MCU_TORQUE_NAME "Driver_ReqMCUTorque"
#define MCU_233_VCU_201H_CHECKSUM_NAME "Checksum"
#define MCU_233_VCU_201H_ROLLING_COUNTER_NAME "RollingCounter"
#define MCU_233_ACMM_IHU_301H_ACMM_MODE_NAME "ACMM_Mode"
#define MCU_233_ACMM_IHU_301H_ACMM_CYCLE_STU_NAME "ACMM_CycleStu"
#define MCU_233_ACMM_IHU_301H_ACMM_DEFROST_STU_NAME "ACMM_DefrostStu"
#define MCU_233_ACMM_IHU_301H_ACMM_AC_SWITCH_STU_NAME "ACMM_ACSwitchStu"
#define MCU_233_ACMM_IHU_301H_ACMM_AUTO_SWITCH_STU_NAME "ACMM_AutoSwitchStu"
#define MCU_233_ACMM_IHU_301H_ACMM_MAIN_SWTICH_STU_NAME "ACMM_MainSwtichStu"
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_AUTO_NAME "ACMM_F_Temp_Auto"
#define MCU_233_ACMM_IHU_301H_ACMM_AIR_P_STU_NAME "ACMM_AirPStu"
#define MCU_233_ACMM_IHU_301H_ACMM_PTC_STU_NAME "ACMM_PTCStu"
#define MCU_233_ACMM_IHU_301H_ACMM_PM25_NAME "ACMM_PM25"
#define MCU_233_ACMM_IHU_301H_ACMM_OUT_TEMP_NAME "ACMM_OutTemp"
#define MCU_233_ACMM_IHU_301H_ACMM_MAXAC_STU_NAME "ACMM_MAXACStu"
#define MCU_233_ACMM_IHU_301H_ACMM_F_BLOWER_LVL_NAME "ACMM_F_BlowerLvl"
#define MCU_233_ACMM_IHU_301H_ACMM_F_TEMP_EV_NAME "ACMM_F_Temp_EV"
#define MCU_233_ACMM_IHU_301H_ACMM_MAXPTC_STU_NAME "ACMM_MAXPTCStu"
#define MCU_233_ACMM_IHU_301H_ACMM_R_MAIN_SWTICH_STU_NAME "ACMM_R_MainSwtichStu"
#define MCU_233_ACMM_IHU_301H_ACMM_R_MODE_NAME "ACMM_R_Mode"
#define MCU_233_ACMM_IHU_301H_ACMM_R_AC_STU_NAME "ACMM_R_ACStu"
#define MCU_233_ACMM_IHU_301H_ACMM_R_PTC_STU_NAME "ACMM_R_PTCStu"
#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_EV_NAME "ACMM_R_Temp_EV"
#define MCU_233_ACMM_IHU_301H_ACMM_R_TEMP_AUTO_NAME "ACMM_R_Temp_Auto"
#define MCU_233_ACMM_IHU_301H_ACMM_TEM_SAME_STU_NAME "ACMM_TemSameStu"
#define MCU_233_ACMM_IHU_301H_ACMM_R_BLOWER_LVL_NAME "ACMM_R_BlowerLvl"
#define MCU_233_ACMM_IHU_302H_ACMM_WORK_STA_NAME "ACMM_WorkSta"
#define MCU_233_ACMM_IHU_302H_AC_PRESSUREVALUE_NAME "AC_pressurevalue"
#define MCU_233_ACMM_IHU_302H_EAC_WORK_STA_NAME "EAC_WorkSta"
#define MCU_233_ACMM_IHU_302H_PTC_WORK_STA_NAME "PTC_WorkSta"
#define MCU_233_ACMM_IHU_302H_AC_FRONT_PTC_ENABLE_NAME "AC_FrontPTCEnable"
#define MCU_233_ACMM_PTC_303H_FRONT_PTC_POWER_TARGET_NAME "FrontPTC_PowerTarget"
#define MCU_233_ACMM_PTC_303H_FRONT_PTC_WORKING_MODE_REQ_NAME "FrontPTC_WorkingModeReq"
#define MCU_233_ACMM_PTC_303H_SIDE_PTC_POWER_TARGET_NAME "SidePTC_PowerTarget"
#define MCU_233_ACMM_PTC_303H_SIDE_PTC_WORKING_MODE_REQ_NAME "SidePTC_WorkingModeReq"
#define MCU_233_ACMM_EAC_304H_AC_FR_COMPRESSOR_ENABLE_NAME "AC_FRCompressorEnable"
#define MCU_233_ACMM_EAC_304H_AC_FR_MAX_POWER_TARGET_NAME "AC_FR_MAXPowerTarget"
#define MCU_233_ACMM_EAC_304H_AC_FR_COMPRESSOR_SPD_RPM_REQ_NAME "AC_FRCompressorSpdRPMReq"
#define MCU_233_ACMM_EAC_304H_AC_RR_COMPRESSOR_ENABLE_NAME "AC_RRCompressorEnable"
#define MCU_233_ACMM_EAC_304H_AC_RR_MAX_POWER_TARGET_NAME "AC_RR_MAX_PowerTarget"
#define MCU_233_ACMM_EAC_304H_AC_RR_COMPRESSOR_SPD_RPM_REQ_NAME "AC_RRCompressorSpdRPMReq"
#define MCU_233_ACMM_307H_FRONT_PTC_TEMPERATURE_NAME "FrontPTCTemperature"
#define MCU_233_ACMM_307H_PTC1_TEMPERATURE_NAME "PTC1Temperature"
#define MCU_233_ACMM_307H_PTC2_TEMPERATURE_NAME "PTC2Temperature"
#define MCU_233_ACMM_307H_EVAPORATOR1_TEMPERATURE_NAME "Evaporator1Temperature"
#define MCU_233_ACMM_307H_EVAPORATOR2_TEMPERATURE_NAME "Evaporator2Temperature"
#define MCU_233_ACMM_307H_OUTLET_AIR_TEMPERATURE_NAME "OutletAirTemperature"
#define MCU_233_ACMM_307H_RETURN_AIR_TEMPERATURE1_NAME "ReturnAirTemperature1"
#define MCU_233_ACMM_307H_RETURN_AIR_TEMPERATURE2_NAME "ReturnAirTemperature2"
#define MCU_233_ACMM_308H_ACMM_IN_TEMP_NAME "ACMM_InTemp"
#define MCU_233_ACMM_308H_REAR_PTC_TEMPERATURE_NAME "RearPTCTemperature"
#define MCU_233_ACMM_308H_L_PM25_AIR_IN_Q_LEVEL_NAME "L_PM25_AirInQLevel"
#define MCU_233_ACMM_308H_F_COOLG_FAN_DUTY_NAME "F_CoolgFanDuty"
#define MCU_233_ACMM_308H_F_COOLG_FAN_SWTICH_STS_NAME "F_CoolgFanSwtichSts"
#define MCU_233_ACMM_331H_AC_WORK_STA_NAME "AC_WorkSta"
#define MCU_233_ACMM_331H_AC_AC_PRESS_CURR_NAME "AC_ACPressCurr"
#define MCU_233_ACMM_331H_AC_AC_PRESS_VOLT_NAME "AC_ACPressVolt"
#define MCU_233_ACMM_331H_AC_AC_PRESS_POWER_NAME "AC_ACPressPower"
#define MCU_233_ACMM_331H_AC_COMPRESSOR_ACTL_SPD_NAME "AC_CompressorActlSpd"
#define MCU_233_ACMM_331H_AC_ERR_BUSOFF_NAME "AC_Err_Busoff"
#define MCU_233_ACMM_331H_AC_ERR_LOSE_SPEED_NAME "AC_Err_LoseSpeed"
#define MCU_233_ACMM_331H_AC_ERR_COMMUNICATION_NAME "AC_Err_Communication"
#define MCU_233_ACMM_331H_AC_ERR_LOSE_PHASE_NAME "AC_Err_LosePhase"
#define MCU_233_ACMM_331H_AC_ERR_MOTOR_BLOCKED_NAME "AC_Err_MotorBlocked"
#define MCU_233_ACMM_331H_AC_ERR_LOW_VOLT_NAME "AC_Err_LowVolt"
#define MCU_233_ACMM_331H_AC_ERR_OVER_VOLT_NAME "AC_Err_OverVolt"
#define MCU_233_ACMM_331H_AC_ERR_OVER_CURRENT_NAME "AC_Err_OverCurrent"
#define MCU_233_ACMM_331H_AC_ERR_ADC_NAME "AC_Err_ADC"
#define MCU_233_ACMM_331H_AC_ERR_HV_LOCK_NAME "AC_Err_HVLock"
#define MCU_233_ACMM_331H_AC_OP_DROP_FREQUENEY_NAME "AC_OP_DropFrequeney"
#define MCU_233_ACMM_331H_AC_OT_DROP_FREQUENEY_NAME "AC_OT_DropFrequeney"
#define MCU_233_ACMM_331H_AC_OC_DROP_FREQUENEY_NAME "AC_OC_DropFrequeney"
#define MCU_233_ACMM_331H_AC_ERR_DRIVE_IC_NAME "AC_Err_DriveIC"
#define MCU_233_ACMM_331H_AC_ERR_OVER_TEMPERATURE_NAME "AC_Err_OverTemperature"
#define MCU_233_ACMM_331H_AC_ERR_DATA_NAME "AC_Err_Data"
#define MCU_233_ACMM_332H_AC_WORK_STA_RR_NAME "AC_WorkSta_RR"
#define MCU_233_ACMM_332H_AC_AC_PRESS_CURR_RR_NAME "AC_ACPressCurr_RR"
#define MCU_233_ACMM_332H_AC_AC_PRESS_VOLT_RR_NAME "AC_ACPressVolt_RR"
#define MCU_233_ACMM_332H_AC_AC_PRESS_POWER_RR_NAME "AC_ACPressPower_RR"
#define MCU_233_ACMM_332H_AC_COMPRESSOR_ACTL_SPD_RR_NAME "AC_CompressorActlSpd_RR"
#define MCU_233_ACMM_332H_AC_ERR_BUSOFF_RR_NAME "AC_Err_Busoff_RR"
#define MCU_233_ACMM_332H_AC_ERR_LOSE_SPEED_RR_NAME "AC_Err_LoseSpeed_RR"
#define MCU_233_ACMM_332H_AC_ERR_COMMUNICATION_RR_NAME "AC_Err_Communication_RR"
#define MCU_233_ACMM_332H_AC_ERR_LOSE_PHASE_RR_NAME "AC_Err_LosePhase_RR"
#define MCU_233_ACMM_332H_AC_ERR_MOTOR_BLOCKED_RR_NAME "AC_Err_MotorBlocked_RR"
#define MCU_233_ACMM_332H_AC_ERR_LOW_VOLT_RR_NAME "AC_Err_LowVolt_RR"
#define MCU_233_ACMM_332H_AC_ERR_OVER_VOLT_RR_NAME "AC_Err_OverVolt_RR"
#define MCU_233_ACMM_332H_AC_ERR_OVER_CURRENT_RR_NAME "AC_Err_OverCurrent_RR"
#define MCU_233_ACMM_332H_AC_ERR_ADC_RR_NAME "AC_Err_ADC_RR"
#define MCU_233_ACMM_332H_AC_ERR_HV_LOCK_RR_NAME "AC_Err_HVLock_RR"
#define MCU_233_ACMM_332H_AC_OP_DROP_FREQUENEY_RR_NAME "AC_OP_DropFrequeney_RR"
#define MCU_233_ACMM_332H_AC_OT_DROP_FREQUENEY_RR_NAME "AC_OT_DropFrequeney_RR"
#define MCU_233_ACMM_332H_AC_OC_DROP_FREQUENEY_RR_NAME "AC_OC_DropFrequeney_RR"
#define MCU_233_ACMM_332H_AC_ERR_DRIVE_IC_RR_NAME "AC_Err_DriveIC_RR"
#define MCU_233_ACMM_332H_AC_ERR_OVER_TEMPERATURE_RR_NAME "AC_Err_OverTemperature_RR"
#define MCU_233_ACMM_332H_AC_ERR_DATA_RR_NAME "AC_Err_Data_RR"
#define MCU_233_ACMM_333H_FRONT_WORK_STA_NAME "FrontWork_Sta"
#define MCU_233_ACMM_333H_FRONT_PTC_POWOR_NAME "FrontPTC_Powor"
#define MCU_233_ACMM_333H_FRONT_PTC_CURRENT_NAME "FrontPTC_Current"
#define MCU_233_ACMM_333H_FRONT_PTC_TEMPERATURE_NAME "FrontPTC_Temperature"
#define MCU_233_ACMM_333H_FRONT_PTC_HV_DISCONNECT_NAME "FrontPTC_HVDisconnect"
#define MCU_233_ACMM_333H_FRONT_PTC_IGBT_OVER_TEM_PROTN_NAME "FrontPTC_IGBTOverTemProtn"
#define MCU_233_ACMM_333H_FRONT_PTC_OTLT_OVER_TEM_PROTN_NAME "FrontPTC_OtltOverTemProtn"
#define MCU_233_ACMM_333H_FRONT_PTC_BATT_UNDER_VOLT_FLT_NAME "FrontPTC_BattUnderVoltFlt"
#define MCU_233_ACMM_333H_FRONT_PTC_BATT_OVER_VOLT_FLT_NAME "FrontPTC_BattOverVoltFlt"
#define MCU_233_ACMM_333H_FRONT_PTC_PCB_TEMP_SNSR_FLT_NAME "FrontPTC_PCBTempSnsrFlt"
#define MCU_233_ACMM_333H_FRONT_PTC_HI_CRNT_SNSR_FLT_NAME "FrontPTC_HiCrntSnsrFlt"
#define MCU_233_ACMM_333H_FRONT_PTC_PCB_OVER_TEMP_PROTN_NAME "FrontPTC_PCBOverTempProtn"
#define MCU_233_ACMM_333H_FRONT_PTC_HV_UNDER_VOLT_FLT_NAME "FrontPTC_HVUnderVoltFlt"
#define MCU_233_ACMM_333H_FRONT_PTC_IGBT_TEM_SNSR_FLT_NAME "FrontPTC_IGBTTemSnsrFlt"
#define MCU_233_ACMM_333H_FRONT_PTC_OTLT_TEM_SNSR_FLT_NAME "FrontPTC_OtltTemSnsrFlt"
#define MCU_233_ACMM_333H_FRONT_PTC_COMM_ERROR_NAME "FrontPTC_CommError"
#define MCU_233_ACMM_333H_FRONT_PTC_CORE_OR_IGBT_OPEN_ERR_NAME "FrontPTC_CoreOrIGBTOpenErr"
#define MCU_233_ACMM_333H_FRONT_PTC_IGBT_SHRT_ERR_NAME "FrontPTC_IGBTShrtErr"
#define MCU_233_ACMM_333H_FRONT_PTC_CORE_SHRT_ERR_NAME "FrontPTC_CoreShrtErr"
#define MCU_233_ACMM_333H_FRONT_PTC_HV_OVER_CRNT_PROTN_NAME "FrontPTC_HVOverCrntProtn"
#define MCU_233_ACMM_333H_FRONT_PTC_HV_OVER_VOLT_FLT_NAME "FrontPTC_HVOverVoltFlt"
#define MCU_233_ACMM_334H_SIDE_PTC_WORK_STA_NAME "SidePTC_WorkSta"
#define MCU_233_ACMM_334H_SIDE_PTC_POWOR_NAME "SidePTC_Powor"
#define MCU_233_ACMM_334H_SIDE_PTC_CURRENT_NAME "SidePTC_Current"
#define MCU_233_ACMM_334H_SIDE_PTC_TEMPERATURE_NAME "SidePTC_Temperature"
#define MCU_233_ACMM_334H_SIDE_PTC_HV_DISCONNECT_NAME "SidePTC_HVDisconnect"
#define MCU_233_ACMM_334H_SIDE_PTC_IGBT_OVER_TEM_PROTN_NAME "SidePTC_IGBTOverTemProtn"
#define MCU_233_ACMM_334H_SIDE_PTC_OTLT_OVER_TEM_PROTN_NAME "SidePTC_OtltOverTemProtn"
#define MCU_233_ACMM_334H_SIDE_PTC_BATT_UNDER_VOLT_FLT_NAME "SidePTC_BattUnderVoltFlt"
#define MCU_233_ACMM_334H_SIDE_PTC_BATT_OVER_VOLT_FLT_NAME "SidePTC_BattOverVoltFlt"
#define MCU_233_ACMM_334H_SIDE_PTC_PCB_TEMP_SNSR_FLT_NAME "SidePTC_PCBTempSnsrFlt"
#define MCU_233_ACMM_334H_SIDE_PTC_HI_CRNT_SNSR_FLT_NAME "SidePTC_HiCrntSnsrFlt"
#define MCU_233_ACMM_334H_SIDE_PTC_PCB_OVER_TEMP_PROTN_NAME "SidePTC_PCBOverTempProtn"
#define MCU_233_ACMM_334H_SIDE_PTC_HV_UNDER_VOLT_FLT_NAME "SidePTC_HVUnderVoltFlt"
#define MCU_233_ACMM_334H_SIDE_PTC_IGBT_TEM_SNSR_FLT_NAME "SidePTC_IGBTTemSnsrFlt"
#define MCU_233_ACMM_334H_SIDE_PTC_OTLT_TEM_SNSR_FLT_NAME "SidePTC_OtltTemSnsrFlt"
#define MCU_233_ACMM_334H_SIDE_PTC_COMM_ERROR_NAME "SidePTC_CommError"
#define MCU_233_ACMM_334H_SIDE_PTC_CORE_OR_IGBT_OPEN_ERR_NAME "SidePTC_CoreOrIGBTOpenErr"
#define MCU_233_ACMM_334H_SIDE_PTC_IGBT_SHRT_ERR_NAME "SidePTC_IGBTShrtErr"
#define MCU_233_ACMM_334H_SIDE_PTC_CORE_SHRT_ERR_NAME "SidePTC_CoreShrtErr"
#define MCU_233_ACMM_334H_SIDE_PTC_HV_OVER_CRNT_PROTN_NAME "SidePTC_HVOverCrntProtn"
#define MCU_233_ACMM_334H_SIDE_PTC_HV_OVER_VOLT_FLT_NAME "SidePTC_HVOverVoltFlt"
#define MCU_233_ACMM_FR34_CC_335H_AC_WORK_STA_NAME "AC_WorkSta"
#define MCU_233_ACMM_FR34_CC_335H_AC_AC_PRESS_CURR_NAME "AC_ACPressCurr"
#define MCU_233_ACMM_FR34_CC_335H_AC_AC_PRESS_VOLT_NAME "AC_ACPressVolt"
#define MCU_233_ACMM_FR34_CC_335H_AC_AC_PRESS_POWER_NAME "AC_ACPressPower"
#define MCU_233_ACMM_FR34_CC_335H_AC_COMPRESSOR_ACTL_SPD_NAME "AC_CompressorActlSpd"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_BUSOFF_NAME "AC_Err_Busoff"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_LOSE_SPEED_NAME "AC_Err_LoseSpeed"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_COMMUNICATION_NAME "AC_Err_Communication"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_LOSE_PHASE_NAME "AC_Err_LosePhase"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_MOTOR_BLOCKED_NAME "AC_Err_MotorBlocked"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_LOW_VOLT_NAME "AC_Err_LowVolt"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_OVER_VOLT_NAME "AC_Err_OverVolt"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_OVER_CURRENT_NAME "AC_Err_OverCurrent"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_ADC_NAME "AC_Err_ADC"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_HV_LOCK_NAME "AC_Err_HVLock"
#define MCU_233_ACMM_FR34_CC_335H_AC_OP_DROP_FREQUENEY_NAME "AC_OP_DropFrequeney"
#define MCU_233_ACMM_FR34_CC_335H_AC_OT_DROP_FREQUENEY_NAME "AC_OT_DropFrequeney"
#define MCU_233_ACMM_FR34_CC_335H_AC_OC_DROP_FREQUENEY_NAME "AC_OC_DropFrequeney"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_DRIVE_IC_NAME "AC_Err_DriveIC"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_OVER_TEMPERATURE_NAME "AC_Err_OverTemperature"
#define MCU_233_ACMM_FR34_CC_335H_AC_ERR_DATA_NAME "AC_Err_Data"
#define MCU_233_ACMM_RR45_CC_336H_AC_WORK_STA_RR_NAME "AC_WorkSta_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_AC_PRESS_CURR_RR_NAME "AC_ACPressCurr_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_AC_PRESS_VOLT_RR_NAME "AC_ACPressVolt_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_AC_PRESS_POWER_RR_NAME "AC_ACPressPower_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_COMPRESSOR_ACTL_SPD_RR_NAME "AC_CompressorActlSpd_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_BUSOFF_RR_NAME "AC_Err_Busoff_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_LOSE_SPEED_RR_NAME "AC_Err_LoseSpeed_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_COMMUNICATION_RR_NAME "AC_Err_Communication_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_LOSE_PHASE_RR_NAME "AC_Err_LosePhase_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_MOTOR_BLOCKED_RR_NAME "AC_Err_MotorBlocked_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_LOW_VOLT_RR_NAME "AC_Err_LowVolt_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_OVER_VOLT_RR_NAME "AC_Err_OverVolt_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_OVER_CURRENT_RR_NAME "AC_Err_OverCurrent_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_ADC_RR_NAME "AC_Err_ADC_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_HV_LOCK_RR_NAME "AC_Err_HVLock_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_OP_DROP_FREQUENEY_RR_NAME "AC_OP_DropFrequeney_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_OT_DROP_FREQUENEY_RR_NAME "AC_OT_DropFrequeney_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_OC_DROP_FREQUENEY_RR_NAME "AC_OC_DropFrequeney_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_DRIVE_IC_RR_NAME "AC_Err_DriveIC_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_OVER_TEMPERATURE_RR_NAME "AC_Err_OverTemperature_RR"
#define MCU_233_ACMM_RR45_CC_336H_AC_ERR_DATA_RR_NAME "AC_Err_Data_RR"
#define MCU_233_SMM_2_F4H_SMM_HEAT_LEVEL_D_NAME "SMM_HeatLevel_D"
#define MCU_233_SMM_2_F4H_SMM_FAN_LEVEL_D_NAME "SMM_FanLevel_D"
#define MCU_233_ICM_3_F_EH_ICM_TOTAL_ODOMETER_NAME "ICM_TotalOdometer"
#define MCU_233_ICM_3_F_EH_IHU_ICM_THEME_FEEDBACK_NAME "IHU_ICM_ThemeFeedback"
#define MCU_233_ICM_3_F_EH_ICM_SET_FEEDBACK_NAME "ICM_SetFeedback"
#define MCU_233_ICM_3_F_EH_PS_SEAT_BELT_R_ST_NAME "PsSeatBeltRSt"
#define MCU_233_ICM_3_F_EH_DRV_SEAT_BELT_R_ST_NAME "DrvSeatBeltRSt"
#define MCU_233_ICM_3_F_EH_ICM_TOTAL_ODOMETER_VALID_NAME "ICM_TotalOdometerValid"
#define MCU_233_ICM_3_F_EH_ICM_BACKLIGHT_LUMINANCE_STATUS_NAME "ICM_Backlight_LuminanceStatus"
#define MCU_233_ICM_3_F_EH_IHU_ICM_UNIT_SET_BACK_NAME "IHU_ICM_Unit_set_back"
#define MCU_233_ICM_3_F_EH_IHU_ICM_LANGUANGE_SET_BACK_NAME "IHU_ICM_Languange_set_back"
#define MCU_233_ICM_3_F_EH_ICM_SPEED_WARN_MAXBACK_NAME "ICM_SpeedWarnMaxback"
#define MCU_233_ICM_NM_412H_NM_DEST_ADDRESS_NAME "NM_DEST_ADDRESS"
#define MCU_233_ICM_NM_412H_NM_SLEEP_ACK_NAME "NM_SLEEP_ACK"
#define MCU_233_ICM_NM_412H_NM_SLEEP_IND_NAME "NM_SLEEP_IND"
#define MCU_233_ICM_NM_412H_NM_LIMPHOME_NAME "NM_LIMPHOME"
#define MCU_233_ICM_NM_412H_NM_RING_NAME "NM_RING"
#define MCU_233_ICM_NM_412H_NM_ALIVE_NAME "NM_ALIVE"
#define MCU_233_VSP_283H_VSP_PPD_SWITCH_STATUS_NAME "VSP_PPDSwitchStatus"
#define MCU_233_WCM_347H_WPC_PHONE_DETECTION_STATUS_NAME "WPC_PhoneDetection_Status"
#define MCU_233_WCM_347H_WPC_WIRELESS_CHARGING_STATUS_NAME "WPC_WirelessCharging_Status"
#define MCU_233_WCM_347H_WPC_WIRELESS_CHARGING_SET_STATUS_NAME "WPC_WirelessChargingSet_Status"
#define MCU_233_BCM_211H_BCM_PEPS_SYSTEM_FAULT_NAME "BCM_pepsSystemFault"
#define MCU_233_BCM_211H_BCM_POWER_MODE_V_NAME "BCM_PowerModeV"
#define MCU_233_BCM_211H_BCM_SYS_POWER_STS_NAME "BCM_SysPowerSts"
#define MCU_233_BCM_211H_BCM_POWER_MODE_NAME "BCM_PowerMode"
#define MCU_233_BCM_211H_BCM_PE_DOOR_LOCK_COMMAND_NAME "BCM_PE_DoorLockCommand"
#define MCU_233_BCM_211H_BCM_PEPS_KEY_SERCH_FAIL_IED_NAME "BCM_pepsKeySerchFailIed"
#define MCU_233_BCM_211H_BCM_TBOX_RESPONSE_NAME "BCM_tbox_response"
#define MCU_233_BCM_211H_BCM_KEY_POSITION_NAME "BCM_KeyPosition"
#define MCU_233_BCM_211H_BCM_KEY_COMMAND_INFO_NAME "BCM_KeyCommandInfo"
#define MCU_233_BCM_211H_BCM_KEY_ID_NAME "BCM_KeyID"
#define MCU_233_BCM_211H_BCM_BLE_RESPONSE_NAME "BCM_BLE_Response"
#define MCU_233_BCM_211H_BCM_IMMO_FAIL_INDICATION_NAME "BCM_IMMOFailIndication"
#define MCU_233_BCM_211H_BCM_RIGHT_PE_SW_STATUS_NAME "BCM_RightPESwStatus"
#define MCU_233_BCM_211H_BCM_LEFT_PE_SW_STATUS_NAME "BCM_LeftPESwStatus"
#define MCU_233_BCM_211H_BCM_SSB_SW1_STATE_NAME "BCM_SSBSw1State"
#define MCU_233_BCM_211H_BCM_SSB_SW2_STATE_NAME "BCM_SSBSw2State"
#define MCU_233_BCM_211H_BCM_ST_REQ_NAME "BCM_ST_Req"
#define MCU_233_BCM_211H_BCM_IGN2_RELAY_NAME "BCM_IGN2_Relay"
#define MCU_233_BCM_211H_BCM_IGN1_RELAY_NAME "BCM_IGN1_Relay"
#define MCU_233_BCM_211H_BCM_NORMAL_CLOSE_BRAKE_SW_STS_NAME "BCM_NormalClose_BrakeSWSts"
#define MCU_233_BCM_211H_BCM_NORMALLY_OPEN_BRAKE_SW_STS_NAME "BCM_NormallyOpen_BrakeSWSts"
#define MCU_233_BCM_211H_BCM_BRAKE_SW_STS_NAME "BCM_BrakeSWSts"
#define MCU_233_BCM_211H_BCM_REMOTE_FORBIDDEN_FB_NAME "BCM_RemoteForbiddenFB"
#define MCU_233_BCM_211H_BCM_AUTH_RESPONE_STS_NAME "BCM_AuthResponeSts"
#define MCU_233_BCM_211H_BCM_AUTH_STUS_NAME "BCM_AuthStus"
#define MCU_233_BCM_211H_BCM_IGN2_RELAY_FB_NAME "BCM_IGN2_Relay_FB"
#define MCU_233_BCM_211H_BCM_IGN1_RELAY_FB_NAME "BCM_IGN1_Relay_FB"
#define MCU_233_BCM_105H_BCM_WIPER_PRK_SW_STATUS_NAME "BCM_WiperPrkSwStatus"
#define MCU_233_BCM_105H_BCM_WASHING_SW_STATUS_NAME "BCM_WashingSwStatus"
#define MCU_233_BCM_105H_BCM_WIPER_SW_STATUS_NAME "BCM_WiperSwStatus"
#define MCU_233_BCM_105H_BCM_MASTER_SW_STATUS_NAME "BCM_MasterSwStatus"
#define MCU_233_BCM_105H_BCM_REAR_FOG_LAMP_SW_NAME "BCM_RearFogLampSw"
#define MCU_233_BCM_105H_BCM_FRONT_FOG_LAMP_SW_NAME "BCM_FrontFogLampSw"
#define MCU_233_BCM_105H_BCM_HEAD_LIGHT_SWITCH_NAME "BCM_HeadLightSwitch"
#define MCU_233_BCM_105H_BCM_DIMMER_SWITCH_NAME "BCM_DimmerSwitch"
#define MCU_233_BCM_105H_BCM_INDICATOR_SW_STATUS_NAME "BCM_IndicatorSwStatus"
#define MCU_233_BCM_105H_BCM_BULB_FAILURE_FB_RR_TURN_STATUS_NAME "BCM_BulbFailureFB_RR_TurnStatus"
#define MCU_233_BCM_105H_BCM_BULB_FAILURE_FB_RL_TURN_STATUS_NAME "BCM_BulbFailureFB_RL_TurnStatus"
#define MCU_233_BCM_105H_BCM_BULB_FAILURE_FB_FR_TURN_STATUS_NAME "BCM_BulbFailureFB_FR_TurnStatus"
#define MCU_233_BCM_105H_BCM_BULB_FAILURE_FB_FL_TURN_STATUS_NAME "BCM_BulbFailureFB_FL_TurnStatus"
#define MCU_233_BCM_105H_BCM_DRV_DOOR_LOCK_STA_NAME "BCM_DrvDoorLockSta"
#define MCU_233_BCM_105H_BCM_CHARGING_DOCK_LOCK_STA_NAME "BCM_ChargingDock_LockSta"
#define MCU_233_BCM_105H_BCM_HORN_SW_STS_NAME "BCM_HornSWSts"
#define MCU_233_BCM_105H_BCM_P_SW_STS_NAME "BCM_P_SWSts"
#define MCU_233_BCM_105H_BCM_FR_DOOR_STS_NAME "BCM_FR_DoorSts"
#define MCU_233_BCM_105H_BCM_FL_DOOR_STS_NAME "BCM_FL_DoorSts"
#define MCU_233_BCM_105H_BCM_HOOD_STS_NAME "BCM_HoodSts"
#define MCU_233_BCM_105H_BCM_TAIL_DOOR_STS_NAME "BCM_Tail_DoorSts"
#define MCU_233_BCM_105H_BCM_RIGHT_SLIDING_DOOR_STS_NAME "BCM_RightSliding_DoorSts"
#define MCU_233_BCM_105H_BCM_LEFT_SLIDING_DOOR_STS_NAME "BCM_LeftSliding_DoorSts"
#define MCU_233_BCM_105H_BCM_BATTERY_VALUE_NAME "BCM_BatteryValue"
#define MCU_233_BCM_105H_BCM_CRASH_INPUT_STATUS_NAME "BCM_CrashInputStatus"
#define MCU_233_BCM_105H_BCM_CLOSING_CAR_LOCK_STS_NAME "BCM_ClosingCarLockSts"
#define MCU_233_BCM_105H_BCM_VEHICLE_POWER_MODE_STS_NAME "BCM_VehiclePowerModeSts"
#define MCU_233_BCM_105H_BCM_LOCK_CAR_CLOSE_WINDOW_STS_NAME "BCM_LockCarCloseWindowSts"
#define MCU_233_BCM_105H_BCM_VENTILATION_SW_STATUS_NAME "BCM_VentilationSwStatus"
#define MCU_233_BCM_105H_BCM_LEAVING_CAR_LOCK_STS_NAME "BCM_LeavingCarLockSts"
#define MCU_233_BCM_105H_BCM_DOOR_LOCK_SET_STS_NAME "BCM_DoorLockSetSts"
#define MCU_233_BCM_105H_BCM_LOCK_PROMPT_STS_NAME "BCM_lockPromptSts"
#define MCU_233_BCM_105H_BCM_AUTO_DRIVING_LOCK_STS_NAME "BCM_AutoDrivingLockSts"
#define MCU_233_BCM_112H_BCM_SOLAR_RIGHT_PASSG_SIDE_NAME "BCM_Solar_RightPassgSide"
#define MCU_233_BCM_112H_BCM_SOLAR_LEFT_DRIVESIDE_NAME "BCM_Solar_LeftDriveside"
#define MCU_233_BCM_112H_BCM_CAR_SEARCH_STATE_NAME "BCM_CarSearchState"
#define MCU_233_BCM_112H_BCM_CAR_SEARCH_TYPE_ST_NAME "BCM_CarSearchTypeSt"
#define MCU_233_BCM_112H_BCM_ANTI_THEFT_STS_NAME "BCM_AntiTheftSts"
#define MCU_233_BCM_112H_BCM_CRASH_VALID_NAME "BCM_CrashValid"
#define MCU_233_BCM_112H_BCM_LIGHT_SENSOR_STS_NAME "BCM_LightSensorSts"
#define MCU_233_BCM_112H_BCM_FOLLOW_ME_HOME_FEDB_NAME "BCM_FollowMeHomeFedb"
#define MCU_233_BCM_112H_BCM_FOLLOW_ME_CAR_FEDB_NAME "BCM_FollowMeCarFedb"
#define MCU_233_BCM_112H_BCM_FRONT_WASHING_STATUS_NAME "BCM_FrontWashingStatus"
#define MCU_233_BCM_112H_BCM_FRONT_WIPER_STATUS_NAME "BCM_FrontWiperStatus"
#define MCU_233_BCM_112H_BCM_FAIL_CODE_NAME "BCM_FailCode"
#define MCU_233_BCM_113H_BCM_FL_WIND_DWN_NAME "BCM_FLWindDwn"
#define MCU_233_BCM_113H_BCM_FL_WIND_UP_NAME "BCM_FLWindUp"
#define MCU_233_BCM_113H_BCM_PASSENGER_RIGHT_MIRROR_SW_STS_NAME "BCM_Passenger_RightMirrorSWSts"
#define MCU_233_BCM_113H_BCM_DRIVER_RF_WIND_SW_STS_NAME "BCM_Driver_RFWindSWSts"
#define MCU_233_BCM_113H_BCM_DRIVER_LF_WIND_SW_STS_NAME "BCM_Driver_LFWindSWSts"
#define MCU_233_BCM_113H_BCM_MIRROR_FOLD_SW_STS_NAME "BCM_MirrorFoldSWSts"
#define MCU_233_BCM_113H_BCM_RIGHT_MIRROR_SW_STS_NAME "BCM_RightMirrorSWSts"
#define MCU_233_BCM_113H_BCM_LEFT_MIRROR_SW_STS_NAME "BCM_LeftMirrorSWSts"
#define MCU_233_BCM_113H_BCM_FRONT_WIN_CTRL_STS_NAME "BCM_Front_WinCtrlSts"
#define MCU_233_BCM_113H_BCM_FR_WIND_DWN_NAME "BCM_FrWindDwn"
#define MCU_233_BCM_113H_BCM_FR_WIND_UP_NAME "BCM_FrWindUp"
#define MCU_233_BCM_113H_BCM_MIRROR_STRETCH_NAME "BCM_MirrorStretch"
#define MCU_233_BCM_113H_BCM_RV_MIRROR_COMMON_PORT_NAME "BCM_RVMirrorCommonPort"
#define MCU_233_BCM_113H_BCM_RIGHT_RV_MIRROR_Y_NAME "BCM_RightRVMirror_Y"
#define MCU_233_BCM_113H_BCM_RIGHT_RV_MIRROR_X_NAME "BCM_RightRVMirror_X"
#define MCU_233_BCM_113H_BCM_LEFT_RV_MIRROR_Y_NAME "BCM_LeftRVMirror_Y"
#define MCU_233_BCM_113H_BCM_LEFT_RV_MIRROR_X_NAME "BCM_LeftRVMirror_X"
#define MCU_233_BCM_113H_BCM_MIRROR_ADJUST_SW_STS_NAME "BCM_MirrorAdjustSWSts"
#define MCU_233_BCM_113H_BCM_FR_WIN_MOTOR_STS_NAME "BCM_FRWinMotorSts"
#define MCU_233_BCM_113H_BCM_FL_WIN_MOTOR_STS_NAME "BCM_FLWinMotorSts"
#define MCU_233_BCM_113H_BCM_MIRROR_FOLD_STS_NAME "BCM_MirrorFoldSts"
#define MCU_233_BCM_113H_BCM_MIRROR_RETRACT_NAME "BCM_MirrorRetract"
#define MCU_233_BCM_113H_BCM_FL_WIN_HALL_SENSOR1_NAME "BCM_FLWinHallSensor1"
#define MCU_233_BCM_113H_BCM_FL_WIN_HALL_SENSOR2_NAME "BCM_FLWinHallSensor2"
#define MCU_233_BCM_113H_BCM_FR_WIN_HALL_SENSOR1_NAME "BCM_FRWinHallSensor1"
#define MCU_233_BCM_113H_BCM_FR_WIN_HALL_SENSOR2_NAME "BCM_FRWinHallSensor2"
#define MCU_233_BCM_111H_BCM_HIGH_BEAM_LIGHT_STS_NAME "BCM_HighBeamLightSts"
#define MCU_233_BCM_111H_BCM_CENTRAL_PILOT_STS_NAME "BCM_CentralPilotSts"
#define MCU_233_BCM_111H_BCM_CHARGING_GREEN_PILOT_STS_NAME "BCM_ChargingGreenPilotSts"
#define MCU_233_BCM_111H_BCM_CHARGING_RED_PILOT_STS_NAME "BCM_ChargingRedPilotSts"
#define MCU_233_BCM_111H_BCM_HAZARD_PILOT_STS_NAME "BCM_HazardPilotSts"
#define MCU_233_BCM_111H_BCM_REAR_FOG_PILOT_STS_NAME "BCM_RearFogPilotSts"
#define MCU_233_BCM_111H_BCM_RIGHT_MIRROR_PILOT_STS_NAME "BCM_RightMirrorPilotSts"
#define MCU_233_BCM_111H_BCM_LEFT_MIRROR_PILOT_STS_NAME "BCM_LeftMirrorPilotSts"
#define MCU_233_BCM_111H_BCM_RIGHT_LAMP_STS_NAME "BCM_RightLampSts"
#define MCU_233_BCM_111H_BCM_LEFT_LAMP_STS_NAME "BCM_LeftLampSts"
#define MCU_233_BCM_111H_BCM_IP_LIGHT_STS_NAME "BCM_IPLightSts"
#define MCU_233_BCM_111H_BCM_ATMOSPHERES_LAMP_STS_NAME "BCM_AtmospheresLampSts"
#define MCU_233_BCM_111H_BCM_READING_LIGHT_POWER_STS_NAME "BCM_ReadingLightPowerSts"
#define MCU_233_BCM_111H_BCM_LOW_BEAM_LIGHT_STS_NAME "BCM_LowBeamLightSts"
#define MCU_233_BCM_111H_BCM_HIGH_BRAKING_LIGHT_STS_NAME "BCM_HighBrakingLightSts"
#define MCU_233_BCM_111H_BCM_RIGHT_BRAKING_LIGHT_STS_NAME "BCM_RightBrakingLightSts"
#define MCU_233_BCM_111H_BCM_LEFT_BRAKING_LIGHT_STS_NAME "BCM_LeftBrakingLightSts"
#define MCU_233_BCM_111H_BCM_DOOR_HANDLE_LAMP_STS_NAME "BCM_DoorHandleLampSts"
#define MCU_233_BCM_111H_BCM_LICENSE_PLATE_LIGHT_STS_NAME "BCM_LicensePlateLightSts"
#define MCU_233_BCM_111H_BCM_REAR_POS_LAMP_STS_NAME "BCM_RearPosLampSts"
#define MCU_233_BCM_111H_BCM_FRONT_POS_LAMP_STS_NAME "BCM_FrontPosLampSts"
#define MCU_233_BCM_111H_BCM_RIGHT_BACKUP_LIGHT_STS_NAME "BCM_RightBackupLightSts"
#define MCU_233_BCM_111H_BCM_LEFT_BACKUP_LIGHT_STS_NAME "BCM_LeftBackupLightSts"
#define MCU_233_BCM_111H_BCM_RIGHT_REAR_FOG_LAMP_STS_NAME "BCM_RightRearFogLampSts"
#define MCU_233_BCM_111H_BCM_LEFT_REAR_FOG_LAMP_STS_NAME "BCM_LeftRearFogLampSts"
#define MCU_233_BCM_111H_BCM_FRONT_FOG_LAMP_STS_NAME "BCM_FrontFogLampSts"
#define MCU_233_BCM_111H_BCM_BACK_LIGHT_STS_NAME "BCM_BackLightSts"
#define MCU_233_BCM_111H_BCM_FRONT_DOOR_CENT_UNLOCK_NAME "BCM_FrontDoorCentUnlock"
#define MCU_233_BCM_111H_BCM_PARKING_LIGHT_STS_NAME "BCM_ParkingLightSts"
#define MCU_233_BCM_111H_BCM_LOGO_LIGHT_STS_NAME "BCM_LOGOLightSts"
#define MCU_233_BCM_111H_BCM_DAY_LIGHT_STS_NAME "BCM_DayLightSts"
#define MCU_233_BCM_111H_BCM_RIGHT_TURN_LIGHT_STS_NAME "BCM_RightTurnLightSts"
#define MCU_233_BCM_111H_BCM_LEFT_TURN_LIGHT_STS_NAME "BCM_LeftTurnLightSts"
#define MCU_233_BCM_111H_BCM_WHEEL_HEAT_NAME "BCM_WheelHeat"
#define MCU_233_BCM_111H_BCM_HORN_NAME "BCM_Horn"
#define MCU_233_BCM_111H_BCM_WASHING_MOTOR_NAME "BCM_WashingMotor"
#define MCU_233_BCM_111H_BCM_CHARGING_DOCK_LOCK_NAME "BCM_ChargingDock_Lock"
#define MCU_233_BCM_111H_BCM_CHARGING_DOCK_UNLOCK_NAME "BCM_ChargingDock_Unlock"
#define MCU_233_BCM_111H_BCM_MR_DOOR_CENT_LOCK_NAME "BCM_MRDoorCentLock"
#define MCU_233_BCM_111H_BCM_MR_DOOR_CENT_UNLOCK_NAME "BCM_MRDoorCentUnlock"
#define MCU_233_BCM_111H_BCM_FRONT_DOOR_CENT_LOCK_NAME "BCM_FrontDoorCentLock"
#define MCU_233_BCM_111H_BCM_SAVE_POW_DO_NAME "BCM_SavePowDO"
#define MCU_233_BCM_111H_BCM_CHARGING_AWAKEN_NAME "BCM_ChargingAwaken"
#define MCU_233_BCM_111H_BCM_HALL_SENSOR_POWER_NAME "BCM_HallSensorPOWER"
#define MCU_233_BCM_111H_BCM_CHARGING_OUTPUT_NAME "BCM_ChargingOutput"
#define MCU_233_BCM_111H_BCM_WIPERS_LOW_SPEED_NAME "BCM_WipersLowSpeed"
#define MCU_233_BCM_111H_BCM_WIPERS_HIGH_SPEED_NAME "BCM_WipersHighSpeed"
#define MCU_233_BCM_111H_BCM_MIRROR_HEAT_NAME "BCM_MirrorHeat"
#define MCU_233_BCM_111H_BCM_WINDSCREEN_HEAT_NAME "BCM_WindscreenHeat"
#define MCU_233_BCM_111H_BCM_CHILD_CENT_LOCK_NAME "BCM_ChildCentLock"
#define MCU_233_BCM_111H_BCM_CHILD_CENT_UN_LOCK_NAME "BCM_ChildCentUnLock"
#define MCU_233_BCM_111H_BCM_WELCOME_SILENT_STATUS_NAME "BCM_WelcomeSilentStatus"
#define MCU_233_BCM_111H_BCM_WELCOME_FEATURE_STATUS_NAME "BCM_WelcomeFeatureStatus"
#define MCU_233_BCM_111H_BCM_HAZARD_LIGHT_STS_NAME "BCM_HazardLightSts"
#define MCU_233_BCM_111H_BCM_ESCL_POWER_NAME "BCM_ESCL_Power"
#define MCU_233_BCM_114H_BCM_FAIL_CODE_NAME "BCM_FailCode"
#define MCU_233_BCM_212H_BCM_SSB_SW_ERROR_NAME "BCM_SSBSwError"
#define MCU_233_BCM_212H_BCM_PEPS_POWER_RELAY_ERR_NAME "BCM_pepsPowerRelayErr"
#define MCU_233_BCM_212H_BCM_INDICATION_START_STOP_NAME "BCM_IndicationStartStop"
#define MCU_233_BCM_212H_BCM_KEYBATTERY_STATUS_NAME "BCM_KeybatteryStatus"
#define MCU_233_BCM_212H_BCM_BATTERY_STATUS_NAME "BCM_BatteryStatus"
#define MCU_233_BCM_212H_BCM_PEPS_KEY_IN_CAR_IND_NAME "BCM_pepsKeyInCarInd"
#define MCU_233_BCM_212H_BCM_PEPS_NOT_OFF_KEY_NOT_IN_CAR_IND_NAME "BCM_pepsNotOFFKeyNotInCarInd"
#define MCU_233_BCM_212H_BCM_PEPS_KEY_CLOSER_IND_NAME "BCM_pepsKeyCloserInd"
#define MCU_233_BCM_212H_BCM_PE_LOCK_WARNING_NAME "BCM_peLockWarning"
#define MCU_233_BCM_212H_BCM_ESCL_WARNING_NAME "BCM_ESCLWarning"
#define MCU_233_BCM_VCU_AUTH_022H_BCM_IMMOBILIZER_INFO_NAME "BCM_ImmobilizerInfo"
#define MCU_233_BCM_TBOX_AUTH_024H_BCM_REMOTE_CHALL_CODE_NAME "BCM_RemoteChallCode"
#define MCU_233_BCM_ESCL_AUTH_025H_BCM_ESCL_DATA_NAME "BCM_ESCL_Data"
#define MCU_233_BCM_ESCL_AUTH_025H_BCM_ESCL_REQUST_NAME "BCM_ESCL_Requst"
#define MCU_233_BCM_NM_404H_NM_DEST_ADDRESS_NAME "NM_DEST_ADDRESS"
#define MCU_233_BCM_NM_404H_NM_SLEEP_ACK_NAME "NM_SLEEP_ACK"
#define MCU_233_BCM_NM_404H_NM_SLEEP_IND_NAME "NM_SLEEP_IND"
#define MCU_233_BCM_NM_404H_NM_LIMPHOME_NAME "NM_LIMPHOME"
#define MCU_233_BCM_NM_404H_NM_RING_NAME "NM_RING"
#define MCU_233_BCM_NM_404H_NM_ALIVE_NAME "NM_ALIVE"
#define MCU_233_FSW_3_C1H_MFS_R_WHEEL_SW_NAME "MFS_R_WheelSw"
#define MCU_233_FSW_3_C1H_MFS_R_RIGHT_SW_NAME "MFS_R_RightSW"
#define MCU_233_FSW_3_C1H_MFS_R_LEFT_SW_NAME "MFS_R_LeftSW"
#define MCU_233_FSW_3_C1H_MFS_R_WHEEL_DOWN_NAME "MFS_R_WheelDown"
#define MCU_233_FSW_3_C1H_MFS_R_WHEEL_UP_NAME "MFS_R_WheelUp"
#define MCU_233_FSW_3_C1H_MFS_R_FUNC_SW2_NAME "MFS_R_FuncSW2"
#define MCU_233_FSW_3_C1H_MFS_R_FUNC_SW1_NAME "MFS_R_FuncSW1"
#define MCU_233_FSW_3_C1H_MFS_L_ACC_NAME "MFS_L_ACC"
#define MCU_233_FSW_3_C1H_MFS_L_GAP_PLUS_NAME "MFS_L_GapPlus"
#define MCU_233_FSW_3_C1H_MFS_L_GAP_MINUS_NAME "MFS_L_GapMinus"
#define MCU_233_FSW_3_C1H_MFS_L_SPEED_MINUS_SET_NAME "MFS_L_SpeedMinusSet"
#define MCU_233_FSW_3_C1H_MFS_L_SPEED_PLUS_NAME "MFS_L_SpeedPlus"
#define MCU_233_FSW_3_C1H_MFS_L_FUNC_SW2_NAME "MFS_L_FuncSW2"
#define MCU_233_FSW_3_C1H_MFS_L_FUNC_SW1_NAME "MFS_L_FuncSW1"
#define MCU_233_SWH_STATE_3_C2H_SWH_STEER_WHEEL_HEATG_ERR_NAME "SWH_SteerWheelHeatgErr"
#define MCU_233_SWH_STATE_3_C2H_SWH_STEER_WHEEL_HEATG_STS_NAME "SWH_SteerWheelHeatgSts"
#define MCU_233_SWH_STATE_3_C2H_SWH_RESPONSE_ERROR_NAME "SWH_responseError"
#define MCU_233_IHU_ACMM_2_F9H_IHU_DEFROST_SWITCH_NAME "IHU_DefrostSwitch"
#define MCU_233_IHU_ACMM_2_F9H_IHU_AC_SWITCH_NAME "IHU_ACSwitch"
#define MCU_233_IHU_ACMM_2_F9H_IHU_AUTO_SWITCH_NAME "IHU_AutoSwitch"
#define MCU_233_IHU_ACMM_2_F9H_IHU_MAIN_SWTICH_NAME "IHU_MainSwtich"
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_BLOWER_LVL_NAME "IHU_F_BlowerLvl"
#define MCU_233_IHU_ACMM_2_F9H_IHU_MODE_SWITCH_NAME "IHU_ModeSwitch"
#define MCU_233_IHU_ACMM_2_F9H_IHU_CYCLE_SWITCH_NAME "IHU_CycleSwitch"
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_EV_NAME "IHU_F_TempSet_EV"
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_TEMP_SET_AUTO_NAME "IHU_F_TempSet_Auto"
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_PTC_SET_NAME "IHU_R_PTC_Set"
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_MAIN_SWTICH_NAME "IHU_R_MainSwtich"
#define MCU_233_IHU_ACMM_2_F9H_IHU_F_PTC_SET_NAME "IHU_F_PTC_Set"
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_AUTO_NAME "IHU_R_TempSet_Auto"
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_MODE_SWTICH_NAME "IHU_R_ModeSwtich"
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_BLOWER_LVL_NAME "IHU_R_BlowerLvl"
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_TEMP_SET_EV_NAME "IHU_R_TempSet_EV"
#define MCU_233_IHU_ACMM_2_F9H_IHU_R_AC_SWITCH_NAME "IHU_R_ACSwitch"
#define MCU_233_IHU_ACMM_2_F9H_IHU_MAXPTC_NAME "IHU_MAXPTC"
#define MCU_233_IHU_ACMM_2_F9H_IHU_MAXAC_NAME "IHU_MAXAC"
#define MCU_233_IHU_ACMM_2_F9H_IHU_KEY_AIRPURIFICATION_NAME "IHU_KeyAirpurification"
#define MCU_233_IHU_ACMM_2_F9H_IHU_TEM_SAME_SET_NAME "IHU_TemSameSet"
#define MCU_233_IHU_VCU_2_F_AH_IHU_AVH_SWITCH_NAME "IHU_AVH_Switch"
#define MCU_233_IHU_VCU_2_F_AH_IHU_ESC_OFF_SWITCH_NAME "IHU_ESC_Off_Switch"
#define MCU_233_IHU_VCU_2_F_AH_IHU_EPB_TOW_MODE_SWITCH_NAME "IHU_EPB_TowMode_Switch"
#define MCU_233_IHU_VCU_2_F_AH_IHU_TPMS_RESET_SWITCH_NAME "IHU_TPMS_Reset_Switch"
#define MCU_233_IHU_VCU_2_F_AH_IHU_VSP_SOUND_OFF_NAME "IHU_VSP_Sound_Off"
#define MCU_233_IHU_VCU_2_F_AH_IHU_SLOW_CHARGING_PRESERVATION_SWITCH_NAME "IHU_SlowChargingPreservation_Switch"
#define MCU_233_IHU_VCU_2_F_AH_IHU_EXTERNAL_DISCHARGE_SWITCH_NAME "IHU_ExternalDischarge_Switch"
#define MCU_233_IHU_VCU_2_F_AH_IHU_WORM_MODE_SWITCH_NAME "IHU_WormMode_Switch"
#define MCU_233_IHU_VCU_2_F_AH_IHU_DRIVING_MODE_NAME "IHU_DrivingMode"
#define MCU_233_IHU_VCU_2_F_AH_IHU_WCM_SWITCH_NAME "IHU_WCMSwitch"
#define MCU_233_IHU_VCU_2_F_AH_IHU_EPB_SWITCH_NAME "IHU_EPB_Switch"
#define MCU_233_IHU_VCU_2_F_AH_IHU_ENERGY_RECOVERY_NAME "IHU_EnergyRecovery"
#define MCU_233_IHU_VCU_2_F_AH_CHARGE_LIMIT_SET_NAME "Charge_Limit_Set"
#define MCU_233_IHU_VCU_2_F_AH_IHU_POW_BAT_DEEP_DISCHARGE_NAME "IHU_PowBatDeepDischarge"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_SPEED_WARN_MAX_SPEED_SET_NAME "IHU_ICM_SpeedWarnMaxSpeedSet"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_RESI_MILG_MODE_SET_NAME "IHU_ICM_ResiMilgModeSet"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_THEME_NAME "IHU_ICM_Theme"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_FATIGUE_DRIVING_WARN_NAME "IHU_ICM_FatigueDrivingWarn"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_OVERSPEED_WARN_NAME "IHU_ICM_OverspeedWarn"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_ALARM_NAME "IHU_ICM_DMS_Alarm"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_STATE_NAME "IHU_ICM_DMS_State"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_DISTRACT_LVL_NAME "IHU_ICM_DMS_DistractLvl"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_FATIGUED_LVL_NAME "IHU_ICM_DMS_FatiguedLvl"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_FATIGUE_DRIVING_WARNSET_NAME "IHU_ICM_FatigueDrivingWarnset"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_UNIT_SET_NAME "IHU_ICM_Unit_set"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_LANGUANGE_SET_NAME "IHU_ICM_Languange_set"
#define MCU_233_IHU_ICM_2_F_FH_IHU_ICM_DMS_VALID_NAME "IHU_ICM_DMS_Valid"
#define MCU_233_IHU_ADAS_2_FC_IHU_ELK_SWITCH_NAME "IHU_ELKSwitch"
#define MCU_233_IHU_ADAS_2_FC_IHU_LDW_ALARM_SENSITIVITY_SET_NAME "IHU_LDWAlarmSensitivitySet"
#define MCU_233_IHU_ADAS_2_FC_IHU_LDW_ALARM_METHOD_SET_NAME "IHU_LDWAlarmMethodSet"
#define MCU_233_IHU_ADAS_2_FC_IHU_LDW_SWITCH_NAME "IHU_LDWSwitch"
#define MCU_233_IHU_ADAS_2_FC_IHU_FCW_AEB_ALARM_SENSITIVITY_SET_NAME "IHU_FCW_AEBAlarmSensitivitySet"
#define MCU_233_IHU_ADAS_2_FC_IHU_FCW_AEB_SWITCH_NAME "IHU_FCW_AEBSwitch"
#define MCU_233_IHU_ADAS_2_FC_IHU_SLWF_ALARM_METHOD_NAME "IHU_SLWFAlarmMethod"
#define MCU_233_IHU_ADAS_2_FC_IHU_MOIS_SWITCH_NAME "IHU_MOISSwitch"
#define MCU_233_IHU_ADAS_2_FC_IHU_SLWF_ALARM_METHOD_SET_NAME "IHU_SLWFAlarmMethodSet"
#define MCU_233_IHU_ADAS_2_FC_IHU_SLWF_SWITCH_NAME "IHU_SLWFSwitch"
#define MCU_233_IHU_ADAS_2_FC_IHU_SLIF_REMINDER_METHOD_SET_NAME "IHU_SLIFReminderMethodSet"
#define MCU_233_IHU_ADAS_2_FC_IHU_SLIF_SWITCH_NAME "IHU_SLIFSwitch"
#define MCU_233_IHU_ADAS_2_FC_IHU_ELK_ALARM_METHOD_SET_NAME "IHU_ELKAlarmMethodSet"
#define MCU_233_IHU_ADAS_2_FC_IHU_BSD_LCW_SWITCH_NAME "IHU_BSD_LCWSwitch"
#define MCU_233_IHU_ADAS_2_FC_IHU_DOW_SWITCH_NAME "IHU_DOWSwitch"
#define MCU_233_IHU_ADAS_2_FC_IHU_BSIS_ALARM_METHOD_SET_NAME "IHU_BSISAlarmMethodSet"
#define MCU_233_IHU_ADAS_2_FC_IHU_CHECK_SUM_NAME "IHU_CheckSum"
#define MCU_233_IHU_ADAS_2_FC_IHU_ROLLING_COUNTER_NAME "IHU_RollingCounter"
#define MCU_233_IHU_TIME_3_E3H_IHU_YEAR_TIME_NAME "IHU_YearTime"
#define MCU_233_IHU_TIME_3_E3H_IHU_MONTH_TIME_NAME "IHU_MonthTime"
#define MCU_233_IHU_TIME_3_E3H_IHU_DAY_TIME_NAME "IHU_DayTime"
#define MCU_233_IHU_TIME_3_E3H_IHU_HOUR_TIME_NAME "IHU_HourTime"
#define MCU_233_IHU_TIME_3_E3H_IHU_MINUTE_TIME_NAME "IHU_MinuteTime"
#define MCU_233_IHU_TIME_3_E3H_IHU_SECOND_TIME_NAME "IHU_SecondTime"
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_STATUS_NAME "NavSpeedLimitStatus"
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_UNITS_NAME "NavSpeedLimitUnits"
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_DEFAULT_VALUE_NAME "NavSpeedLimitDefaultValue"
#define MCU_233_NAV_2_F2H_NAV_COUNTRY_CODELNFO_NAME "NavCountryCodelnfo"
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_TYPE_NAME "NavSpeedLimitType"
#define MCU_233_NAV_2_F2H_NAV_CURR_ROAD_TYPE_NAME "NavCurrRoadType"
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_CONDITIONAL_TYPE_NAME "NavSpeedLimitConditionalType"
#define MCU_233_NAV_2_F2H_NAV_SPEED_LIMIT_NON_DEFAULT_VALUE_NAME "NavSpeedLimitNonDefaultValue"
#define MCU_233_NAV_2_F2H_NAV_ENTER_RAMP_NAME "NavEnterRamp"
#define MCU_233_NAV_2_F2H_NAV_RAMP_DIST_NAME "NavRampDist"
#define MCU_233_NAV_2_F3H_NAV_SPEED_LIMIT_RAIN_NAME "NavSpeedLimit_Rain"
#define MCU_233_NAV_2_F3H_NAV_SPEED_LIMIT_SNOW_NAME "NavSpeedLimit_Snow"
#define MCU_233_NAV_2_F3H_NAV_SPEED_LIMIT_FOG_NAME "NavSpeedLimit_Fog"
#define MCU_233_NAV_2_F3H_NAV_ROUNDABOUT_SPD_LMT_NAME "NavRoundaboutSpdLmt"
#define MCU_233_NAV_2_F3H_NAV_ROUNDABOUT_DIST_NAME "NavRoundaboutDist"
#define MCU_233_NAV_2_F3H_NAV_JUNCTION_DIST_NAME "NavJunctionDist"
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN_NAME "NavOtherTrafficSign"
#define MCU_233_NAV_2_F3H_NAV_OTHER_TRAFFIC_SIGN_DIST_NAME "NavOtherTrafficSignDist"
#define MCU_233_NAV_2_F3H_NAV_ROAD_WINDING_NAME "NavRoadWinding"
#define MCU_233_IHU_BCM_2_F_BH_IHU_LEAVING_CAR_LOCK_SWITCH_NAME "IHU_LeavingCarLockSwitch"
#define MCU_233_IHU_BCM_2_F_BH_IHU_DOOR_LOCK_SET_NAME "IHU_DoorLockSet"
#define MCU_233_IHU_BCM_2_F_BH_IHU_CHILD_LOCK_SWITCH_NAME "IHU_ChildLockSwitch"
#define MCU_233_IHU_BCM_2_F_BH_IHU_IP_LIGHT_SWITCH_NAME "IHU_IPLightSwitch"
#define MCU_233_IHU_BCM_2_F_BH_IHU_APL_SWITCH_NAME "IHU_APLSwitch"
#define MCU_233_IHU_BCM_2_F_BH_IHU_MODE_SELECT_SWITCH_NAME "IHU_ModeSelectSwitch"
#define MCU_233_IHU_BCM_2_F_BH_IHU_MIR_FOLD_HEAT_SWITCH_NAME "IHU_MirFoldHeatSwitch"
#define MCU_233_IHU_BCM_2_F_BH_IHU_WINDSCREEN_HEAT_SWITCH_NAME "IHU_WindscreenHeatSwitch"
#define MCU_233_IHU_BCM_2_F_BH_IHU_LOCK_PROMPT_SWITCH_NAME "IHU_lockPromptSwitch"
#define MCU_233_IHU_BCM_2_F_BH_IHU_BACKLIGHT_LUMINANCE_SET_NAME "IHU_Backlight_LuminanceSet"
#define MCU_233_IHU_BCM_2_F_BH_IHU_FOLLOW_ME_TIME_SET_NAME "IHU_FollowMeTimeSet"
#define MCU_233_IHU_BCM_2_F_BH_IHU_LOGO_SWITCH_NAME "IHU_LOGOSwitch"
#define MCU_233_IHU_BCM_2_F_BH_IHU_ELECTRIC_SLIDING_DOOR_NAME "IHU_ElectricSlidingDoor"
#define MCU_233_IHU_BCM_2_F_BH_IHU_SEARCH_VEHICLE_METHOD_NAME "IHU__SearchVehicleMethod"
#define MCU_233_IHU_BCM_2_F_BH_IHU_D_F_RW_AUTO_NAME "IHU_D_FRw_Auto"
#define MCU_233_IHU_BCM_2_F_BH_IHU_D_F_LW_AUTO_NAME "IHU_D_FLw_Auto"
#define MCU_233_IHU_BCM_2_F_BH_IHU_VEHICLE_POWER_MODE_SET_NAME "IHU_VehiclePowerModeSet"
#define MCU_233_IHU_BCM_2_F_BH_IHU_DOOR_CENT_LOCK_SET_NAME "IHU_DoorCentLockSet"
#define MCU_233_IHU_BCM_2_F_BH_IHU_LOCK_CAR_CLOSE_WINDOW_SET_NAME "IHU_LockCarCloseWindowSet"
#define MCU_233_IHU_BCM_2_F_BH_IHU_FOLLOW_ME_CAR_SWITCH_NAME "IHU_FollowMeCarSwitch"
#define MCU_233_IHU_BCM_2_F_BH_IHU_WELCOME_FEATURE_SWITCH_NAME "IHU_WelcomeFeatureSwitch"
#define MCU_233_IHU_BCM_2_F_BH_IHU_STEERING_WHEEL_HEATING_NAME "IHU_SteeringWheelHeating"
#define MCU_233_IHU_BCM_2_F_BH_IHU_AUTOMATIC_DRIVING_LOCK_NAME "IHU_AutomaticDrivingLock"
#define MCU_233_IHU_BCM_2_F_BH_IHU_CLOSING_CAR_LOCK_SWITCH_NAME "IHU_ClosingCarLockSwitch"
#define MCU_233_IHU_BCM_2_F_BH_IHU_DELAY_POWER_OFF_NAME "IHU_DelayPowerOFF"
#define MCU_233_IHU_ESC_255H_AUTOHOLD_WITCHSETTINGS_NAME "autohold_witchsettings"
#define MCU_233_TBOX_ACMM_213H_TBOX_DEFROST_SWITCH_NAME "TBOX_DefrostSwitch"
#define MCU_233_TBOX_ACMM_213H_TBOX_MAIN_SWTICH_NAME "TBOX_MainSwtich"
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_EV_NAME "TBOX_F_TempSet_EV"
#define MCU_233_TBOX_ACMM_213H_TBOX_F_TEMP_SET_AUTO_NAME "TBOX_F_TempSet_Auto"
#define MCU_233_TBOX_ACMM_213H_TBOX_MAXPTC_NAME "TBOX_MAXPTC"
#define MCU_233_TBOX_ACMM_213H_TBOX_MAXAC_NAME "TBOX_MAXAC"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_W_AUTO_SWICH_NAME "TBOX_WAutoSwich"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_DOOR_LOCK_STS_NAME "TBOX_DoorLockSts"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_REMOTE_POWER_ON_NAME "TBOX_RemotePowerON"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_REMOTE_POWER_OFF_NAME "TBOX_RemotePowerOff"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_BT_KEY_EXIST_NAME "TBOX_BtKeyExist"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SEARCH_VEHICLE_REQ_NAME "TBOX_SearchVehicleReq"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_WINDOW_VENTILATION_SWITCH_NAME "TBOX_WindowVentilationSwitch"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_D_F_RW_AUTO_NAME "TBOX_D_FRw_Auto"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_D_F_LW_AUTO_NAME "TBOX_D_FLw_Auto"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_OTA_POWER_ON_NAME "TBOX_OTAPowerON"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_HEAT_LEVEL_D_NAME "TBOX_SMM_HeatLevel_D"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_SMM_FAN_LEVEL_D_NAME "TBOX_SMM_FanLevel_D"
#define MCU_233_TBOX_BCM_2_F1H_TBOX_OTA_POWER_OFF_NAME "TBOX_OTAPowerOFF"
#define MCU_233_TBOX_BCM_2_F5H_T_BOX_REM_AUTHENTICATION_RQ_NAME "TBox_RemAuthenticationRq"
#define MCU_233_TBOX_BCM_2_F5H_T_BOX_REMOTE_AUTH_RESULT_REP_MUM_NAME "TBox_RemoteAuthResultRepMum"
#define MCU_233_IHU_NM_40_AH_NM_DEST_ADDRESS_NAME "NM_DEST_ADDRESS"
#define MCU_233_IHU_NM_40_AH_NM_SLEEP_ACK_NAME "NM_SLEEP_ACK"
#define MCU_233_IHU_NM_40_AH_NM_SLEEP_IND_NAME "NM_SLEEP_IND"
#define MCU_233_IHU_NM_40_AH_NM_LIMPHOME_NAME "NM_LIMPHOME"
#define MCU_233_IHU_NM_40_AH_NM_RING_NAME "NM_RING"
#define MCU_233_IHU_NM_40_AH_NM_ALIVE_NAME "NM_ALIVE"
#define MCU_233_TBOX_NM_410H_NM_DEST_ADDRESS_NAME "NM_DEST_ADDRESS"
#define MCU_233_TBOX_NM_410H_NM_SLEEP_ACK_NAME "NM_SLEEP_ACK"
#define MCU_233_TBOX_NM_410H_NM_SLEEP_IND_NAME "NM_SLEEP_IND"
#define MCU_233_TBOX_NM_410H_NM_LIMPHOME_NAME "NM_LIMPHOME"
#define MCU_233_TBOX_NM_410H_NM_RING_NAME "NM_RING"
#define MCU_233_TBOX_NM_410H_NM_ALIVE_NAME "NM_ALIVE"
#define MCU_233_CGW_NM_402H_NM_DEST_ADDRESS_NAME "NM_DEST_ADDRESS"
#define MCU_233_CGW_NM_402H_NM_SLEEP_ACK_NAME "NM_SLEEP_ACK"
#define MCU_233_CGW_NM_402H_NM_SLEEP_IND_NAME "NM_SLEEP_IND"
#define MCU_233_CGW_NM_402H_NM_LIMPHOME_NAME "NM_LIMPHOME"
#define MCU_233_CGW_NM_402H_NM_RING_NAME "NM_RING"
#define MCU_233_CGW_NM_402H_NM_ALIVE_NAME "NM_ALIVE"
#define MCU_233_ESCL_STATUS_031H_ESCL_LOCK_UNLOCK_STATUS_NAME "ESCL_LockUnlock_Status"
#define MCU_233_ESCL_STATUS_031H_ESCL_FAILURE_STATUS_NAME "ESCL_FailureStatus"
#define MCU_233_ESCL_STATUS_031H_ESCL_AUTHENTICATION_FAILURE_NAME "ESCL_AuthenticationFailure"
#define MCU_233_ESCL_STATUS_031H_ESCL_ERROR_CODE_NAME "ESCL_ErrorCode"
#define MCU_233_ESCL_STATUS_031H_ESCL_BUSY_NAME "ESCL_Busy"
#define MCU_233_ESCL_STATUS_031H_ESCL_LOCK_LIMIT_SW_NAME "ESCL_LockLimitSW"
#define MCU_233_ESCL_STATUS_031H_ESCL_UNLOCK_LIMIT_SW_NAME "ESCL_UnlockLimitSW"
#define MCU_233_ESCL_STATUS_031H_ESCL_OPERATION_FAILURE_NAME "ESCL_OperationFailure"
#define MCU_233_ESCL_STATUS_031H_ESCL_LOCK_SWITCH_FAILURE_NAME "ESCL_LockSwitchFailure"
#define MCU_233_ESCL_STATUS_031H_ESCL_DIAG_FAILURE_NAME "ESCL_DiagFailure"
#define MCU_233_ESCL_STATUS_031H_ESCL_BOLT_BLOCKED_STATUS_NAME "ESCL_BoltBlocked_Status"
#define MCU_233_ESCL_STATUS_031H_ESCL_NM_USR_DATA3_NAME "ESCL_NMUsrData3"
#define MCU_233_ESCL_STATUS_031H_ESCL_MORTOR_OPEN_FAILURE_NAME "ESCL_MortorOpenFailure"
#define MCU_233_ESCL_STATUS_031H_ESCL_UNLOCK_SWITCH_PARTICLE_FAILURE_NAME "ESCL_UnlockSwitchParticleFailure"
#define MCU_233_ESCL_STATUS_031H_ESCL_LOCK_SWITCH_PARTICLE_FAILURE_NAME "ESCL_LockSwitchParticleFailure"
#define MCU_233_ESCL_STATUS_031H_ESCL_UNLOCK_SWITCH_FAILURE_NAME "ESCL_UnlockSwitchFailure"
#define MCU_233_ESCL_STATUS_031H_ESCL_UN_LOCK_OPERATION_FAILURE_NAME "ESCL_UNLock_OperationFailure"
#define MCU_233_ESCL_CERTIFICATION_032H_ESCL_RAMDON_CODE_NAME "ESCL_RamdonCode"
#define MCU_233_ESCL_NM_405H_NM_DEST_ADDRESS_NAME "NM_DEST_ADDRESS"
#define MCU_233_ESCL_NM_405H_NM_SLEEP_ACK_NAME "NM_SLEEP_ACK"
#define MCU_233_ESCL_NM_405H_NM_SLEEP_IND_NAME "NM_SLEEP_IND"
#define MCU_233_ESCL_NM_405H_NM_LIMPHOME_NAME "NM_LIMPHOME"
#define MCU_233_ESCL_NM_405H_NM_RING_NAME "NM_RING"
#define MCU_233_ESCL_NM_405H_NM_ALIVE_NAME "NM_ALIVE"
#define MCU_233_CCS_2_F7H_CCS_TEM_SET_NAME "CCS_TemSet"
#define MCU_233_CCS_2_F7H_CCS_AC_SWITCH_NAME "CCS_ACSwitch"
#define MCU_233_CCS_2_F7H_CCS_DEFROST_SWITCH_NAME "CCS_DefrostSwitch"
#define MCU_233_CCS_2_F7H_CCS_CYCLE_SWITCH_NAME "CCS_CycleSwitch"
#define MCU_233_CCS_2_F7H_CCS_AUTO_SWITCH_NAME "CCS_AutoSwitch"
#define MCU_233_CCS_2_F7H_CCS_MAIN_SWTICH_NAME "CCS_MainSwtich"
#define MCU_233_CCS_2_F7H_CCS_BLOWERL_LVL_SET_NAME "CCS_BlowerlLvlSet"
#define MCU_233_PSD_188H_PSD_CHILDLOCKSTATUS_NAME "PSD_Childlockstatus"
#define MCU_233_PSD_288H_PSD_VOICE_CONTROL_NAME "PSD_VoiceControl"

/**
 * Signals in message VCU_103h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_103h_t {
    /**
     * HighVoltageBatteryModeRequst¶¯Á¦µç³ØÉÏÏÂµçÖ¸Áî
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_hv_bat_md_req;

    /**
     * DischargeAllowÔÊÐí·ÅµçÃüÁî£¨DCAC¿ØÖÆÖ¸Áî£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_discharge_alw;

    /**
     * ChargeAllowÔÊÐí³äµçÃüÁî
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_charge_alw;

    /**
     * DCDCWakeupSleepControlDCDC»½ÐÑÐÝÃß¿ØÖÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_dcdc_wakeuo_sleep_ctrl;

    /**
     * DCDCEnableDCDCÊ¹ÄÜ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_dcdc_md_req;

    /**
     * MotorTargetSpeedRequestµç»úÄ¿±ê×ªËÙÇëÇó
     *
     * Range: 0..65533 (-20000..45533 -)
     * Scale: 1
     * Offset: -20000
     */
    uint16_t vcu_mcu_targe_spd_req;

    /**
     * MotorTargetTorqueRequestµç»úÄ¿±êÅ¤¾ØÇëÇó
     *
     * Range: 0..65533 (-2000..4553.3 -)
     * Scale: 0.1
     * Offset: -2000
     */
    uint16_t vcu_mcu_target_toq_req;

    /**
     * BOBCWakeupSleepControlBOBCÐÐ³µ»½ÐÑÐÝÃß¿ØÖÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_bobc_wakeup_sleep_ctrl;

    /**
     * VCU_OBCWakeupSleepCtrlOBCÔ¤Ô¼³äµç»½ÐÑ¿ØÖÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_obc_wakeup_sleep_ctrl;

    /**
     * VTMSWakeupSleepControlVTMS»½ÐÑÐÝÃß¿ØÖÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_vtms_wakeup_sleep_ctrl;

    /**
     * VCU·¢ËÍ¸øMCUµÄ·À¶¶Ê¹ÄÜÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_anti_shake;

    /**
     * VCU·¢ËÍ¸øMCUµÄÐÝÃßÖ¸Áî
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_sleep_cmd;

    /**
     * MotorWorkingModeRequestµç»ú¹¤×÷Ä£Ê½ÇëÇó
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mot_working_mode_req;

    /**
     * ÉÏ×°2¼ÌµçÆ÷Ö¸Áî
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_app_sec_relay_req;

    /**
     * ÉÏ×°1¼ÌµçÆ÷Ö¸Áî
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_app_fir_relay_req;

    /**
     * µç³Ø³¬³¤Ðøº½ÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_bms_extra_range;

    /**
     * BMSHeatingpreservationRequestµç³ØÂý³ä±£ÎÂÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_bms_heat_prese_req;

    /**
     * MCUDischargeRequestµç»úÖ÷¶¯Ð¹·ÅÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_discharge_req;

    /**
     * ÉÏÆÂ¸¨ÖúÊ¹ÄÜÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mc_uenabled_hhc;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_103_rolling_counter;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_103_check_sum;
};

/**
 * Signals in message VCU_200h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_200h_t {
    /**
     * VehicleDriveMode³µÁ¾¼ÝÊ»Ä£Ê½
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_drive_mode;

    /**
     * PowertrainReady¶¯Á¦ÏµÍ³Ready×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_pt_rdy;

    /**
     * ShiftLevelPositionµ±Ç°µµÎ»
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_shift_level_position;

    /**
     * VCUCANCommunicationFaultVCUCANÍ¨ÐÅ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_can_com_flt;

    /**
     * HighVoltageInterlockLoopClosed¸ßÑ¹»¥ËøÏµÍ³¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_hvil_clsd_flt;

    /**
     * Powerisaccidentallydisconnnected¸ßÑ¹ÒâÍâ¶Ï¿ª¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_accidently_discon;

    /**
     * VCUÕû³µ¹ÊÕÏµÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_sys_faulev;

    /**
     * SecurityAuthenticationFailReason·ÀµÁÈÏÖ¤Ê§°ÜÔ­Òò
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_scurt_authn_fail_reason;

    /**
     * ³äµçÇ¹Á¬½Ó×´Ì¬VCUÕûÌåÅÐ¶ÏºóµÄ³äµçÇ¹Á¬½Ó×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_chrgng_cnctd_sts;

    /**
     * ³äµç×´Ì¬0x01Í£³µ³äµç0x02ÄÜÁ¿»ØÊÕ(ÐÐÊ»³äµç)0x03Î´³äµç×´Ì¬0x04³äµçÍê³É0x05³äµç¹ÊÕÏ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_veh_charge_sts;

    /**
     * Õû³µÄ£Ê½
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_veh_mode;

    /**
     * VCUFaultVCU¹ÊÕÏ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_vcu_err_lv;

    /**
     * µµÎ»ÇëÇóÀ´Ô´
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_gear_control_module;

    /**
     * Å¤¾ØÇëÇóÀ´Ô´
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_torque_control_module;

    /**
     * Õû³µË²Ê±ÄÜºÄ
     *
     * Range: 0..1023 (0..102.3 kWh/100km)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcu_veh_real_t_egy_cnse;

    /**
     * InletElectronicLockstatusÂý³ä³äµçÇ¹µç×ÓËø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inlet_electronic_lock_sts;

    /**
     * Ðîµç³Ø²¹µç×´Ì¬·´À¡
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_intelligent_recharge_sts;

    /**
     * ³µÁ¾×´Ì¬£¬·¨¹æ¶¨Òå£¬ÐèÒªTBOXÉÏ´«¸ÃÐÅºÅ0x0:ÎÞÐ§Öµ0x1:³µÁ¾Æô¶¯×´Ì¬0x2:Ï¨»ð0x3:ÆäËû×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_veh_status;

    /**
     * ÖÆ¶¯ÇëÇóÀ´Ô´
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_brake_control_module;

    /**
     * InletElectronicLockRequestÂý³ä³äµçÇ¹µç×ÓËøÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_inlet_electronic_lock_req;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_200_rolling_counter;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_200_check_sum;
};

/**
 * Signals in message VCU_ICM_3FDh.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_icm_3_f_dh_t {
    /**
     * ×ÜÀï³Ì
     *
     * Range: 0..9999999 (0..999999.9 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t vcu_total_odometer;

    /**
     * Õû³µÆ½¾ùÄÜºÄ
     *
     * Range: 0..1023 (0..102.3 kWh/100km)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcu_veh_avrg_egy_cnse;

    /**
     * Ê£ÓàÐøº½Àï³Ì
     *
     * Range: 0..16000 (0..1600 km)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcu_resi_milg;
};

/**
 * Signals in message VCU_106h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_106h_t {
    /**
     * DCDCActualAvailablePowerMaxDCDCµ±Ç°ÔÊÐí×î´ó¹¦ÂÊ
     *
     * Range: 0..240 (0..6000 W)
     * Scale: 25
     * Offset: 0
     */
    uint8_t vcu_dcdc_actu_avlbl_pwr_max;

    /**
     * DCDCOutputVoltageRequestDCDCÊä³öµçÑ¹ÇëÇó
     *
     * Range: 0..240 (0..24 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t vcu_dcdc_out_vol_req;

    /**
     * ³äµçÕû³µÈÈ¹ÜÀí¹¦ÂÊÇëÇó
     *
     * Range: 0..250 (0..5 kW)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t vcu_bms_charge_vtms_pwr_peq;

    /**
     * Õû³µÈÈ¹ÜÀí¹¦ÂÊÔÊÐí
     *
     * Range: 0..250 (0..25 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t vcu_acmm_pwr_max;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_106_rolling_counter;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_106_check_sum;
};

/**
 * Signals in message VCU_18Fh.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_18_fh_t {
    /**
     * VCU¶Ôµç×ÓÓÍ±ÃµÄÐÝÃßÐÅºÅÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_eop_sleep_req;

    /**
     * VCU¶Ôµç×ÓÓÍ±ÃµÄÊ¹ÄÜÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_eop_enable;

    /**
     * VCU¶Ôµç×ÓÓÍ±ÃµÄ×ªËÙÇëÇó
     *
     * Range: 0..16383 (-8191..8192 rpm)
     * Scale: 1
     * Offset: -8191
     */
    uint16_t vcu_eop_mot_speed_req;

    /**
     * ÓÍÎÂÐÅºÅ
     *
     * Range: 0..255 (-50..205 ¡æ)
     * Scale: 1
     * Offset: -50
     */
    uint8_t vcu_eop_oil_temp;

    /**
     * Ð£Ñé
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_eop_check_sum;

    /**
     * 0~15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_eop_rolling_counter;
};

/**
 * Signals in message VCU_520h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_520h_t {
    /**
     * Á÷Á¿·§Ê¹ÄÜ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_fvb_enable;

    /**
     * Á÷Á¿·§B¿Ú¿ª¶ÈÇëÇó
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_fvb_b_open_value;

    /**
     * Á÷Á¿·§C¿Ú¿ª¶ÈÇëÇó(100%-B=C)
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_fvb_c_open_value;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_520_check_sum;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_520_rolling_counter;
};

/**
 * Signals in message VCU_526h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_526h_t {
    /**
     * Ñ²º½¿ØÖÆ×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_cruise_control_sts;

    /**
     * Ñ²º½Ä¿±ê³µËÙ
     *
     * Range: 0..4000 (0..400 km/h)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vcu_crs_veh_spd;
};

/**
 * Signals in message VCU_IHU_2FEh.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_ihu_2_f_eh_t {
    /**
     * Éî¶È·Åµç×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_pow_bat_deep_discharge;

    /**
     * µ±Ç°ÄÜÁ¿»ØÊÕµÈ¼¶
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_energy_recovery;

    /**
     * Âý³ä±£ÎÂÆôÓÃ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_slow_charging_preservation_status;

    /**
     * ¶ÔÍâ·ÅµçÆôÓÃ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_external_discharge_status;

    /**
     * ÈäÐÐÄ£Ê½ÆôÓÃ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_worm_mode_status;

    /**
     * ÔØÖØ×´Ì¬
     *
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_loadconditions;

    /**
     * ºóÖáÔØÖÊÁ¿
     *
     * Range: 0..255 (0..5100 kg)
     * Scale: 20
     * Offset: 0
     */
    uint8_t vcu_rearaxle;

    /**
     * ÔØºÉ´«¸ÐÆ÷ÅäÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_conloadsensors;
};

/**
 * Signals in message VCU_PEPS_527h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_peps_527h_t {
    /**
     * VCU·¢ËÍÈÏÖ¤Ëæ»úÊýµÚ1×Ö½Ú
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_challenge_random1;

    /**
     * VCU·¢ËÍÈÏÖ¤Ëæ»úÊýµÚ2×Ö½Ú
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_challenge_random2;

    /**
     * VCU·¢ËÍÈÏÖ¤Ëæ»úÊýµÚ3×Ö½Ú
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_challenge_random3;

    /**
     * VCU·¢ËÍÈÏÖ¤Ëæ»úÊýµÚ4×Ö½Ú
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_challenge_random4;
};

/**
 * Signals in message SSW_120h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ssw_120h_t {
    /**
     * »»µµÆ÷·¢ËÍµÄµµÎ»ÐÅºÅ£¬VCU½ÓÊÕ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssw_knob_position;

    /**
     * SSW¹ÊÕÏ×´Ì¬
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssw_fault;

    /**
     * Î»ÖÃÓÐÐ§ÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssw_shift_pos_valid;

    /**
     * Ô¤Áô
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssw_gear_chg_reminding;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssw_check_sum;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ssw_rolling_counter;
};

/**
 * Signals in message BMS_099h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bms_099h_t {
    /**
     * ¼ÓÈÈ¼ÌµçÆ÷Á¬½Ó×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_heating_relay_cnctd;

    /**
     * PrechargeRelayConnectedÔ¤³ä¼ÌµçÆ÷Á¬½Ó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_prchrgr_relay_cnctd;

    /**
     * CCConnectedStatusCCÐÅºÅÁ¬½Ó×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cc_cnctd_sts;

    /**
     * ChargingPlugConnectedStatusCC2¿ì³ä³äµç²åÍ·Á¬½Ó×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chrgng_plug_cnctd_sts;

    /**
     * HighVoltageBatteryWorkingMode¸ßÑ¹µç³Ø¹¤×÷Ä£Ê½
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_wokng_md;

    /**
     * BMSHeatingCoolingRequestµç³Ø¼ÓÈÈÀäÈ´ÇëÇó0x1:¼ÓÈÈÇëÇó0x2:ÀäÈ´ÇëÇó0x3:±£ÎÂÇëÇó
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_heating_cooling_req;

    /**
     * ¾ùºâ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_balancing_sts;

    /**
     * InsulationMonitorWarning¾øÔµ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_insulation_monitor_warn;

    /**
     * HighVoltageBatteryNegativeRelayConnected¸ßÑ¹µç³Ø¸º¼«¼ÌµçÆ÷Á¬½Ó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_ngtv_relay_cnctd;

    /**
     * HighVoltageBatteryPositiveRelayConnected¸ßÑ¹µç³ØÕý¼«¼ÌµçÆ÷Á¬½Ó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_pstv_relay_cnctd;

    /**
     * ¾øÔµµç×èÖµ
     *
     * Range: 0..60000 (0..60000 k¦¸)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_insulation_resistance;

    /**
     * ¿ì³ä¼ÌµçÆ÷¸º¼«Á¬½Ó×´Ì¬£¨Ö¸Áî)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_d_cchrgr_ngtv_relay_cnctd;

    /**
     * ¿ì³ä¼ÌµçÆ÷Õý¼«Á¬½Ó×´Ì¬£¨Ö¸Áî)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_d_cchrgr_pstv_relay_cnctd;

    /**
     * HighVoltageBatteryTargeTemperature¸ßÑ¹µç³ØÄ¿±êÎÂ¶È
     *
     * Range: 0..60 (0..60 ¡æ)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_targe_tem;

    /**
     * BMSÐÝÃßÐí¿É
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_sleep_allowed;

    /**
     * K-ONµç×´Ì¬ÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_kon_power_module;

    /**
     * ¸ßÑ¹µç³ØÍâ×ÜÑ¹
     *
     * Range: 0..16383 (0..1638.3 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_outside_total_voltage;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_99_rolling_counter;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_99_check_sum;
};

/**
 * Signals in message BMS_243h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bms_243h_t {
    /**
     * CC2³äµçÇ¹ÀàÐÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cc2_mode;

    /**
     * CCResistanceCC×èÖµ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cc_resistance;

    /**
     * ChargerWorkingModeRequestOBC¹¤×÷Ä£Ê½ÇëÇó
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charger_mode_req;

    /**
     * ChargeRequest³äµçÇëÇó
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_req;

    /**
     * ChargerOutputCurrentRequest³äµçµçÁ÷ÇëÇó
     *
     * Range: 0..65535 (-1000..5553.5 A)
     * Scale: 0.1
     * Offset: -1000
     */
    uint16_t bms_charger_output_current_req;

    /**
     * ChargerOutputVoltageRequest³äµçµçÑ¹ÇëÇó
     *
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_charger_output_voltage_req;

    /**
     * ³äµç¿ÚDC+ÎÂ¶È
     *
     * Range: 0..254 (-40..214 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_dc_charge_port_pstv_temp;

    /**
     * ³äµç¿ÚDC-ÎÂ¶È
     *
     * Range: 0..254 (-40..214 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_dc_charge_port_ngtv_temp;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_243_check_sum;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_243_rolling_counter;
};

/**
 * Signals in message BMS_244h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bms_244h_t {
    /**
     * µç³Ø°ü×î´óÔÊÐí³äµçµçÁ÷£¨10s£©
     *
     * Range: 0..10000 (0..1000 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_hv_bat_chg_current_10s;

    /**
     * µç³Ø°ü×î´óÔÊÐí·ÅµçµçÁ÷£¨10s£©
     *
     * Range: 0..10000 (0..1000 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_hv_bat_dis_chg_current_max10s;

    /**
     * HighVoltageBatteryCurrent¸ßÑ¹µç³Øµ±Ç°µçÁ÷£¨·ÅµçÎªÕý£¬³äµçÎª¸º£©
     *
     * Range: 0..65530 (-1000..5553 A)
     * Scale: 0.1
     * Offset: -1000
     */
    uint16_t bms_hv_bat_crnt;

    /**
     * HighVoltageBatteryVoltage¸ßÑ¹µç³Øµ±Ç°µçÑ¹
     *
     * Range: 0..65530 (0..6553 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_hv_bat_vol;
};

/**
 * Signals in message BMS_246h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bms_246h_t {
    /**
     * HighVoltageBatteryCellOverVoltageStatus¸ßÑ¹µç³Øµ¥Ìå¹ýÑ¹×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_cell_over_vol_sts;

    /**
     * HighVoltageBatteryCellUnderVoltageStatus¸ßÑ¹µç³Øµ¥ÌåÇ·Ñ¹×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_cell_under_vol_sts;

    /**
     * µç³Ø°ü×Ô±£»¤¹ÊÕÏ£¨ËÄ¼¶£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cutoff_error;

    /**
     * RESSThermalRunawayFaultµç³ØÏµÍ³ÈÈÊ§¿Ø±¨¾¯£¨ËÄ¼¶£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_thermal_runaway;

    /**
     * HighVoltageBatteryErrorLevel¸ßÑ¹µç³Ø´íÎóµÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_err_lvl;

    /**
     * µç³Ø¹ý·Å±¨¾¯£¨ËÄ¼¶£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_over_dis_chg;

    /**
     * µç³Ø¹ý³ä±¨¾¯£¨ËÄ¼¶£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_over_chg;

    /**
     * HighVoltageBatteryCellVoltageOverDifferentialStatus¸ßÑ¹µç³Øµ¥ÌåµçÑ¹²îÒì×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_cell_vol_diff_sts;

    /**
     * HighVoltageBatteryPackOverVoltageStatus¸ßÑ¹µç³Ø¹ýÑ¹×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_pack_over_vol_sts;

    /**
     * HighVoltageBatteryPackUnderVoltageStatus¸ßÑ¹µç³Ø°üÇ·Ñ¹×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_pack_under_vol_sts;

    /**
     * µç³Ø²»Æ¥Åä±¨¾¯£¨Ò»¼¶£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_not_match_flt;

    /**
     * SOCÌø±ä±¨¾¯£¨Ò»¼¶£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_soc_jump_flt;

    /**
     * ¿ì³ä³äµç²å×ùÎÂ¶È¹ÊÕÏ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_d_cchrg_outlet_temp_fault;

    /**
     * HighVoltageBatteryCellTemperatureDifferentialStatus¸ßÑ¹µç³Øµ¥ÌåÎÂ¶È²îÒì×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_cell_tem_diff_sts;

    /**
     * HighVoltageBatteryCellUnderTemperatureStatus¸ßÑ¹µç³ØµÍÎÂ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_cell_under_tem_sts;

    /**
     * HighVoltageBatteryCellOverTemperatureStatus¸ßÑ¹µç³Ø¹ýÎÂ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_cell_over_tem_sts;

    /**
     * VCUÍ¨Ñ¶ÍÑÀë
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_vcu_comm_fault;

    /**
     * ACAN×ÜÏßÍÑÀë£¨Busoff£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_acan_bus_fault;

    /**
     * »ØÀ¡µçÁ÷¹ÊÕÏ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_feedback_curr_fault;

    /**
     * ³äµç¹ýÁ÷¹ÊÕÏ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_charge_curr_fault;

    /**
     * ·Åµç¹ýÁ÷¹ÊÕÏ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_dis_chrg_curr_fault;

    /**
     * ¼ÌµçÆ÷´íÎó
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hvb_relay_contactor_error;

    /**
     * ¼ÌµçÆ÷¹ÊÕÏ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hvb_relay_contactor_fault;

    /**
     * ×Ü¸º¼ÌµçÆ÷Õ³Á¬¹ÊÕÏ£¨Èý¼¶£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_ngtv_relay_con_fault;

    /**
     * ×ÜÕý/Ô¤³ä¼ÌµçÆ÷Õ³Á¬¹ÊÕÏ£¨Èý¼¶£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_pstv_relay_con_fault;

    /**
     * Ó²¼þ¹ÊÕÏ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bms_harsware_fault;

    /**
     * CANcommunicationFaultWithLECUBMSÓë×Ó°æÍ¨ÐÅ¹ÊÕÏ£¨¶þ¼¶£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_can_com_flt_with_lecu;

    /**
     * HighVoltageInterlockLoopClosed¸ßÑ¹»¥ËøÏµÍ³¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hvil_clsd_flt;

    /**
     * ³äµçÐÅºÅÒì³£
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_char_signal_abnormality;

    /**
     * ¹©µç¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_power_in_abnormality;

    /**
     * ÊµÊ±¹ÊÕÏ×ÜÊý
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_counter;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_246_rolling_counter;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_246_check_sum;
};

/**
 * Signals in message BMS_249h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bms_249h_t {
    /**
     * HighVoltageBatteryAvailableStateOfCharge¸ßÑ¹µç³Ø¿ÉÓÃSOC×´Ì¬£¨ÒÇ±íÓÃÍâ·¢µ½ÓÃ»§£©
     *
     * Range: 0..250 (0..100 -)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t bms_hv_bat_avl_soc;

    /**
     * HighVoltageBatteryAbsoluteStateOfCharge¸ßÑ¹µç³ØÊµ¼ÊSOC×´Ì¬£¨Õû³µÓÃ£©
     *
     * Range: 0..250 (0..100 -)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t bms_hv_bat_abs_soc;

    /**
     * HighVoltageBatteryStateOfHealth¸ßÑ¹µç³ØSOH
     *
     * Range: 0..250 (0..100 -)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t bms_hv_bat_soh;

    /**
     * BMS³äµç×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_sts;

    /**
     * ÉÏ×°2¼ÌµçÆ÷×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_app_sec_relay_cnctd;

    /**
     * ÉÏ×°1¼ÌµçÆ÷×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_app_fir_relay_cnctd;

    /**
     * Ê£Óà³äµçÊ±¼ä
     *
     * Range: 0..2000 (0..2000 Min)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_remaining_charge_time;

    /**
     * SOC¸ß±¨¾¯
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_soc_high_flt;

    /**
     * SOCµÍ±¨¾¯
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_soc_low_flt;

    /**
     * ³¬³¤Ðøº½×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_extra_range_sts;

    /**
     * Éî¶È·Åµç/õËÐÐÔÊÐí
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_emerg_allow;

    /**
     * SOEÊýÖµ
     *
     * Range: 0..2047 (0..204.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_hv_bat_soe;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_249_rolling_counter;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_249_check_sum;
};

/**
 * Signals in message BMS_252h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bms_252h_t {
    /**
     * µç³Ø°ü×î´óÔÊÐí³äµçµçÁ÷£¨30s£©
     *
     * Range: 0..10000 (0..1000 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_hv_bat_chg_current_30s;

    /**
     * HighVoltageBatteryContinueChargeCurrent¸ßÑ¹µç³Ø³ÖÐø³äµçµçÁ÷
     *
     * Range: 0..10000 (0..1000 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_hv_bat_contn_chrg_crnt;

    /**
     * µç³Ø°ü×î´óÔÊÐí·ÅµçµçÁ÷£¨30s)
     *
     * Range: 0..10000 (0..1000 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_hv_bat_dis_chg_current_max_30s;

    /**
     * HighVoltageBatteryContinueDischargeCurrent¸ßÑ¹µç³Ø³ÖÐø·ÅµçµçÁ÷
     *
     * Range: 0..10000 (0..1000 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_hv_bat_contn_dischrg_crnt;
};

/**
 * Signals in message BMS_254h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bms_254h_t {
    /**
     * µç³Ø×Ü³äµçÄÜÁ¿
     *
     * Range: 0..16777215 (0..1677721.5 kwh)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t bms_total_charge_energy;

    /**
     * µç³Ø×Ü·ÅµçÄÜÁ¿
     *
     * Range: 0..16777215 (0..1677721.5 kwh)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t bms_total_discharge_energy;

    /**
     * µç³ØÎ´³äÂú³äµç´ÎÊý
     *
     * Range: 0..30 (0..30 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_nu_m;

    /**
     * µç³Ø»ØÀ¡ÄÜÁ¿
     *
     * Range: 0..2047 (0..204.7 kwh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_total_feedback_energy;
};

/**
 * Signals in message BMS_PACK1_260h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bms_pack1_260h_t {
    /**
     * HighVoltageBatteryLowestVoltageCellNumberµç³Øµ¥ÌåµçÑ¹×îµÍµçÑ¹±àºÅ
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_lowest_vol_cell_num;

    /**
     * HighVoltageBatteryhighestVoltageCellNumberµç³Øµ¥ÌåµçÑ¹×î¸ßµçÑ¹±àºÅ
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_highest_vol_cell_num;

    /**
     * HighVoltageBatteryLowestCellVoltageµç³Øµ¥ÌåµçÑ¹×îµÍµçÑ¹Öµ
     *
     * Range: 0..5000 (0..5000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_hv_bat_lowest_cell_vol;

    /**
     * HighVoltageBatteryhighestCellVoltageµç³Øµ¥ÌåµçÑ¹×î¸ßµçÑ¹Öµ
     *
     * Range: 0..5000 (0..5000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_hv_bat_highest_cell_vol;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_260_rolling_counter;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_260_check_sum;
};

/**
 * Signals in message BMS_PACK1_262h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bms_pack1_262h_t {
    /**
     * HighVoltageBatteryLowestTemperatureCellNumberµç³Ø×îµÍÎÂ¶È±àºÅ
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_lowest_tem_cell_num;

    /**
     * HighVoltageBatteryhighestTemperatureCellNumberµç³Ø×î¸ßÎÂ¶È±àºÅ
     *
     * Range: 0..200 (0..200 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_bat_highest_tem_cell_num;

    /**
     * HighVoltageBatteryhighestTemperatureµç³Ø×î¸ßÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_hv_bat_highest_tem;

    /**
     * HighVoltageBatteryLowestTemperatureµç³Ø×îµÍÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_hv_bat_lowest_tem;

    /**
     * HighVoltageBatteryAverageTemperatureµç³ØÆ½¾ùÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_hv_bat_avg_tem;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_262_check_sum;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_262_rolling_counter;
};

/**
 * Signals in message BMS_PACK1_268h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bms_pack1_268h_t {
    /**
     * µ¥ÌåµçÑ¹ÐòºÅX
     *
     * Range: 0..254 (0..254 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_vol_serial_number;

    /**
     * X*3+1ºÅµ¥ÌåµçÑ¹
     *
     * Range: 0..15000 (0..15000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_cell_vol_serial_number1;

    /**
     * X*3+2ºÅµ¥ÌåµçÑ¹
     *
     * Range: 0..15000 (0..15000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_cell_vol_serial_number2;

    /**
     * X*3+3ºÅµ¥ÌåµçÑ¹
     *
     * Range: 0..15000 (0..15000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_cell_vol_serial_number3;
};

/**
 * Signals in message BMS_PACK1_26Ch.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bms_pack1_26_ch_t {
    /**
     * µç³ØÎÂ¶ÈÐòºÅX
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_t_serial_number;

    /**
     * X*7+1ºÅµç³ØÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_cell_t_serial_number1;

    /**
     * X*7+2ºÅµç³ØÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_cell_t_serial_number2;

    /**
     * X*7+3ºÅµç³ØÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_cell_t_serial_number3;

    /**
     * X*7+4ºÅµç³ØÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_cell_t_serial_number4;

    /**
     * X*7+5ºÅµç³ØÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_cell_t_serial_number5;

    /**
     * X*7+6ºÅµç³ØÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_cell_t_serial_number6;

    /**
     * X*7+7ºÅµç³ØÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_cell_t_serial_number7;
};

/**
 * Signals in message BMS_3E1h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bms_3_e1h_t {
    /**
     * HighVoltageBatteryMaximumChargeVoltage¸ßÑ¹µç³Ø×î´ó³äµçµçÑ¹
     *
     * Range: 0..10000 (0..1000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_hv_bat_maxchrg_vol;

    /**
     * HighVoltageBatteryRatedVoltage¸ßÑ¹µç³Ø¶î¶¨µçÑ¹
     *
     * Range: 0..10000 (0..1000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_hv_bat_rated_vol;

    /**
     * HighVoltageBatteryRatedCapacity¸ßÑ¹µç³Ø¶î¶¨ÈÝÁ¿
     *
     * Range: 0..10000 (0..1000 Ah)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_hv_bat_rated_capacity;

    /**
     * HighVoltageBatteryRatedEnergy¸ßÑ¹µç³Ø¶î¶¨µçÁ¿
     *
     * Range: 0..10000 (0..1000 kwh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_hv_bat_rated_energy;
};

/**
 * Signals in message FVB_521h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_fvb_521h_t {
    /**
     * Á÷Á¿·§¹ÊÕÏ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fvb_error;

    /**
     * Á÷Á¿·§B¿Ú¿ª¶È(100%-B=C)
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fvb_b_open_value;

    /**
     * Á÷Á¿·§C¿Ú¿ª¶È
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fvb_c_open_value;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fvb_521_check_sum;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fvb_521_rolling_counter;
};

/**
 * Signals in message MCU_097h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_mcu_097h_t {
    /**
     * MCU·À¶¶ÓÐÐ§±êÖ¾Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_anti_shake;

    /**
     * MotorSpeedValidµç»ú×ªËÙÓÐÐ§±êÖ¾Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_mot_spd_valid;

    /**
     * MotorTorqueValidµç»úÅ¤¾ØÓÐÐ§±êÖ¾Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_mot_toq_valid;

    /**
     * MotorWorkingStatusµç»ú¹¤×÷×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_mot_working_sts;

    /**
     * DischargeStatusÖ÷¶¯Ð¹·Å×´Ì¬0x0:ÎÞÐ¹·Å0x1:Ð¹·ÅÍê³É0x2:Ð¹·Å³¬Ê±0x3:Ð¹·ÅÖÐ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_discharge_sts;

    /**
     * MotorActualTorqueµç»úµ±Ç°Å¤¾Ø
     *
     * Range: 0..65531 (-2000..4553.1 N.m)
     * Scale: 0.1
     * Offset: -2000
     */
    uint16_t mcu_mot_actu_toq;

    /**
     * MotorActualSpeedµç»úµ±Ç°×ªËÙ
     *
     * Range: 0..65531 (-20000..45531 rpm)
     * Scale: 1
     * Offset: -20000
     */
    uint16_t mcu_mot_actu_spd;

    /**
     * MotorTorqueLimitµç»ú¿ØÖÆÆ÷ÔÊÐíÊä³ö×î´óÅ¤¾Ø(ÏÞÁ÷ºóÅ¤¾Ø)
     *
     * Range: 0..65531 (-2000..4553.1 N.m)
     * Scale: 0.1
     * Offset: -2000
     */
    uint16_t mcu_mot_toq_lmt;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_97_checksum;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_97_rolling_counter;
};

/**
 * Signals in message MCU_098h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_mcu_098h_t {
    /**
     * MCU½»Á÷Ä¸ÏßµçÁ÷
     *
     * Range: 0..20000 (0..2000 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t mcu_ac_actu_crnt;

    /**
     * µç»úÔËÐÐ×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_mot_moving_sts;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_98_checksum;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_98_rolling_counter;
};

/**
 * Signals in message MCU_26Eh.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_mcu_26_eh_t {
    /**
     * ABCPhaseIGBTMaxTemperatureABCÏàIGBT×î´óÎÂ¶È£¨MCUÎÂ¶È£©
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t mcu_phase_igbt_max_temp;

    /**
     * MotorActualTemperatureµç»úµ±Ç°ÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t mcu_mot_actu_temp;

    /**
     * IPMRadiatorTemperatureIPMË®µÀÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t mcu_ipm_radiator_temp;

    /**
     * MCUÖ±Á÷Ä¸ÏßµçÁ÷
     *
     * Range: 0..20000 (-1000..1000 A)
     * Scale: 0.1
     * Offset: -1000
     */
    uint16_t mcu_dc_actu_crnt;

    /**
     * MCUÊäÈëµçÑ¹
     *
     * Range: 0..60000 (0..6000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t mcu_dc_link_volt;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_26_e_rolling_counter;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_26_e_checksum;
};

/**
 * Signals in message MCU_3E5h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_mcu_3_e5h_t {
    /**
     * DCLinkOverVoltageFaultÄ¸ÏßµçÑ¹¹ýÑ¹¹ÊÕÏ£¨ÏÞÖÆÊ§Ð§ºóµÄ¹ÊÕÏ£©Èý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_dc_link_over_volt_flt;

    /**
     * MotorOverTemperatureFaultµç»ú¹ýÈÈ£¨ÏÞÅ¤Ê§Ð§ºóµÄ¹ýÈÈ£©Èý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_mot_over_tem_flt;

    /**
     * IGBTOverTemperatureFaultIGBT¹ýÈÈ£¨ÏÞÖÆÊ§Ð§ºóµÄ¹ÊÕÏ£©Èý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_igbt_over_temp_flt;

    /**
     * RotaryTransformerFaultÐý±ä¹ÊÕÏÈý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_rotary_transformer_flt;

    /**
     * CurrentHallFaultµçÁ÷»ô¶û¹ÊÕÏÈý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_current_hall_flt;

    /**
     * MotorLackofPhaseFaultÊä³öÈ±Ïà¹ÊÕÏÈý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_mot_lack_of_pha_flt;

    /**
     * IGBTFaultIGBT¹ÊÕÏÈý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_igbt_flt;

    /**
     * MotorOverCurrentFault¹ýÁ÷¹ÊÕÏÈý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_mot_over_crnt_flt;

    /**
     * MotorOverTemperatureLimitTorqueFaultµç»ú¹ýÎÂÏÞÅ¤±êÖ¾¶þ¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_mot_over_temp_lim_toq;

    /**
     * CANCommunicationFaultCANÍ¨Ñ¶¹ÊÕÏ¶þ¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_can_com_flt;

    /**
     * CPLDRunStateFaultCPLDÔËÐÐ×´Ì¬Èý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_cpld_run_sts;

    /**
     * DriverLowerArmFaultÇý¶¯ÏÂ±ÛÇÅ¹ÊÕÏÈý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_drv_lower_arm_flt;

    /**
     * DriverUpperArmFaultÇý¶¯ÉÏ±ÛÇÅ¹ÊÕÏÈý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_drv_upper_arm_flt;

    /**
     * HardwareOverCurrentFaultÓ²¼þ¹ýÁ÷¹ÊÕÏÈý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_hw_overl_current_flt;

    /**
     * HardwareOverVoltageFaultÓ²¼þ¹ýÑ¹¹ÊÕÏÈý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_hw_over_volt_flt;

    /**
     * DCLinkUnderVoltageFaultÄ¸ÏßµçÑ¹Ç·Ñ¹¹ÊÕÏ£¨ÏÞÖÆÊ§Ð§ºóµÄ¹ÊÕÏ£©Èý¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_dc_link_under_volt_flt;

    /**
     * IGBTTemperatureSensorFaultIGBTÎÂ¶È´«¸ÐÆ÷¹ÊÕÏÒ»¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_igbt_sam_err;

    /**
     * MotorErrorLevelµç»ú¹ÊÕÏµÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_mot_er_lvl;

    /**
     * ¹ýÔØ¹ÊÕÏ£¨µç»ú¡¢¿ØÖÆÆ÷£©¶þ¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_over_load_lag;

    /**
     * MotorOverSpeedFaultµç»ú³¬ËÙ¹ÊÕÏ¶þ¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_mot_over_spd_flt;

    /**
     * RadiatorOverTemperatureLimitTorqueFaultÉ¢ÈÈÆ÷¹ýÎÂÏÞÅ¤±êÖ¾¶þ¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_radiator_over_temp_lim_toq;

    /**
     * IGBTJunctionOverTemperatureLimitTorqueFaultIGBTjunction¹ýÎÂÏÞÅ¤±êÖ¾¶þ¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_igbt_junc_ov_temp_lim_toq;

    /**
     * IGBTNTCOverTemperatureLimitTorqueFaultIGBTNTC¹ýÎÂÏÞÅ¤±êÖ¾¶þ¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_igbt_ntc_over_temp_lim_toq;

    /**
     * 12VÇ·Ñ¹¹ÊÕÏ¶þ¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_m12_under_vol;

    /**
     * MotorTemperatureSensorFaultµç»úÎÂ¶È´«¸ÐÆ÷¹ÊÕÏÒ»¼¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_motor_sam_err;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_3_e5_rolling_counter;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcu_3_e5_check_sum;
};

/**
 * Signals in message EOP_1A0h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_eop_1_a0h_t {
    /**
     * µç×ÓÓÍ±ÃÊµ¼Ê·´À¡×ªËÙ
     *
     * Range: 0..16383 (-8191..8192 rpm)
     * Scale: 1
     * Offset: -8191
     */
    uint16_t eop_motoer_speed;

    /**
     * µç×ÓÓÍ±Ã¹ÊÕÏµÈ¼¶
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_err_level;

    /**
     * µç×ÓÓÍ±ÃÄÚ²¿+5V³öÏÖÇ·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_5_v_under_volt_err;

    /**
     * µç×ÓÓÍ±ÃÄÚ²¿+5V³öÏÖ¹ýÑ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_5_v_over_volt_err;

    /**
     * µç×ÓÓÍ±ÃÄÚ²¿+5V³öÏÖ¹ýÁ÷
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_5_v_over_cur_err;

    /**
     * µç×ÓÓÍ±ÃÊµ¼Ê·´À¡×ªËÙÓëÄ¿±ê×ªËÙÏà²î¹ý´ó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_under_speed_err;

    /**
     * µç×ÓÓÍ±ÃÁãÎ»¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_zero_position_err;

    /**
     * µç×ÓÓÍ±Ãµç»úÐý±ä´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_resolver_sig_err;

    /**
     * µç×ÓÓÍ±ÃÇ·Ñ¹¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_under_volt_err;

    /**
     * ÎÂ¶È½Ï¸ßÊ±£¬µç×ÓÓÍ±Ã½øÈë½µ¶îÄ£Ê½
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_rating_fiag;

    /**
     * µç×ÓÓÍ±ÃÔËÐÐÄ£Ê½
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_operation_mode;

    /**
     * µç×ÓÓÍ±Ã¹ýÁ÷¹ÊÕÏ£¨£¾50A£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_over_cur_err;

    /**
     * Ð£ÑéVCUÂë´íÎó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_checksum_err;

    /**
     * µç×ÓÓÍ±Ã³¬ËÙ¹ÊÕÏ£¨£¾6000rpm£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_over_speed_err;

    /**
     * ³õÊ¼»¯Ê±¼ì²âµçÁ÷Æ«ÖÃ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_cur_offset_err;

    /**
     * PCBAÎÂ¶È£¾135¡æ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_pcb_over_temp_err;

    /**
     * Ä¸ÏßµçÑ¹£¾16.5V
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_over_volt_err_1;

    /**
     * Ä¸ÏßµçÑ¹£¼8.5V
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_under_volt_err_1;

    /**
     * ÎÂ¶È´«¸ÐÆ÷¹ýÑ¹¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_temp_sensor_over_volt_err;

    /**
     * ÎÂ¶È´«¸ÐÆ÷Ç·Ñ¹¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_temp_sensor_under_volt_err;

    /**
     * Î»ÖÃ´«¸ÐÆ÷¹ýÑ¹¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_sensor_over_volt_err;

    /**
     * Î»ÖÃ´«¸ÐÆ÷Ç·Ñ¹¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_sensor_under_volt_err;

    /**
     * µç×ÓÓÍ±Ã¹ýÑ¹¹ÊÕÏ£¨£¾21V£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_over_volt_err;

    /**
     * µç×ÓÓÍ±ÃÇý¶¯¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_power_stage_err;

    /**
     * µç×ÓÓÍ±Ã¶Â×ª¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_mot_bloked_err;

    /**
     * µç×ÓÓÍ±ÃÎü¿Õ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_dry_run_err;

    /**
     * ±¨ÎÄ¶ªÊ§»òBUSOFF
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_comm_err;

    /**
     * ¼ì²âRAM¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_ram_err;

    /**
     * ¼ì²âROM¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_rom_err;

    /**
     * ³õÊ¼»¯¼ì²âE2PROMÒì³£
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_e2_prom_err;

    /**
     * ¿´ÃÅ¹·¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_watchdog_err;

    /**
     * Ð£Ñé
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_checksum;

    /**
     * 0~15¼ÆÊý
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eop_rolling_counter;
};

/**
 * Signals in message DCDC_1F7h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_dcdc_1_f7h_t {
    /**
     * DCDC¸ßÑ¹»¥Ëø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_b1_hv_lock;

    /**
     * CAN³¬Ê±
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_can_time_out;

    /**
     * ¸¨Ô´¹©µçÇ·Ñ¹¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_12_v_fault;

    /**
     * DCDCÎÂ¶È±¨¾¯
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_tem_flt;

    /**
     * DCDCModeDCDCÄ£Ê½
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_md;

    /**
     * DCDCStatusErrorLevelDCDC¹ÊÕÏµÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_sts_err_lvl;

    /**
     * DCDCActualHighVoltage¸ßÑ¹Êµ¼ÊµçÑ¹
     *
     * Range: 0..10000 (0..1000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dcdc_actu_high_vol;

    /**
     * DCDCActualCurrentAtHV¸ßÑ¹Êµ¼ÊµçÁ÷
     *
     * Range: 0..254 (0..25.4 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t dcdc_actu_crnt_at_hv;

    /**
     * DCDCActualLowVoltageµÍÑ¹Êµ¼ÊµçÑ¹
     *
     * Range: 0..254 (0..25.4 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t dcdc_actu_low_vol;

    /**
     * DCDCActualCurrentAtLVµÍÑ¹Êµ¼ÊµçÁ÷
     *
     * Range: 0..254 (0..254 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_actu_crnt_at_lv;

    /**
     * DCDCActualTemperatureÊµ¼ÊÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t dcdc_actu_tem;

    /**
     * DCDCÓ²¼þ´íÎó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_b1_hard_fault;

    /**
     * DCDC¶ÌÂ·±£»¤
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_b1_sct;

    /**
     * DCDCÓ²¼þ¹ýÑ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_b1_vh_ov;

    /**
     * DCDCÊä³ö¹ýÁ÷
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_b1_ocp;

    /**
     * DCDCÊä³öÇ·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_b1_vout_uv;

    /**
     * DCDCÊä³ö¹ýÑ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_b1_vout_ov;

    /**
     * DCDCÊäÈëÇ·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_b1_vin_uv;

    /**
     * DCDCÊäÈë¹ýÑ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_b1_vin_ov;
};

/**
 * Signals in message BOBC_2E8h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bobc_2_e8h_t {
    /**
     * BOBCÓ²¼þÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡ãC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bobc_temp;

    /**
     * BOBCÊä³öµçÑ¹£¨³äµçÊ±ÎªÊäÈëµçÑ¹£©
     *
     * Range: 0..254 (0..381 V)
     * Scale: 1.5
     * Offset: 0
     */
    uint8_t bobc_output_volt;

    /**
     * DCACÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_dcac_request;

    /**
     * BOBCÊä³öµçÁ÷£¨³äµçÊ±ÎªÊäÈëµçÁ÷£©
     *
     * Range: 0..120 (0..120 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_output_crrt;

    /**
     * S2×´Ì¬£¨OBCÄÚ²¿S2¿ª±Õ×´Ì¬£¬·ÅµçµÄÊ±ºò.£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_s2_status;

    /**
     * PFCAC²àÊä³ö¹ýÑ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_pfcac_output_ov_fault;

    /**
     * PFCAC²àÊä³ö¹ýÁ÷
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_pfcac_output_curr_fault;

    /**
     * LLC³µ¶ËDCÊäÈë¹ýÁ÷
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_llchvdc_curr_input_fault;

    /**
     * LLC³µ¶ËDCÊäÈëÇ·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_llchvdc_input_uv_fault;

    /**
     * DCAC¹¤×÷Ä£Ê½
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_dcac_mod;

    /**
     * ³äµç¿ÚÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bobc_ac_charge_port_temp;

    /**
     * ChargerOutputMAXVoltageOBC×î´ó³äµçµçÑ¹
     *
     * Range: 0..10000 (0..1000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bobc_charger_output_max_voltage;

    /**
     * LLCÄÚ²àDCÇ·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_llclvdc_under_volt_fault;

    /**
     * LLCÄÚ²àDC¹ýÑ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_llclvdc_over_volt_fault;

    /**
     * LLCÓ²¼þ¹ýÑ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_llc_volt_over_fault;

    /**
     * LLCÓ²¼þ¹ýÁ÷
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_llc_curr_fault;

    /**
     * PFCAC²àÊä³öµçÑ¹±£»¤
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_pfcacout_pro;

    /**
     * PFCDC²à¹ýÑ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_pfcdc_over_volt_fault;

    /**
     * PFCDC²àÇ·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_pfcdc_under_volt_fault;

    /**
     * Âý³ä³äµç²å×ùÎÂ¶È¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_a_cchg_outlet_temp_fault;
};

/**
 * Signals in message BOBC_297h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bobc_297h_t {
    /**
     * PFCAC²àÊäÈë¹ýÁ÷
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_pfcac_input_curr_fault;

    /**
     * ChargerOverTemperatureProtectionBOBCÓ²¼þ¹ýÎÂ±£»¤×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_charger_otp;

    /**
     * ChargerHardwareFaultBOBCÓ²¼þ¹ÊÕÏ£¨E·½£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_charger_hardware_fault;

    /**
     * InletElectronicLockStatusÂý³ä³äµçÇ¹µç×ÓËø×´Ì¬ÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_inlet_electronic_lock;

    /**
     * ChargerWorkingModeBOBC¹¤×÷Ä£Ê½
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_charger_mode;

    /**
     * BOBCStatusErrorLevelBOBC¹ÊÕÏµÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_sts_err_lvl;

    /**
     * PFCAC²àÊäÈë¹ýÑ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_pfcac_input_o_volt_fault;

    /**
     * PFCAC²àÇ·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_pfcac_under_volt_fault;

    /**
     * PFCÓ²¼þ¹ýÁ÷
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_pfc_curr_fault;

    /**
     * ChargingPlugConnectedStatus³äµç²åÍ·Á¬½Ó×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_chrgng_plug_cnctd_sts;

    /**
     * ChargerStatusBOBC³äµç×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_charger_status;

    /**
     * KL30µçÔ´Ç·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_kl30_under_volt;

    /**
     * ChargerCommunicationFaultÍ¨ÐÅ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_charger_com_fault;

    /**
     * ChargerInputPWMBOBCÊäÈëÕ¼¿Õ±È
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_charger_input_pwm;

    /**
     * ChargerDCVoltageBOBCDCµçÑ¹£¨Äæ±äÊ±ÎªÊäÈëµçÁ÷£©
     *
     * Range: 0..10000 (0..1000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bobc_charger_dc_voltage;

    /**
     * ChargerTemperatureBOBC½øË®¿ÚÎÂ¶È
     *
     * Range: 0..250 (-40..210 ¡ãC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bobc_charger_temperature;

    /**
     * ChargerDCCurrentBOBCDCµçÁ÷£¨Äæ±äÊ±ÎªÊäÈëµçÁ÷£©
     *
     * Range: 0..1000 (0..100 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bobc_charger_dc_current;

    /**
     * LLC³µ¶ËDC²àÊä³ö¹ýÁ÷
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_llchvdcop_curr_fault;

    /**
     * LLC³µ¶ËDC²àÊä³öÇ·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_llchvdc_output_uv_fault;

    /**
     * LLC³µ¶ËDC²à¹ýÑ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_llchvdc_over_volt_fault;

    /**
     * PFCAC²àÆµÂÊ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_pfca_cfrequ_fault;

    /**
     * Ô¤Ô¼³äµç×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bobc_booking_chrg_sts;
};

/**
 * Signals in message EPS_117h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_eps_117h_t {
    /**
     * Êµ¼Ê·½ÏòÅÌ×ª½ÇÐÅºÅÓÐÐ§ÐÔ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_str_ang_v;

    /**
     * EPSµ±Ç°Ä£Ê½
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_mode;

    /**
     * ·½ÏòÅÌ×ª½Ç´«¸ÐÆ÷´íÎó±êÖ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_failure_sts;

    /**
     * ·½ÏòÅÌ×ª½Ç±ê¶¨±êÖ¾Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_calibration_sts;

    /**
     * Êµ¼Ê·½ÏòÅÌ×ª½Ç
     *
     * Range: 992..33568 (-1018..1018 deg)
     * Scale: 0.0625
     * Offset: -1080
     */
    uint16_t eps_str_ang;

    /**
     * ·½ÏòÅÌ×ª½ÇËÙ¶È
     *
     * Range: 0..4064 (-1016..1016 deg/s)
     * Scale: 0.5
     * Offset: -1016
     */
    uint16_t eps_str_ang_spd;

    /**
     * EPS¹ÊÕÏµÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_fault_level;

    /**
     * EPS¹ÊÕÏ±¨¾¯µÆ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_fail_status;

    /**
     * ·½ÏòÅÌ×ª½ÇËÙ¶ÈÐÅºÅÓÐÐ§ÐÔ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_str_ang_spd_v;

    /**
     * EPS¹ÊÕÏÐÅÏ¢
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_fault_code;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_rolling_counter;
};

/**
 * Signals in message EPS_131h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_eps_131h_t {
    /**
     * Õð¶¯±¨¾¯¿ØÖÆ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vibration_alarm_ctrl_sts;

    /**
     * EPS¿ØÖÆÄ£Ê½
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_ctrl_sts;

    /**
     * ¼ÝÊ»Ô±ÊäÈëÅ¤¾Ø
     *
     * Range: 0..4000 (-20..20 Nm)
     * Scale: 0.01
     * Offset: -20
     */
    uint16_t driver_input_trq_value;

    /**
     * EPS¿ØÖÆ×´Ì¬
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_camera_ctrl_status;

    /**
     * ¼ÝÊ»Ô±Ô¤¸ÉÔ¤ÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_driver_intervention_steering;

    /**
     * ¼ÝÊ»Ô±Ô¤¸ÉÔ¤ÐÅºÅÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_driver_intervention_steering_v;

    /**
     * ¼ÝÊ»Ô±ÊäÈëÅ¤¾ØÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_input_torque_v;

    /**
     * EPS×ÛºÏ´¦ÀíºóÊä³öµÄÅ¤¾Ø
     *
     * Range: 0..50000 (-250..250 Nm)
     * Scale: 0.01
     * Offset: -250
     */
    uint16_t eps_torque;

    /**
     * EPSÊä³öµÄµçÁ÷Öµ
     *
     * Range: 0..250 (0..250 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_output_current;

    /**
     * ÀëÊÖ¼ì²â
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hand_detection;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_rolling_counter;
};

/**
 * Signals in message EHB_13Ah.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ehb_13_ah_t {
    /**
     * ÖÆ¶¯×´Ì¬·´À¡
     *
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_brake_condition;

    /**
     * EHB¹¤×÷×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_status;

    /**
     * ¼ÝÊ»Ô±ÖÆ¶¯Ì¤°å¿ª¶È
     *
     * Range: 0..230 (-5..110 %)
     * Scale: 0.5
     * Offset: -5
     */
    uint8_t ehb_s_output_rod_driver;

    /**
     * µç×ÓÖúÁ¦Æ÷ÍÆ¸ËÎ»ÒÆÓÐÐ§ÐÔ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_s_output_rod_act_v;

    /**
     * ¼ÝÊ»Ô±ÖÆ¶¯Ì¤°å¿ª¶ÈÓÐÐ§ÐÔ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_s_output_rod_driver_v;

    /**
     * µç×ÓÖúÁ¦Æ÷ÍÆ¸ËÎ»ÒÆ
     *
     * Range: 0..4080 (-5..46 mm)
     * Scale: 0.0125
     * Offset: -5
     */
    uint16_t ehb_s_output_rod_act;

    /**
     * EHBÖ÷¸×Ñ¹Á¦ÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_mcylinder_pressure_v;

    /**
     * EHBÖ÷¸×Ñ¹Á¦
     *
     * Range: 0..4000 (-100..300 bar)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t ehb_mcylinder_pressure;

    /**
     * EHBÕï¶ÏÄ£Ê½¼¤»î
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_ehb_diag_active;

    /**
     * EHB¹ÊÕÏµÈ¼¶
     *
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_fault_level;

    /**
     * EHB¹ÊÕÏÐÅÏ¢
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_fault_message;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_rolling_counter;
};

/**
 * Signals in message EHB_13Ch.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ehb_13_ch_t {
    /**
     * ¼ÝÊ»Ô±²ÈÏÂÖÆ¶¯Ì¤°åÓÐÐ§ÐÔ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_brake_pedal_applied_v;

    /**
     * ¼ÝÊ»Ô±ÊÇ·ñ²ÈÏÂÖÆ¶¯Ì¤°å
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_brake_pedal_applied;

    /**
     * ÖÆ¶¯ÄÜÁ¿»ØÊÕÖÆ¶¯Å¤¾ØÇëÇó£¨ÂÖ¶ËÖµ£©
     *
     * Range: 0..60000 (-30000..30000 Nm)
     * Scale: 1
     * Offset: -30000
     */
    uint16_t ehb_rgn_brk_tq_req;

    /**
     * ÓÍ±­ÒºÎ»´«¸ÐÆ÷±¨¾¯µÆÐÅºÅÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_lls_v;

    /**
     * ÓÍ±­ÒºÎ»´«¸ÐÆ÷±¨¾¯µÆÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_lls;

    /**
     * EHBµãÁÁÖÆ¶¯µÆË«ÉÁÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_double_fla_lights_rq;

    /**
     * EHBµãÁÁÖÆ¶¯µÆÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_brk_lights_rq;

    /**
     * ÖÆ¶¯ÄÜÁ¿»ØÊÕ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_rgn_brk_st;

    /**
     * ÖÆ¶¯ÄÜÁ¿»ØÊÕÖÆ¶¯Å¤¾ØÇëÇóÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_rgn_brk_tq_req_v;

    /**
     * EHB×î´óÖúÁ¦Öµ
     *
     * Range: 0..250 (-10..240 bar)
     * Scale: 1
     * Offset: -10
     */
    uint8_t ehb_p_runout;

    /**
     * µç×ÓÖúÁ¦Æ÷Íâ²¿ÇëÇó¿ÉÓÃ×´Ì¬
     *
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_ext_req_status;

    /**
     * Íâ²¿ÇëÇóºÍ¼ÝÊ»Ô±ÇëÇóÓÅÏÈ¼¶ÅÐ¶Ï
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_ext_req_prio;

    /**
     * EHB¾¯¸æµÆÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_hmi_warning_on;

    /**
     * EHB×î´óÖúÁ¦ÖµÓÐÐ§ÐÔ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_p_runout_v;

    /**
     * AWBµãÉ²Ô¤¾¯µÈ¼¶·´À¡
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_awb_level;

    /**
     * AEB(×Ô¶¯½ô¼±ÖÆ¶¯)¹¦ÄÜ¼¤»î×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_aeb_active;

    /**
     * EBA¼¤»î×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_eba_active;

    /**
     * AWBµãÉ²Ô¤¾¯¼¤»î×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_awb_active;

    /**
     * Prefill¼¤»î×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_prefill_active;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_rolling_counter;
};

/**
 * Signals in message EHB_13Bh.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ehb_13_bh_t {
    /**
     * EHB_VCUPµµÈßÓà¿ØÖÆÌáÐÑ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_hmi_vcu_com_warning;

    /**
     * EHB_EPBSlv¿¨Ç¯¹¤×÷Ä£Ê½
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_epb_slv_mode;

    /**
     * EPBSlv¿¨Ç¯¼Ð½ôÁ¦ÖµÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_epb_slv_clamp_force_v;

    /**
     * EPBSlv±¨¾¯×´Ì¬
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_epb_slv_warning;

    /**
     * EPBSlv_Host¿ÉÓÃ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_epb_slv_host_availability;

    /**
     * EPBSlv¿¨Ç¯Ö´ÐÐ×´Ì¬
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_epb_slv_actuator_status;

    /**
     * EPBSlv¿¨Ç¯¼Ð½ôÁ¦Öµ
     *
     * Range: 0..60000 (-30000..30000 N)
     * Scale: 1
     * Offset: -30000
     */
    uint16_t ehb_epb_slv_clamp_force;

    /**
     * EHB_EPBSlv¹ÊÕÏÐÅÏ¢
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_epb_slv_fault_message;

    /**
     * EHB_EPBSlv¿¨Ç¯¹ÊÕÏµÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_epb_slv_fail_level;

    /**
     * EHBÄ¦²ÁÖÆ¶¯ÇëÇóÖµ
     *
     * Range: 0..4000 (-100..300 bar)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t ehb_p_set_ebr;

    /**
     * EHBÄ¦²ÁÖÆ¶¯ÇëÇóÓÐÐ§ÐÔ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_p_set_ebr_v;

    /**
     * EHB_HBCÒºÑ¹ÖÆ¶¯½Ó¹ÜÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_hbc_request;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehb_rolling_counter;
};

/**
 * Signals in message ESC_101h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_esc_101h_t {
    /**
     * ÓÒºóÂÖ·½Ïò
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_rr_whl_spd_dir;

    /**
     * ×óºóÂÖ·½Ïò
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_rl_whl_spd_dir;

    /**
     * ÓÒÇ°ÂÖ·½Ïò
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_fr_whl_spd_dir;

    /**
     * ×óÇ°ÂÖ·½Ïò
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_fl_whl_spd_dir;

    /**
     * ÓÒºóÂÖÂö³åÊýÓÐÐ§×´Ì¬Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wss_rr_counts_sum_valid;

    /**
     * ×óºóÂÖÂö³åÊýÓÐÐ§×´Ì¬Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wss_rl_counts_sum_valid;

    /**
     * ÓÒÇ°ÂÖÂö³åÊýÓÐÐ§×´Ì¬Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wss_fr_counts_sum_valid;

    /**
     * ×óÇ°ÂÖÂö³åÊýÓÐÐ§×´Ì¬Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wss_fl_counts_sum_valid;

    /**
     * ×óÇ°ÂÖÂö³åÊý
     *
     * Range: 0..255 (0..255 Pluse)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wss_fl_counts_sum;

    /**
     * ÓÒÇ°ÂÖÂö³åÊý
     *
     * Range: 0..255 (0..255 Pluse)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wss_fr_counts_sum;

    /**
     * ×óºóÂÖÂö³åÊý
     *
     * Range: 0..255 (0..255 Pluse)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wss_rl_counts_sum;

    /**
     * ÓÒºóÂÖÂö³åÊý
     *
     * Range: 0..255 (0..255 Pluse)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wss_rr_counts_sum;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_rolling_counter;
};

/**
 * Signals in message ESC_102h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_esc_102h_t {
    /**
     * ×óÇ°ÂÖÂÖËÙÐÅºÅ
     *
     * Range: 0..5334 (0..300.0375 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t esc_fl_whl_spd;

    /**
     * ÓÒÇ°ÂÖÂÖËÙÐÅºÅ
     *
     * Range: 0..5334 (0..300.0375 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t esc_fr_whl_spd;

    /**
     * ×óºóÂÖÂÖËÙÐÅºÅ
     *
     * Range: 0..5334 (0..300.0375 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t esc_rl_whl_spd;

    /**
     * ÓÒºóÂÖÂÖËÙÐÅºÅ
     *
     * Range: 0..5334 (0..300.0375 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t esc_rr_whl_spd;

    /**
     * ÓÒºóÂÖÂÖËÙÖµÓÐÐ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_rr_whl_spd_v;

    /**
     * ×óºóÂÖÂÖËÙÖµÓÐÐ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_rl_whl_spd_v;

    /**
     * ÓÒÇ°ÂÖÂÖËÙÖµÓÐÐ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_fr_whl_spd_v;

    /**
     * ×óÇ°ÂÖÂÖËÙÖµÓÐÐ§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_fl_whl_spd_v;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_rolling_counter;
};

/**
 * Signals in message ESC_104h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_esc_104h_t {
    /**
     * ³µÉíÎÈ¶¨¿ØÖÆ¹¦ÄÜ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_vdc_fail_sts;

    /**
     * ³µÉíÎÈ¶¨¿ØÖÆ¹¦ÄÜ¼¤»î
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_vdc_active;

    /**
     * Çý¶¯·À»¬¹¦ÄÜ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_tcs_fail_sts;

    /**
     * Çý¶¯·À»¬¹¦ÄÜ¼¤»î
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_tcs_active;

    /**
     * µç×ÓÖÆ¶¯Á¦·ÖÅä¹¦ÄÜ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_ebd_fail_sts;

    /**
     * µç×ÓÖÆ¶¯Á¦·ÖÅä¹¦ÄÜ¼¤»î
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_ebd_active;

    /**
     * ·À±§ËÀ¹¦ÄÜ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_abs_fail_sts;

    /**
     * ·À±§ËÀ¹¦ÄÜ¼¤»î
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_abs_active;

    /**
     * ¶¯Ì¬Ç£ÒýÁ¦¿ØÖÆ¹¦ÄÜ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_dtc_fail_sts;

    /**
     * ¶¯Ì¬Ç£ÒýÁ¦¿ØÖÆ¹¦ÄÜ¼¤»î
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_dtc_active;

    /**
     * ÒºÑ¹ÖÆ¶¯¸¨Öú¹¦ÄÜÊ§Ð§
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_hba_fail_sts;

    /**
     * ÒºÑ¹ÖÆ¶¯¸¨Öú¹¦ÄÜ¼¤»î
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_hba_active;

    /**
     * ÉÏÆÂ¸¨Öú¹¦ÄÜ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_hhc_fail_sts;

    /**
     * ÉÏÆÂ¸¨Öú¹¦ÄÜ¼¤»î
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_hhc_active;

    /**
     * ³µÁ¾¾²Ö¹ÐÅºÅ±êÖ¾Î»
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_standstill_flag;

    /**
     * ×Ô¶¯×¤³µÖÆ¶¯¹¦ÄÜ¿ÉÓÃ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_avh_available;

    /**
     * ×Ô¶¯×¤³µÖÆ¶¯¹¦ÄÜ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_avh_sts;

    /**
     * EDCµçÖÆ¶¯Å¤¾Ø¿ØÖÆ¹¦ÄÜ¼¤»î
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_edc_active;

    /**
     * EDC¹¦ÄÜ¿ÉÓÃ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_edc_available;

    /**
     * ESC_Off¿ª¹Ø°´Ñ¹×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_esc_switch_pushing;

    /**
     * ESC¹¦ÄÜ¿ª¹Ø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_esc_switch_status;

    /**
     * ¶¯Ì¬¼õËÙ¹¦ÄÜ¿ÉÓÃ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_cdp_available;

    /**
     * ¶¯Ì¬¼õËÙ¹¦ÄÜ¼¤»î
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_cdp_active;

    /**
     * ESC×¤³µÖÆ¶¯ÇëÇó¼¤»î
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_epb_park_req;

    /**
     * ³µËÙÐÅºÅ
     *
     * Range: 0..5334 (0..300.0375 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t esc_veh_spd;

    /**
     * EPB¿ª¹Ø°´Ñ¹×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_epb_switch_pushing;

    /**
     * ESCÕï¶ÏÄ£Ê½¼¤»î
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_esc_diag_active;

    /**
     * ESC×ªì±Ä£Ê½
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_drum_mode;

    /**
     * ÖÆ¶¯ÅÌ¹ýÈÈ±êÖ¾Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_brake_over_heat;

    /**
     * ³µËÙÐÅºÅÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_veh_spd_v;

    /**
     * AVH¿ª¹Ø°´Ñ¹×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_avh_switch_pushing;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_rolling_counter;
};

/**
 * Signals in message ESC_109h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_esc_109h_t {
    /**
     * ºáÏò¼ÓËÙ¶È
     *
     * Range: 0..46752 (-26.752..20 m/s2)
     * Scale: 0.001
     * Offset: -26.752
     */
    uint16_t esc_lateral_acce;

    /**
     * ×ÝÏò¼ÓËÙ¶È
     *
     * Range: 0..46752 (-26.752..20 m/s2)
     * Scale: 0.001
     * Offset: -26.752
     */
    uint16_t esc_longit_acce;

    /**
     * ºá°Ú½ÇËÙ¶È
     *
     * Range: 0..3968 (-128..120 degree/s)
     * Scale: 0.0625
     * Offset: -128
     */
    uint16_t esc_yaw_rate;

    /**
     * ÆÂ¶ÈÐÅºÅÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_slope_v;

    /**
     * ºá°Ú½ÇËÙ¶ÈÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_yaw_rate_v;

    /**
     * ×ÝÏò¼ÓËÙ¶ÈÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_longit_acce_v;

    /**
     * ºáÏò¼ÓËÙ¶ÈÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_lateral_acce_v;

    /**
     * ÆÂ¶ÈÐÅºÅ
     *
     * Range: 0..250 (-42.7..44.8 degree)
     * Scale: 0.35
     * Offset: -42.7
     */
    uint8_t esc_slope;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_rolling_counter;
};

/**
 * Signals in message ESC_125h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_esc_125h_t {
    /**
     * ESCÒºÑ¹Á¦´«¸ÐÆ÷Ñ¹Á¦
     *
     * Range: 0..4000 (-100..300 bar)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t esc_mcylinder_pressure;

    /**
     * ESCµç»úÅ¤¾ØÇëÇóÖµÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_torq_req_resp_v;

    /**
     * ESCÒºÑ¹Á¦´«¸ÐÆ÷Ñ¹Á¦ÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_mcylinder_pressure_v;

    /**
     * ESC¹ÀËãÂÖ¸××î´óÑ¹Á¦
     *
     * Range: 0..250 (0..250 bar)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_p_est_max;

    /**
     * ESCµç»úÅ¤¾ØÇëÇóÖµ
     *
     * Range: 0..40000 (-2000..2000 Nm)
     * Scale: 0.1
     * Offset: -2000
     */
    uint16_t esc_torq_req_resp;

    /**
     * ESC¹ÊÕÏµÈ¼¶
     *
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_fault_level;

    /**
     * ESC¾¯¸æµÆÇëÇó
     *
     * Range: 0..1 (0..3 -)
     * Scale: 3
     * Offset: 0
     */
    uint8_t esc_hmi_warning_on;

    /**
     * ESCµãÁÁÖÆ¶¯µÆË«ÉÁÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_double_fla_lamp_on;

    /**
     * ESCµãÁÁÖÆ¶¯µÆÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_bla_lamp_on;

    /**
     * AVH¹¤×÷Ö¸Ê¾µÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t avh_fun_lamp_on;

    /**
     * ESC¹¤×÷Ö¸Ê¾µÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_fun_lamp_on;

    /**
     * ESC_OffÖ¸Ê¾µÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_off_lamp_on;

    /**
     * ESC¹ÊÕÏÐÅÏ¢
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_fault_message;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_rolling_counter;
};

/**
 * Signals in message ESC_126h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_esc_126h_t {
    /**
     * ÓÒºóÂÖÇ·Ñ¹×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_rr_warning;

    /**
     * ×óºóÂÖÇ·Ñ¹×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_rl_warning;

    /**
     * ÓÒÇ°ÂÖÇ·Ñ¹×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_fr_warning;

    /**
     * ×óÇ°ÂÖÇ·Ñ¹×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_fl_warning;

    /**
     * Ç·Ñ¹¹¤×÷Ö¸Ê¾±¨¾¯µÆ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_pre_warning_on;

    /**
     * Ì¥Ñ¹ÏµÍ³×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_status;

    /**
     * Ì¥Ñ¹Î£ÏÕ¾¯Ê¾
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_dg_pre_warning_text;

    /**
     * Ì¥Ñ¹¹ÊÕÏÖ¸Ê¾µÆ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_malfunction_lamp_on;

    /**
     * Ì¥Ñ¹ÏµÍ³¸´Î»×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_reset_progress;

    /**
     * Ð¹ÆøÂÖÌ¥Î»ÖÃ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_pre_warning_text;

    /**
     * Ì¥Ñ¹¹ÊÕÏÐÅÏ¢
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_fault_message;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_rolling_counter;
};

/**
 * Signals in message ESC_108h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_esc_108h_t {
    /**
     * EPBMst_Host¿ÉÓÃ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_epb_mst_host_availability;

    /**
     * EPBMst¿¨Ç¯Ö´ÐÐ×´Ì¬
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_epb_mst_actuator_status;

    /**
     * EPBMst¿¨Ç¯¼Ð½ôÁ¦ÖµÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_epb_mst_clamp_force_v;

    /**
     * EPBMstÎ¬ÐÞÊÍ·Å¼¤»î×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_epb_mst_repair_active;

    /**
     * EPBMst×ªì±Ä£Ê½¼¤»î×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_epb_mst_rollerbench_active;

    /**
     * EPBMst_Slv¿ØÖÆÖ¸Áî
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_epb_mst_req;

    /**
     * EPBMst¿¨Ç¯¼Ð½ôÁ¦Öµ
     *
     * Range: 0..60000 (-30000..30000 N)
     * Scale: 1
     * Offset: -30000
     */
    uint16_t esc_epb_mst_clamp_force;

    /**
     * ESCÍâ²¿ÖÆ¶¯Ñ¹Á¦½Ó¿ÚÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_total_brk_pres_req_v;

    /**
     * ESCÍâ²¿ÖÆ¶¯Ñ¹Á¦½Ó¿Ú
     *
     * Range: 0..4000 (-100..300 bar)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t esc_total_brk_pres_req;

    /**
     * HBC¹¦ÄÜ¼¤»î
     *
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_hbc_active;

    /**
     * HBC¹¦ÄÜ¿ÉÓÃ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_hbc_available;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_rolling_counter;
};

/**
 * Signals in message ESC_10Ch.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_esc_10_ch_t {
    /**
     * EPB_CDP¼õËÙÇëÇó×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_cdp_dec_rq_sts;

    /**
     * EPBÏµÍ³¿ØÖÆÄ£Ê½
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_control_mode;

    /**
     * EPBÏµÍ³×´Ì¬
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_status;

    /**
     * ESC_EPBMst¿ØÖÆÄ£¿é¿ÉÓÃ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_epb_mst_state_available;

    /**
     * EPBÊÖ¶¯ÊÍ·ÅÎ´²ÈÖÆ¶¯Ì¤°åÌáÐÑ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_release_without_brake;

    /**
     * EPB×Ô¶¯ÊÍ·ÅÎ´ÏµÖ÷¼Ý°²È«´øÌáÐÑ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_release_without_drv_seat_belt;

    /**
     * EPB×Ô¶¯ÊÍ·ÅÎ´¹Ø±ÕÖ÷¼ÝÃÅÌáÐÑ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_release_without_driver_door;

    /**
     * ¸ßÎÂÔÙ¼Ð½ô¹¤×÷×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_high_tem_clamp_wk_sts;

    /**
     * ÁïÆÂÔÙ¼Ð½ô¹¤×÷×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_slip_slope_clamp_wk_sts;

    /**
     * ÍÏ³µ£¨Ç£Òý£©Ä£Ê½¹¤×÷×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_tow_mode_wk_sts;

    /**
     * EPBÏµÍ³¹ÊÕÏµÆ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_warning_lamp_on;

    /**
     * EPBÏµÍ³×¤³µµÆ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_park_lamp_on;

    /**
     * ESC_EPBMst¹ÊÕÏÐÅÏ¢
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_epb_mst_fault_message;

    /**
     * ESC_EPBMst¿¨Ç¯¹ÊÕÏµÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_epb_mst_fail_level;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_rolling_counter;
};

/**
 * Signals in message ADAS_CAM_107h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_adas_cam_107h_t {
    /**
     * Å¤¾ØÇëÇó´óÐ¡
     *
     * Range: 0..1200 (-6..6 N*m)
     * Scale: 0.01
     * Offset: -6
     */
    uint16_t camera_torque_req;

    /**
     * ×ª½ÇÇëÇó´óÐ¡
     *
     * Range: 0..14400 (-720..720 deg)
     * Scale: 0.1
     * Offset: -720
     */
    uint16_t camera_degree_req;

    /**
     * ½Ç¶ÈÇëÇóÓÐÐ§±êÖ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_degree_req_valid;

    /**
     * Å¤¾ØÇëÇóÓÐÐ§±êÖ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_torque_req_valid;

    /**
     * ACUÏµÍ³¹¤×÷×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_sys_status_to_eps;

    /**
     * ×ªËÙÇëÇó´óÐ¡
     *
     * Range: 0..14400 (-720..720 deg/s)
     * Scale: 0.1
     * Offset: -720
     */
    uint16_t camera_degree_spd_req;

    /**
     * Checksum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_sum;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t roling_counter;
};

/**
 * Signals in message ADAS_CAM_10Ah.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_adas_cam_10_ah_t {
    /**
     * eLKA¹¤×÷×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_e_lka_working;

    /**
     * LDWµ±Ç°×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_ldw_status;

    /**
     * ÉãÏñÍ·ÕÚµ²/Ì½²âÊÜÏÞ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_blockage_sts;

    /**
     * ÉãÏñÍ·¹ÊÕÏ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_fault;

    /**
     * ÉãÏñÍ·±ê¶¨×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_calibrated_status;

    /**
     * ÓÒ²à³µµÀÏß×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_r_lane_status;

    /**
     * ×ó²à³µµÀÏß×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_l_lane_status;

    /**
     * eLKAµ±Ç°×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_e_lka_status;

    /**
     * ³¬ËÙ±¨¾¯µÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t isa_over_speed_warning_level;

    /**
     * ½»Í¨ÏÞËÙÊ¶±ð¹¦ÄÜ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t isa_sts;

    /**
     * ¼ÝÊ»Ô±ËÉÊÖ±¨¾¯
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_hand_off_warning;

    /**
     * eLKA³¤Ê±¼ä¼¤»î»ò180sÊ±¼äÁ¬ÐøÁ½´Î¼¤»î±¨¾¯
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t camera_e_lka_warning;

    /**
     * µÀÂ·±êÊ¶ÅÆÏÞËÙÐÅÏ¢
     *
     * Range: 0..255 (0..255 km/h)
     * Scale: 1
     * Offset: 0
     */
    uint8_t slif_limit_value;

    /**
     * ÏÞËÙÖµ¸Ä±äÌáÐÑ·½Ê½
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t slif_limit_value_change_type;
};

/**
 * Signals in message ADAS_CAM_118h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_adas_cam_118h_t {
    /**
     * AEB¹¦ÄÜ´¥·¢ÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aeb_aeb_active;

    /**
     * EBA¹¦ÄÜ´¥·¢ÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aeb_eba_active;

    /**
     * Åö×²Ô¤¾¯
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aeb_awb_active;

    /**
     * AEBÔ¤Ìî³ä¼¤»î
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aeb_pre_fill_active;

    /**
     * ACCÇý¶¯ÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_eng_trq_req_active;

    /**
     * ACCÖÆ¶¯ÇëÇó(ÖÆ¶¯µ«²»Í£Ö¹ÇëÇó)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_decel_req;

    /**
     * AEBHoldÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aeb_veh_hld_req;

    /**
     * JerkÔ¤¾¯µãÉ²Á¦¶È
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aeb_awb_level;

    /**
     * AEB¹¦ÄÜ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aeb_aeb_failure;

    /**
     * ACCÖÆ¶¯ÇëÇó¼õËÙ¶ÈÖµ
     *
     * Range: 0..255 (-7..5.75 m/s2)
     * Scale: 0.05
     * Offset: -7
     */
    uint8_t acc_decel_req_value;

    /**
     * ACCÇý¶¯ÇëÇóµÄÅ¤¾ØÖµ
     *
     * Range: 0..65531 (-2000..4553.1 N*m)
     * Scale: 0.1
     * Offset: -2000
     */
    uint16_t acc_eng_trq_req;

    /**
     * AEB/EBAÇëÇóÖÆ¶¯¼õËÙ¶ÈÖµ
     *
     * Range: 0..65535 (-16..15.98108 m/s2)
     * Scale: 0.000488
     * Offset: -16
     */
    uint16_t aeb_req_dec_value;

    /**
     * Checksum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_sum;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t roling_counter;
};

/**
 * Signals in message ADAS_CAM_140h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_adas_cam_140h_t {
    /**
     * ACCÇëÇó¼ÝÊ»Ô±½Ó¹Ü³µÁ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_take_over_req;

    /**
     * ACCÄ£Ê½
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_mod_sts;

    /**
     * AEB¹¦ÄÜ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aeb_aeb_sts;

    /**
     * Åö×²Ô¤¾¯£¨ÉùÒôÌáÊ¾£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aeb_pre_warning_active;

    /**
     * Åö×²Ô¤¾¯£¨ÎÄ×ÖÌáÊ¾£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aeb_latent_warning_active;

    /**
     * ACC¸úËæÄ¿±êµÄÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obj_valid;

    /**
     * ACCµÄ¸úËæÄ¿±êÏà¶Ô¾àÀë
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_tar_obj_bar_dis;

    /**
     * ACC³µÁ¾Óë¸úËæÄ¿±êµÄ×ÝÏò¾àÀë
     *
     * Range: 0..254 (0..254 m)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_follow_obj_dis;

    /**
     * ACCµÄÉè¶¨Ä¿±ê³µËÙ
     *
     * Range: 0..254 (0..254 Km/h)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_speed_set_dis;

    /**
     * ACC¸úËæÄ¿±êÀàÐÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_ego_target_type;

    /**
     * ACC¹¦ÄÜÎÞ·¨¼¤»îÌáÊ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_text_in_fo;

    /**
     * ACCÉè¶¨Ê±¾à
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_tim_gap_set;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_sum;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter;
};

/**
 * Signals in message ADAS_CAM_318h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_adas_cam_318h_t {
    /**
     * ELK¹¦ÄÜ¿ª¹Ø·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adas_elk_switch_fb;

    /**
     * LDW¹¦ÄÜ±¨¾¯ÁéÃô¶È·´À¡
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adas_ldw_alarm_sensitivity_fb;

    /**
     * LDW¹¦ÄÜ±¨¾¯·½Ê½·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adas_ldw_alarm_method_fb;

    /**
     * LDW¹¦ÄÜ¿ª¹Ø·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adas_ldw_switch_fb;

    /**
     * FCW/AEB¹¦ÄÜ±¨¾¯ÁéÃô¶È·´À¡
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adas_fcw_aeb_alarm_sensitivity_fb;

    /**
     * FCW/AEB¹¦ÄÜ¿ª¹Ø·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adas_fcw_aeb_switch_fb;

    /**
     * SLWF¹¦ÄÜ±¨¾¯·½Ê½ÉèÖÃ·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adas_slwf_alarm_method_set;

    /**
     * SLWF³¬ËÙ±¨¾¯¿ª¹Ø·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adas_slwf_switch_fb;

    /**
     * SLIFÏÞËÙÖµ¸Ä±äÌáÐÑ·½Ê½·´À¡
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adas_slif_reminder_method_fb;

    /**
     * SLIFÏÞËÙÏÔÊ¾¹¦ÄÜ¿ª¹Ø·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adas_slif_switch_fb;

    /**
     * ELK¹¦ÄÜ±¨¾¯·½Ê½·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adas_elk_alarm_method_fb;
};

/**
 * Signals in message ADAS_RAD_070h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_adas_rad_070h_t {
    /**
     * MOIS¹¦ÄÜ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_mois_state;

    /**
     * MOIS±¨¾¯ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_mois_warning;

    /**
     * MOIS±¨¾¯ÉùÒô¿ª¹Ø·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t asr_mois_alarm_method_fb;

    /**
     * MOIS¹¦ÄÜ¿ª¹Ø·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t asr_mois_switch_fb;
};

/**
 * Signals in message ADAS_RL_RAD_071h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_adas_rl_rad_071h_t {
    /**
     * DOW¹¦ÄÜ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_dow_switch_fb;

    /**
     * BSIS¹¦ÄÜ±¨¾¯·½Ê½
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_bsis_alarm_method_fb;

    /**
     * BSD/LCA×ó²à¹¦ÄÜ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_bsd_lca_l_state;

    /**
     * BSIS×ó²à×´Ì¬ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_l_bsis_l_state;

    /**
     * BSIS×ó²à±¨¾¯ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_l_bsis_l_warning;

    /**
     * BSD×ó²à±¨¾¯ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_bsdl_warning;

    /**
     * LCA×ó²à±¨¾¯ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_lcal_warning;

    /**
     * BSD¹¦ÄÜ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_bsd_switch_fb;

    /**
     * DOW×ó²à±¨¾¯ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_dowl_warning;
};

/**
 * Signals in message ADAS_RR_RAD_02Bh.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_adas_rr_rad_02_bh_t {
    /**
     * BSD/LCAÓÒ²à¹¦ÄÜ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_bsd_lca_r_state;

    /**
     * BSISÓÒ²à×´Ì¬ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_r_bsis_r_state;

    /**
     * BSISÓÒ²à±¨¾¯ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_r_bsis_r_warning;

    /**
     * BSDÓÒ²à±¨¾¯ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_bsdr_warning;

    /**
     * LCAÓÒ²à±¨¾¯ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_lcar_warning;

    /**
     * DOWÓÒ²à±¨¾¯ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ars_dowr_warning;
};

/**
 * Signals in message ADAS_NM_406h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_adas_nm_406h_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_dest_address;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ack;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ind;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_limphome;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_ring;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_alive;
};

/**
 * Signals in message ADAS_NM_408h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_adas_nm_408h_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_dest_address;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ack;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ind;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_limphome;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_ring;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_alive;
};

/**
 * Signals in message ACU_021h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acu_021h_t {
    /**
     * °²È«ÆøÄÒ¸æ¾¯µÆ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_bag_fail_sts;

    /**
     * Åö×²ÐÅºÅÊä³ö
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crash_output_sts;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_check_sum;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acu_rolling_counter;
};

/**
 * Signals in message VCU_119h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_119h_t {
    /**
     * µµÎ»×´Ì¬
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_gear_level_sts;

    /**
     * µµÎ»×´Ì¬ÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_gear_level_v;

    /**
     * É²³µ¿ª¹ØÐÅºÅÓÐÐ§Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_brake_pedal_sts_v;

    /**
     * É²³µ¿ª¹ØÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_brake_pedal_sts;

    /**
     * ¼ÓËÙÌ¤°åÎ»ÖÃÐÅºÅ
     *
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t vcu_acc_pedl_posn;

    /**
     * Êµ¼ÊÖÆ¶¯ÄÜÁ¿»ØÊÕÅ¤¾ØÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_rgn_mot_trq_v;

    /**
     * ¿ÉÓÃÖÆ¶¯ÄÜÁ¿»ØÊÕÄÜÁ¦ÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mot_trq_rgn_lim_v;

    /**
     * Õû³µ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_vehicle_sts;

    /**
     * ¼ÓËÙÌ¤°åÎ»ÖÃÐÅºÅÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_acc_pedl_posn_v;

    /**
     * ¿ÉÓÃÖÆ¶¯ÄÜÁ¿»ØÊÕÄÜÁ¦£¨ÂÖ¶ËÖµ£©
     *
     * Range: 0..60000 (-30000..30000 Nm)
     * Scale: 1
     * Offset: -30000
     */
    uint16_t vcu_mot_trq_rgn_lim;

    /**
     * Êµ¼ÊÖÆ¶¯ÄÜÁ¿»ØÊÕÅ¤¾Ø£¨ÂÖ¶ËÖµ£©
     *
     * Range: 0..60000 (-30000..30000 Nm)
     * Scale: 1
     * Offset: -30000
     */
    uint16_t vcu_rgn_mot_trq;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter;
};

/**
 * Signals in message VCU_123h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_123h_t {
    /**
     * Ì¥Ñ¹¸´Î»ÇëÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_reset_request;

    /**
     * Ö÷¼Ý°²È«´øËø¿Û
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_drv_seat_belt_r_st;

    /**
     * Ö÷¼ÝÊ»ÃÅ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_driver_door_sts;

    /**
     * KL15µçÔ´
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_kl15_on;

    /**
     * ESC_OffÈí¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_off_switch;

    /**
     * AVHÈí¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t avh_switch;

    /**
     * ÊÒÍâÎÂ¶È
     *
     * Range: 0..240 (-40..80 ¡æ)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t gw_outside_temp;

    /**
     * µç»ú¹ÊÕÏµÈ¼¶
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mcu_fault_level;

    /**
     * ÊÒÍâÎÂ¶ÈÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_outside_temp_v;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter;
};

/**
 * Signals in message VCU_251h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_251h_t {
    /**
     * ÅÐ¶ÏACCÊÇ·ñÐèÒª¹ÒÆð
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_gaspedal_override;

    /**
     * ÅÐ¶ÏACCÊÇ·ñÐèÒª¹ÒÆðÓÐÐ§Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_gaspedal_override_v;
};

/**
 * Signals in message VCU_201h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vcu_201h_t {
    /**
     * VCU_EPB¿ØÖÆÇëÇó
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_epb_wire_control_request;

    /**
     * VCU_EPB¿ØÖÆÄ£Ê½
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_epb_ctl_mode;

    /**
     * VCU_EPBÍÏ³µ£¨Ç£Òý£©Ä£Ê½Ê¹ÄÜ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_epb_tow_mode_enable;

    /**
     * MotorActualSpeedµç»úµ±Ç°×ªËÙ
     *
     * Range: 0..65531 (-20000..45531 rpm)
     * Scale: 1
     * Offset: -20000
     */
    uint16_t vcu_mot_actu_spd;

    /**
     * VCU_EPBSlvPµµ×¤³µÖ¸ÁîÓÐÐ§ÐÔ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_epb_slv_parking_v;

    /**
     * VCU_EPBSlvPµµ×¤³µÖ¸Áî
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_epb_slv_parking;

    /**
     * ¼ÝÊ»Ô±ÆÚÍûÅ¤¾ØÓÐÐ§Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t driver_req_mcu_torque_v;

    /**
     * ¼ÝÊ»Ô±ÆÚÍûÅ¤¾Ø
     *
     * Range: 0..4000 (-2000..2000 Nm)
     * Scale: 1
     * Offset: -2000
     */
    uint16_t driver_req_mcu_torque;

    /**
     * Ð£ÑéºÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum;

    /**
     * Ñ­»·¼ÆÊýÐ£Ñé
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter;
};

/**
 * Signals in message ACMM_IHU_301h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acmm_ihu_301h_t {
    /**
     * Ç°¿Õµ÷´µ·çÄ£Ê½
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_mode;

    /**
     * ÄÚÍâÑ­»·×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_cycle_stu;

    /**
     * Ç°³ýËª×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_defrost_stu;

    /**
     * ÖÆÀä¿ª¹Ø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_ac_switch_stu;

    /**
     * Auto¿ª¹Ø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_auto_switch_stu;

    /**
     * ¿Õµ÷×Ü¿ª¹Ø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_main_swtich_stu;

    /**
     * Ç°ÎÂ¶ÈÉèÖÃ£¨×Ô¶¯¿î£©
     *
     * Range: 35..57 (17.5..28.5 -)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t acmm_f_temp_auto;

    /**
     * ¿ÕÆø¾»»¯¹¤×÷×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_air_p_stu;

    /**
     * Ç°PTC¹¤×÷×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_ptc_stu;

    /**
     * PM2.5
     *
     * Range: 0..250 (0..500 -)
     * Scale: 2
     * Offset: 0
     */
    uint8_t acmm_pm25;

    /**
     * ³µÍâÎÂ¶È
     *
     * Range: 0..255 (-45..82.5 ¡æ)
     * Scale: 0.5
     * Offset: -45
     */
    uint8_t acmm_out_temp;

    /**
     * ×î´óÖÆÀä¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_maxac_stu;

    /**
     * Ç°¿Õµ÷·çÁ¿´óÐ¡µ÷½Ú
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_f_blower_lvl;

    /**
     * Ç°ÎÂ¶ÈÉèÖÃ£¨µç¶¯¿î£©
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_f_temp_ev;

    /**
     * ×î´óÖÆÈÈ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_maxptc_stu;

    /**
     * ºó¿Õµ÷×Ü¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_r_main_swtich_stu;

    /**
     * ºó¿Õµ÷´µ·çÄ£Ê½
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_r_mode;

    /**
     * ºóÖÆÀä×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_r_ac_stu;

    /**
     * ºóÖÆÈÈ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_r_ptc_stu;

    /**
     * ºóÎÂ¶ÈÉèÖÃ£¨µç¶¯¿î£©
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_r_temp_ev;

    /**
     * ºóÎÂ¶ÈÉèÖÃ£¨×Ô¶¯£©
     *
     * Range: 35..57 (17.5..28.5 -)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t acmm_r_temp_auto;

    /**
     * Ç°ºóÎÂ¶ÈÍ¬²½µ÷½Ú¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_tem_same_stu;

    /**
     * ºó¿Õµ÷·çÁ¿´óÐ¡
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_r_blower_lvl;
};

/**
 * Signals in message ACMM_IHU_302h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acmm_ihu_302h_t {
    /**
     * ACMM¹¤×÷×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acmm_work_sta;

    /**
     * Ñ¹Á¦´«¸ÐÆ÷Ñ¹Á¦Öµ
     *
     * Range: 0..100 (0..10 MPa)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t ac_pressurevalue;

    /**
     * Ñ¹Ëõ»ú¹¤×÷×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eac_work_sta;

    /**
     * PTC¹¤×÷×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ptc_work_sta;

    /**
     * PTCÊ¹ÄÜ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_front_ptc_enable;
};

/**
 * Signals in message ACMM_PTC_303h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acmm_ptc_303h_t {
    /**
     * Ç°PTCÄ¿±ê¹¦ÂÊ
     *
     * Range: 0..254 (0..25.4 KW)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t front_ptc_power_target;

    /**
     * Ç°PTCÊ¹ÄÜ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_working_mode_req;

    /**
     * ²àPTCÄ¿±ê¹¦ÂÊ
     *
     * Range: 0..254 (0..25.4 KW)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t side_ptc_power_target;

    /**
     * ²àPTCÊ¹ÄÜ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_working_mode_req;
};

/**
 * Signals in message ACMM_EAC_304h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acmm_eac_304h_t {
    /**
     * Ç°Ñ¹Ëõ»úÊ¹ÄÜ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_fr_compressor_enable;

    /**
     * Ç°Ñ¹Ëõ»ú×î´óÔÊÐí¹¦ÂÊ
     *
     * Range: 0..8191 (0..16382 W)
     * Scale: 2
     * Offset: 0
     */
    uint16_t ac_fr_max_power_target;

    /**
     * Ç°Ñ¹Ëõ»ú×ªËÙÇëÇó
     *
     * Range: 0..10000 (0..10000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_fr_compressor_spd_rpm_req;

    /**
     * ºóÑ¹Ëõ»úÊ¹ÄÜ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_rr_compressor_enable;

    /**
     * ºóÑ¹Ëõ»ú×î´óÔÊÐí¹¦ÂÊ
     *
     * Range: 0..8191 (0..16382 W)
     * Scale: 2
     * Offset: 0
     */
    uint16_t ac_rr_max_power_target;

    /**
     * ºóÑ¹Ëõ»ú×ªËÙÇëÇó
     *
     * Range: 0..10000 (0..10000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_rr_compressor_spd_rpm_req;
};

/**
 * Signals in message ACMM_307h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acmm_307h_t {
    /**
     * Ç°PTCÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t front_ptc_temperature;

    /**
     * PTC1ÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t ptc1_temperature;

    /**
     * PTC2ÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t ptc2_temperature;

    /**
     * Õô·¢Æ÷1ÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t evaporator1_temperature;

    /**
     * Õô·¢Æ÷2ÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t evaporator2_temperature;

    /**
     * ³ö·çÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t outlet_air_temperature;

    /**
     * »Ø·çÎÂ¶È1
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t return_air_temperature1;

    /**
     * »Ø·çÎÂ¶È2
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t return_air_temperature2;
};

/**
 * Signals in message ACMM_308h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acmm_308h_t {
    /**
     * ³µÄÚÎÂ¶È
     *
     * Range: 0..255 (-45..82.5 ¡æ)
     * Scale: 0.5
     * Offset: -45
     */
    uint8_t acmm_in_temp;

    /**
     * ²àPTCÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t rear_ptc_temperature;

    /**
     * ÊÒÄÚ¿ÕÆøÖÊÁ¿µÈ¼¶indoorairqualitylevel
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_pm25_air_in_q_level;

    /**
     * ÀäÈ´·çÉÈÕ¼¿Õ±È
     *
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_coolg_fan_duty;

    /**
     * ÀäÈ´·çÉÈ¿ª¹Ø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_coolg_fan_swtich_sts;
};

/**
 * Signals in message ACMM_331h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acmm_331h_t {
    /**
     * Ñ¹Ëõ»ú×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_work_sta;

    /**
     * Ñ¹Ëõ»úÊµ¼ÊÏàµçÁ÷
     *
     * Range: 0..300 (0..30 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ac_ac_press_curr;

    /**
     * Ñ¹Ëõ»úÊµ¼ÊµçÑ¹
     *
     * Range: 0..400 (0..800 V)
     * Scale: 2
     * Offset: 0
     */
    uint16_t ac_ac_press_volt;

    /**
     * Ñ¹Ëõ»úÊµ¼Ê¹¦ÂÊ
     *
     * Range: 0..4000 (0..8000 W)
     * Scale: 2
     * Offset: 0
     */
    uint16_t ac_ac_press_power;

    /**
     * Ñ¹Ëõ»úÊµ¼Ê×ªËÙ
     *
     * Range: 0..10000 (0..10000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_compressor_actl_spd;

    /**
     * BusOff¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_busoff;

    /**
     * Ê§ËÙ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_lose_speed;

    /**
     * Í¨Ñ¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_communication;

    /**
     * È±Ïà¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_lose_phase;

    /**
     * ¶Â×ª¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_motor_blocked;

    /**
     * Ç·Ñ¹¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_low_volt;

    /**
     * ¹ýÑ¹¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_over_volt;

    /**
     * ¹ýÁ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_over_current;

    /**
     * ÎÂ¶È´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_adc;

    /**
     * »¥Ëø¹ÊÕÏ(ÓÐ»¥Ëø¼ì²âÇé¿öÏÂ)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_hv_lock;

    /**
     * ¹¦ÂÊ½µÆµ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_op_drop_frequeney;

    /**
     * ¹ýÎÂ½µÆµ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ot_drop_frequeney;

    /**
     * ¹ýÁ÷½µÆµ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_oc_drop_frequeney;

    /**
     * ¹¦ÂÊÄ£¿é¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_drive_ic;

    /**
     * ¹ýÎÂ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_over_temperature;

    /**
     * ÏàµçÁ÷´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_data;
};

/**
 * Signals in message ACMM_332h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acmm_332h_t {
    /**
     * ºóÑ¹Ëõ»ú×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_work_sta_rr;

    /**
     * ºóÑ¹Ëõ»úÊµ¼ÊÏàµçÁ÷
     *
     * Range: 0..300 (0..30 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ac_ac_press_curr_rr;

    /**
     * ºóÑ¹Ëõ»úÊµ¼ÊµçÑ¹
     *
     * Range: 0..400 (0..800 V)
     * Scale: 2
     * Offset: 0
     */
    uint16_t ac_ac_press_volt_rr;

    /**
     * ºóÑ¹Ëõ»úÊµ¼Ê¹¦ÂÊ
     *
     * Range: 0..4000 (0..8000 W)
     * Scale: 2
     * Offset: 0
     */
    uint16_t ac_ac_press_power_rr;

    /**
     * ºóÑ¹Ëõ»úÊµ¼Ê×ªËÙ
     *
     * Range: 0..10000 (0..10000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_compressor_actl_spd_rr;

    /**
     * BusOff¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_busoff_rr;

    /**
     * Ê§ËÙ¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_lose_speed_rr;

    /**
     * Í¨Ñ¶¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_communication_rr;

    /**
     * È±Ïà¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_lose_phase_rr;

    /**
     * ¶Â×ª¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_motor_blocked_rr;

    /**
     * Ç·Ñ¹¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_low_volt_rr;

    /**
     * ¹ýÑ¹¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_over_volt_rr;

    /**
     * ¹ýÁ÷¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_over_current_rr;

    /**
     * ÎÂ¶È´«¸ÐÆ÷¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_adc_rr;

    /**
     * »¥Ëø¹ÊÕÏ(ÓÐ»¥Ëø¼ì²âÇé¿öÏÂ)_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_hv_lock_rr;

    /**
     * ¹¦ÂÊ½µÆµ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_op_drop_frequeney_rr;

    /**
     * ¹ýÎÂ½µÆµ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ot_drop_frequeney_rr;

    /**
     * ¹ýÁ÷½µÆµ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_oc_drop_frequeney_rr;

    /**
     * ¹¦ÂÊÄ£¿é¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_drive_ic_rr;

    /**
     * ¹ýÎÂ¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_over_temperature_rr;

    /**
     * ÏàµçÁ÷´«¸ÐÆ÷¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_data_rr;
};

/**
 * Signals in message ACMM_333h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acmm_333h_t {
    /**
     * Ç°PTC×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_work_sta;

    /**
     * Ç°PTCÊµ¼Ê¹¦ÂÊ
     *
     * Range: 0..16382 (0..16382 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t front_ptc_powor;

    /**
     * Ç°PTCÊµ¼ÊµçÁ÷
     *
     * Range: 0..253 (0..63.25 A)
     * Scale: 0.25
     * Offset: 0
     */
    uint8_t front_ptc_current;

    /**
     * Ç°PTCÊµ¼ÊÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t front_ptc_temperature;

    /**
     * ¸ßÑ¹¶Ï¿ª±£»¤
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_hv_disconnect;

    /**
     * IGBT¹ýÎÂ±£»¤
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_igbt_over_tem_protn;

    /**
     * PTC¹ýÎÂ±£»¤
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_otlt_over_tem_protn;

    /**
     * µç³ØµçÑ¹Ç·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_batt_under_volt_flt;

    /**
     * µç³ØµçÑ¹³¬Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_batt_over_volt_flt;

    /**
     * PCBÎÂ¶È´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_pcb_temp_snsr_flt;

    /**
     * ¸ßÑ¹µçÁ÷´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_hi_crnt_snsr_flt;

    /**
     * PCB¹ýÎÂ±£»¤
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_pcb_over_temp_protn;

    /**
     * ¸ßÑ¹Ç·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_hv_under_volt_flt;

    /**
     * IGBTÎÂ¶È´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_igbt_tem_snsr_flt;

    /**
     * PTCÎÂ¶È´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_otlt_tem_snsr_flt;

    /**
     * Í¨Ñ¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_comm_error;

    /**
     * Ð¾Ìå»òIGBT¿ªÂ·
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_core_or_igbt_open_err;

    /**
     * IGBT¶ÌÂ·
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_igbt_shrt_err;

    /**
     * Ð¾Ìå¶ÌÂ·
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_core_shrt_err;

    /**
     * ¸ßÑ¹¹ýÁ÷±£»¤
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_hv_over_crnt_protn;

    /**
     * ¸ßÑ¹³¬Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_ptc_hv_over_volt_flt;
};

/**
 * Signals in message ACMM_334h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acmm_334h_t {
    /**
     * ²àPTC×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_work_sta;

    /**
     * ²àPTCÊµ¼Ê¹¦ÂÊ
     *
     * Range: 0..16382 (0..16382 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t side_ptc_powor;

    /**
     * ²àPTCÊµ¼ÊµçÁ÷
     *
     * Range: 0..252 (0..63 A)
     * Scale: 0.25
     * Offset: 0
     */
    uint8_t side_ptc_current;

    /**
     * ²àPTCÊµ¼ÊÎÂ¶È
     *
     * Range: 0..255 (-40..215 ¡æ)
     * Scale: 1
     * Offset: -40
     */
    uint8_t side_ptc_temperature;

    /**
     * ¸ßÑ¹¶Ï¿ª±£»¤
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_hv_disconnect;

    /**
     * IGBT¹ýÎÂ±£»¤
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_igbt_over_tem_protn;

    /**
     * PTC¹ýÎÂ±£»¤
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_otlt_over_tem_protn;

    /**
     * µç³ØµçÑ¹Ç·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_batt_under_volt_flt;

    /**
     * µç³ØµçÑ¹³¬Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_batt_over_volt_flt;

    /**
     * PCBÎÂ¶È´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_pcb_temp_snsr_flt;

    /**
     * ¸ßÑ¹µçÁ÷´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_hi_crnt_snsr_flt;

    /**
     * PCB¹ýÎÂ±£»¤
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_pcb_over_temp_protn;

    /**
     * ¸ßÑ¹Ç·Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_hv_under_volt_flt;

    /**
     * IGBTÎÂ¶È´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_igbt_tem_snsr_flt;

    /**
     * PTCÎÂ¶È´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_otlt_tem_snsr_flt;

    /**
     * Í¨Ñ¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_comm_error;

    /**
     * Ð¾Ìå»òIGBT¿ªÂ·
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_core_or_igbt_open_err;

    /**
     * IGBT¶ÌÂ·
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_igbt_shrt_err;

    /**
     * Ð¾Ìå¶ÌÂ·
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_core_shrt_err;

    /**
     * ¸ßÑ¹¹ýÁ÷±£»¤
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_hv_over_crnt_protn;

    /**
     * ¸ßÑ¹³¬Ñ¹
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_ptc_hv_over_volt_flt;
};

/**
 * Signals in message ACMM_FR34CC_335h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acmm_fr34_cc_335h_t {
    /**
     * Ñ¹Ëõ»ú×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_work_sta;

    /**
     * Ñ¹Ëõ»úÊµ¼ÊÏàµçÁ÷
     *
     * Range: 0..300 (0..30 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ac_ac_press_curr;

    /**
     * Ñ¹Ëõ»úÊµ¼ÊµçÑ¹
     *
     * Range: 0..400 (0..800 V)
     * Scale: 2
     * Offset: 0
     */
    uint16_t ac_ac_press_volt;

    /**
     * Ñ¹Ëõ»úÊµ¼Ê¹¦ÂÊ
     *
     * Range: 0..4000 (0..8000 W)
     * Scale: 2
     * Offset: 0
     */
    uint16_t ac_ac_press_power;

    /**
     * Ñ¹Ëõ»úÊµ¼Ê×ªËÙ
     *
     * Range: 0..10000 (0..10000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_compressor_actl_spd;

    /**
     * BusOff¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_busoff;

    /**
     * Ê§ËÙ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_lose_speed;

    /**
     * Í¨Ñ¶¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_communication;

    /**
     * È±Ïà¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_lose_phase;

    /**
     * ¶Â×ª¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_motor_blocked;

    /**
     * Ç·Ñ¹¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_low_volt;

    /**
     * ¹ýÑ¹¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_over_volt;

    /**
     * ¹ýÁ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_over_current;

    /**
     * ÎÂ¶È´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_adc;

    /**
     * »¥Ëø¹ÊÕÏ(ÓÐ»¥Ëø¼ì²âÇé¿öÏÂ)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_hv_lock;

    /**
     * ¹¦ÂÊ½µÆµ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_op_drop_frequeney;

    /**
     * ¹ýÎÂ½µÆµ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ot_drop_frequeney;

    /**
     * ¹ýÁ÷½µÆµ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_oc_drop_frequeney;

    /**
     * ¹¦ÂÊÄ£¿é¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_drive_ic;

    /**
     * ¹ýÎÂ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_over_temperature;

    /**
     * ÏàµçÁ÷´«¸ÐÆ÷¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_data;
};

/**
 * Signals in message ACMM_RR45CC_336h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_acmm_rr45_cc_336h_t {
    /**
     * ºóÑ¹Ëõ»ú×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_work_sta_rr;

    /**
     * ºóÑ¹Ëõ»úÊµ¼ÊÏàµçÁ÷
     *
     * Range: 0..300 (0..30 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ac_ac_press_curr_rr;

    /**
     * ºóÑ¹Ëõ»úÊµ¼ÊµçÑ¹
     *
     * Range: 0..400 (0..800 V)
     * Scale: 2
     * Offset: 0
     */
    uint16_t ac_ac_press_volt_rr;

    /**
     * ºóÑ¹Ëõ»úÊµ¼Ê¹¦ÂÊ
     *
     * Range: 0..4000 (0..8000 W)
     * Scale: 2
     * Offset: 0
     */
    uint16_t ac_ac_press_power_rr;

    /**
     * ºóÑ¹Ëõ»úÊµ¼Ê×ªËÙ
     *
     * Range: 0..10000 (0..10000 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_compressor_actl_spd_rr;

    /**
     * BusOff¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_busoff_rr;

    /**
     * Ê§ËÙ¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_lose_speed_rr;

    /**
     * Í¨Ñ¶¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_communication_rr;

    /**
     * È±Ïà¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_lose_phase_rr;

    /**
     * ¶Â×ª¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_motor_blocked_rr;

    /**
     * Ç·Ñ¹¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_low_volt_rr;

    /**
     * ¹ýÑ¹¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_over_volt_rr;

    /**
     * ¹ýÁ÷¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_over_current_rr;

    /**
     * ÎÂ¶È´«¸ÐÆ÷¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_adc_rr;

    /**
     * »¥Ëø¹ÊÕÏ(ÓÐ»¥Ëø¼ì²âÇé¿öÏÂ)_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_hv_lock_rr;

    /**
     * ¹¦ÂÊ½µÆµ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_op_drop_frequeney_rr;

    /**
     * ¹ýÎÂ½µÆµ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ot_drop_frequeney_rr;

    /**
     * ¹ýÁ÷½µÆµ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_oc_drop_frequeney_rr;

    /**
     * ¹¦ÂÊÄ£¿é¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_drive_ic_rr;

    /**
     * ¹ýÎÂ¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_over_temperature_rr;

    /**
     * ÏàµçÁ÷´«¸ÐÆ÷¹ÊÕÏ_ºóÑ¹Ëõ»ú
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_err_data_rr;
};

/**
 * Signals in message SMM_2F4h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_smm_2_f4h_t {
    /**
     * Ö÷¼Ý×ùÒÎ¼ÓÈÈµÈ¼¶
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t smm_heat_level_d;

    /**
     * Ö÷¼Ý×ùÒÎÍ¨·çµÈ¼¶
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t smm_fan_level_d;
};

/**
 * Signals in message ICM_3FEh.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_icm_3_f_eh_t {
    /**
     * ×ÜÀï³Ì£¨ÒÇ±í)
     *
     * Range: 0..9999999 (0..999999.9 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t icm_total_odometer;

    /**
     * Ö÷Ìâ×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_theme_feedback;

    /**
     * ÒÇ±íÉèÖÃ·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t icm_set_feedback;

    /**
     * ¸±¼Ý°²È«´ø×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ps_seat_belt_r_st;

    /**
     * Ö÷¼Ý°²È«´ø×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drv_seat_belt_r_st;

    /**
     * ×ÜÀï³ÌÓÐÐ§ÐÔ£¨ÒÇ±í)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t icm_total_odometer_valid;

    /**
     * ±³¹âÁÁ¶È×´Ì¬
     *
     * Range: 0..4 (0..20 %)
     * Scale: 5
     * Offset: 0
     */
    uint8_t icm_backlight_luminance_status;

    /**
     * µ¥Î»ÉèÖÃ·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_unit_set_back;

    /**
     * ÓïÑÔÉèÖÃ·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_languange_set_back;

    /**
     * ³¬ËÙÉèÖÃ·´À¡
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t icm_speed_warn_maxback;
};

/**
 * Signals in message ICM_NM_412h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_icm_nm_412h_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_dest_address;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ack;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ind;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_limphome;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_ring;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_alive;
};

/**
 * Signals in message VSP_283h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_vsp_283h_t {
    /**
     * ÐÐÈËÌáÊ¾Æ÷¿ª¹Ø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vsp_ppd_switch_status;
};

/**
 * Signals in message WCM_347h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_wcm_347h_t {
    /**
     * ÊÖ»úÒÅÍüÌáÐÑ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wpc_phone_detection_status;

    /**
     * ¹¤×÷×´Ì¬·´À¡
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wpc_wireless_charging_status;

    /**
     * ¿ªÆô/¹Ø±Õ×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wpc_wireless_charging_set_status;
};

/**
 * Signals in message BCM_211h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bcm_211h_t {
    /**
     * ÎÞÔ¿³×Æô¶¯ÏµÍ³¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_peps_system_fault;

    /**
     * µçÔ´Ä£Ê½ÓÐÐ§ÐÔÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_power_mode_v;

    /**
     * ÏµÍ³µÍÑ¹µçÔ´Ä£Ê½
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sys_power_sts;

    /**
     * µÍÑ¹µçÔ´×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_power_mode;

    /**
     * PE¿ª¹Ø½â±ÕËøÖ¸Áî
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_pe_door_lock_command;

    /**
     * ËÑË÷Ô¿³×Ê§°Ü¾¯¸æ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_peps_key_serch_fail_ied;

    /**
     * ÓëTboxÈÏÖ¤×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_tbox_response;

    /**
     * Ô¿³×Î»ÖÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_key_position;

    /**
     * Ò£¿ØÔ¿³×°´¼üÖ¸ÁîÐÅÏ¢
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_key_command_info;

    /**
     * ·¢ËÍÃüÁîµÄÔ¿³×
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_key_id;

    /**
     * ÓëBCMÈÏÖ¤×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_ble_response;

    /**
     * ¶¯Á¦·ÀµÁ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_immo_fail_indication;

    /**
     * ¸±¼ÝÃÅ°ÑÊÖ½â±ÕËøÇëÇó
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_pe_sw_status;

    /**
     * Ö÷¼ÝÃÅ°ÑÊÖ½â±ÕËøÇëÇó
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_pe_sw_status;

    /**
     * Ò»¼üÆô¶¯¿ª¹Ø1×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_ssb_sw1_state;

    /**
     * Ò»¼üÆô¶¯¿ª¹Ø2×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_ssb_sw2_state;

    /**
     * STARTÆô¶¯ÇëÇó×´Ì¬
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_st_req;

    /**
     * IGN2¼ÌµçÆ÷¿ØÖÆ×´Ì¬
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_ign2_relay;

    /**
     * IGN1¼ÌµçÆ÷¿ØÖÆ×´Ì¬
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_ign1_relay;

    /**
     * ÖÆ¶¯Ì¤°å³£±Õ×´Ì¬
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_normal_close_brake_sw_sts;

    /**
     * ÖÆ¶¯Ì¤°å³£¿ª×´Ì¬
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_normally_open_brake_sw_sts;

    /**
     * ÖÆ¶¯Ì¤°å¿ª¹Ø×´Ì¬
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_brake_sw_sts;

    /**
     * Ô¶³Ì½ûÖ¹ÉÏµç×´Ì¬ÐÅºÅ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_remote_forbidden_fb;

    /**
     * BCMÓëVCUÈÏÖ¤×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_auth_respone_sts;

    /**
     * AuthStateÈÏÖ¤×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_auth_stus;

    /**
     * IGN2·´À¡×´Ì¬
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_ign2_relay_fb;

    /**
     * IGN1·´À¡×´Ì¬
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_ign1_relay_fb;
};

/**
 * Signals in message BCM_105h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bcm_105h_t {
    /**
     * Ç°Óê¹Î»ØÎ»×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_wiper_prk_sw_status;

    /**
     * Ç°Ï´µÓ¿ª¹Ø×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_washing_sw_status;

    /**
     * Ç°Óê¹Î¿ª¹Ø×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_wiper_sw_status;

    /**
     * ÖÐ¿Ø¿ª¹Ø½âËø/±ÕËøÊäÈë
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_master_sw_status;

    /**
     * ºóÎíµÆ¿ª¹Ø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rear_fog_lamp_sw;

    /**
     * Ç°ÎíµÆ¿ª¹Ø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_fog_lamp_sw;

    /**
     * ´óµÆ¿ª¹Ø×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_head_light_switch;

    /**
     * ±ä¹â¿ª¹Ø×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_dimmer_switch;

    /**
     * ×ªÏòµÆ¿ª¹Ø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_indicator_sw_status;

    /**
     * ÓÒºó×ªÏòµÆ¹ÊÕÏ·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_bulb_failure_fb_rr_turn_status;

    /**
     * ×óºó×ªÏòµÆ¹ÊÕÏ·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_bulb_failure_fb_rl_turn_status;

    /**
     * ÓÒÇ°×ªÏòµÆ¹ÊÕÏ·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_bulb_failure_fb_fr_turn_status;

    /**
     * ×óÇ°×ªÏòµÆ¹ÊÕÏ·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_bulb_failure_fb_fl_turn_status;

    /**
     * ÖÐ¿ØËø×´Ì¬·´À¡£¨Ö÷¼ÝÃÅËø×´Ì¬£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_drv_door_lock_sta;

    /**
     * ³äµç×ùµç×ÓËø·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_charging_dock_lock_sta;

    /**
     * À®°È¿ª¹ØÊäÈë
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_horn_sw_sts;

    /**
     * Pµµ¿ª¹ØÊäÈë
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_p_sw_sts;

    /**
     * ÓÒÇ°ÃÅ¿ª±Õ×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fr_door_sts;

    /**
     * ×óÇ°ÃÅ¿ª±Õ×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fl_door_sts;

    /**
     * Ç°²Õ¸Ç×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_hood_sts;

    /**
     * Î²ÃÅ¿ª±Õ×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_tail_door_sts;

    /**
     * ÓÒÖÐ»¬ÃÅ×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_sliding_door_sts;

    /**
     * ×óÖÐ»¬ÃÅ×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_sliding_door_sts;

    /**
     * Ðîµç³ØµçÑ¹
     *
     * Range: 0..127 (0..25.4 V)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t bcm_battery_value;

    /**
     * Åö×²ÐÅºÅÊäÈë×´Ì¬
     *
     * Range: 0..127 (0..25.4 -)
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t bcm_crash_input_status;

    /**
     * ¿¿½ü×Ô¶¯½âËø×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_closing_car_lock_sts;

    /**
     * ³µÁ¾µçÔ´Ä£Ê½ÉèÖÃ×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_vehicle_power_mode_sts;

    /**
     * Ëø³µ×Ô¶¯¹Ø±Õ³µ´°ÉèÖÃ×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_lock_car_close_window_sts;

    /**
     * Í¨·ç¿ª¹Ø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_ventilation_sw_status;

    /**
     * Àë³µ×Ô¶¯ÉÏËø×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_leaving_car_lock_sts;

    /**
     * ÃÅËøÉèÖÃ×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_door_lock_set_sts;

    /**
     * ÉÏËøÌáÊ¾ÉùÒô×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_lock_prompt_sts;

    /**
     * ÐÐ³µ×Ô¶¯ÂäËø³µËÙÉèÖÃ×´Ì¬·´À¡
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_auto_driving_lock_sts;
};

/**
 * Signals in message BCM_112h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bcm_112h_t {
    /**
     * Ñô¹âA/D²ÉÑùÖµ£¨ÓÒ£©
     *
     * Range: 0..255 (0..255 W/m2)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_solar_right_passg_side;

    /**
     * Ñô¹âA/D²ÉÑùÖµ£¨×ó£©
     *
     * Range: 0..255 (0..255 W/m2)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_solar_left_driveside;

    /**
     * Ñ°³µ¹¦ÄÜ¿ªÆô×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_car_search_state;

    /**
     * Ò£¿ØÑ°³µ·½Ê½ÉèÖÃ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_car_search_type_st;

    /**
     * ·ÀµÁ×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_anti_theft_sts;

    /**
     * Åö×²¼¤»î×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_crash_valid;

    /**
     * ¹âÁ¿´«¸ÐÆ÷×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_light_sensor_sts;

    /**
     * ÕÕÎÒ»Ø¼ÒÊ±¼äÉèÖÃ·´À¡
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_follow_me_home_fedb;

    /**
     * ÕÕÎÒÉÏ³µÊ¹ÄÜ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_follow_me_car_fedb;

    /**
     * Ç°Ï´µÓ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_washing_status;

    /**
     * Ç°Óê¹Î×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_wiper_status;

    /**
     * Ô¶³Ì¿ØÖÆÊ§°ÜÔ­Òò
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fail_code;
};

/**
 * Signals in message BCM_113h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bcm_113h_t {
    /**
     * ×óÇ°³µ´°ÏÂ½µÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fl_wind_dwn;

    /**
     * ×óÇ°³µ´°ÉÏÉýÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fl_wind_up;

    /**
     * ¸±¼ÝÓÒ³µ´°¿ª¹ØÊäÈë
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_passenger_right_mirror_sw_sts;

    /**
     * Ö÷¼ÝÓÒ³µ´°¿ª¹ØÊäÈë
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_driver_rf_wind_sw_sts;

    /**
     * Ö÷¼Ý×ó³µ´°¿ª¹ØÊäÈë
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_driver_lf_wind_sw_sts;

    /**
     * ºóÊÓ¾µÕÛµþ/Õ¹¿ª¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_mirror_fold_sw_sts;

    /**
     * ÓÒºóÊÓ¾µÑ¡Ôñ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_mirror_sw_sts;

    /**
     * ×óºóÊÓ¾µÑ¡Ôñ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_mirror_sw_sts;

    /**
     * Ö÷¸±¼Ý³µ´°¿ØÖÆ×´Ì¬
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_win_ctrl_sts;

    /**
     * ÓÒÇ°³µ´°ÏÂ½µÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fr_wind_dwn;

    /**
     * ÓÒÇ°³µ´°ÉÏÉýÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fr_wind_up;

    /**
     * ºóÊÓ¾µÕ¹¿ªÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_mirror_stretch;

    /**
     * ºóÊÓ¾µµ÷½Ú¹«¹²¶ËÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rv_mirror_common_port;

    /**
     * ÓÒ¾µYÖá£¨ÉÏÏÂ£©Êä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_rv_mirror_y;

    /**
     * ÓÒ¾µXÖá£¨×óÓÒ£©Êä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_rv_mirror_x;

    /**
     * ×ó¾µYÖá£¨ÉÏÏÂ£©Êä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_rv_mirror_y;

    /**
     * ×ó¾µXÖá£¨×óÓÒ£©Êä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_rv_mirror_x;

    /**
     * ºóÊÓ¾µµ÷½ÚÊäÈë
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_mirror_adjust_sw_sts;

    /**
     * ÓÒÇ°³µ´°»ô¶ûµç»ú×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fr_win_motor_sts;

    /**
     * ×óÇ°³µ´°»ô¶ûµç»ú×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fl_win_motor_sts;

    /**
     * ºóÊÓ¾µÕÛµþ/Õ¹¿ª×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_mirror_fold_sts;

    /**
     * ºóÊÓ¾µÕÛµþÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_mirror_retract;

    /**
     * ×óÇ°³µ´°µç»ú»ô¶û·´À¡1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fl_win_hall_sensor1;

    /**
     * ×óÇ°³µ´°µç»ú»ô¶û·´À¡2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fl_win_hall_sensor2;

    /**
     * ÓÒÇ°³µ´°µç»ú»ô¶û·´À¡1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fr_win_hall_sensor1;

    /**
     * ÓÒÇ°³µ´°µç»ú»ô¶û·´À¡1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fr_win_hall_sensor2;
};

/**
 * Signals in message BCM_111h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bcm_111h_t {
    /**
     * Ô¶¹âµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_high_beam_light_sts;

    /**
     * ÖÐ¿ØËø¹¤×÷Ö¸Ê¾µÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_central_pilot_sts;

    /**
     * ³äµçÖ¸Ê¾µÆ£¨ÂÌ£©×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_charging_green_pilot_sts;

    /**
     * ³äµçÖ¸Ê¾µÆ£¨ºì£©×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_charging_red_pilot_sts;

    /**
     * Î£ÏÕ±¨¾¯¹¤×÷Ö¸Ê¾µÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_hazard_pilot_sts;

    /**
     * ºóÎíµÆ¹¤×÷Ö¸Ê¾µÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rear_fog_pilot_sts;

    /**
     * ÓÒºóÊÓ¾µ¹¤×÷Ö¸Ê¾µÆÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_mirror_pilot_sts;

    /**
     * ×óºóÊÓ¾µ¹¤×÷Ö¸Ê¾µÆÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_mirror_pilot_sts;

    /**
     * ÓÒÃ¤ÇøÖ¸Ê¾µÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_lamp_sts;

    /**
     * ×óÃ¤ÇøÖ¸Ê¾µÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_lamp_sts;

    /**
     * IPÕÕÃ÷µÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_ip_light_sts;

    /**
     * ·ÕÎ§µÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_atmospheres_lamp_sts;

    /**
     * ÔÄ¶ÁµÆµçÔ´£¨ÃÅ¿ª¹ØµÆ£©×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_reading_light_power_sts;

    /**
     * ½ü¹âµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_low_beam_light_sts;

    /**
     * ¸ßÎ»ÖÆ¶¯µÆ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_high_braking_light_sts;

    /**
     * ÓÒÖÆ¶¯µÆ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_braking_light_sts;

    /**
     * ×óÖÆ¶¯µÆ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_braking_light_sts;

    /**
     * ÃÅ°ÑÊÖµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_door_handle_lamp_sts;

    /**
     * ÅÆÕÕµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_license_plate_light_sts;

    /**
     * ºóÎ»ÖÃµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rear_pos_lamp_sts;

    /**
     * Ç°Î»ÖÃµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_pos_lamp_sts;

    /**
     * ÓÒµ¹³µµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_backup_light_sts;

    /**
     * ×óµ¹³µµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_backup_light_sts;

    /**
     * ÓÒºóÎíµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_rear_fog_lamp_sts;

    /**
     * ×óºóÎíµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_rear_fog_lamp_sts;

    /**
     * Ç°ÎíµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_fog_lamp_sts;

    /**
     * ±³¹âµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_back_light_sts;

    /**
     * Ç°ÃÅ½âËøÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_door_cent_unlock;

    /**
     * ×¤³µµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_parking_light_sts;

    /**
     * LOGOµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_logo_light_sts;

    /**
     * ÈÕÐÐµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_day_light_sts;

    /**
     * ÓÒ×ªÏòµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_turn_light_sts;

    /**
     * ×ó×ªÏòµÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_turn_light_sts;

    /**
     * ·½ÏòÅÌ¼ÓÈÈÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_wheel_heat;

    /**
     * À®°ÈÊä³ö
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_horn;

    /**
     * Ï´µÓµç»úÇý¶¯
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_washing_motor;

    /**
     * ³äµç×ùµç×ÓËø±ÕËøÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_charging_dock_lock;

    /**
     * ³äµç×ùµç×ÓËø½âËøÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_charging_dock_unlock;

    /**
     * ÖÐ»¬ÃÅÎ²ÃÅ±ÕËøÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_mr_door_cent_lock;

    /**
     * ÖÐ»¬ÃÅÎ²ÃÅ½âËøÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_mr_door_cent_unlock;

    /**
     * Ç°ÃÅ±ÕËøÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_door_cent_lock;

    /**
     * ½ÚµçÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_save_pow_do;

    /**
     * Ô¤Ô¼³äµç»½ÐÑÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_charging_awaken;

    /**
     * »ô¶û´«¸ÐÆ÷µçÔ´Êä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_hall_sensor_power;

    /**
     * ÖÇÄÜ²¹µçÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_charging_output;

    /**
     * Ç°Óê¹ÎµÍËÙÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_wipers_low_speed;

    /**
     * Ç°Óê¹Î¸ßËÙÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_wipers_high_speed;

    /**
     * ºóÊÓ¾µ¼ÓÈÈÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_mirror_heat;

    /**
     * Ç°µ²·ç²£Á§¼ÓÈÈÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_windscreen_heat;

    /**
     * ¶ùÍ¯Ëø±ÕËøÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_child_cent_lock;

    /**
     * ¶ùÍ¯Ëø½âËøÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_child_cent_un_lock;

    /**
     * Ó­±ö¾²Ä¬×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_welcome_silent_status;

    /**
     * Ó­±ö¹¦ÄÜ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_welcome_feature_status;

    /**
     * Î£ÏÕ±¨¾¯µÆ×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_hazard_light_sts;

    /**
     * ESCLµçÔ´¿ØÖÆÊä³ö
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_escl_power;
};

/**
 * Signals in message BCM_114h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bcm_114h_t {
    /**
     * Ô¶³Ì¿ØÖÆÊ§°ÜÔ­Òò
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_fail_code;
};

/**
 * Signals in message BCM_212h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bcm_212h_t {
    /**
     * Æô¶¯°´¼ü¹ÊÕÏ×´ÌáÊ¾
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_ssb_sw_error;

    /**
     * µçÔ´¼ÌµçÆ÷¹ÊÕÏÌáÊ¾
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_peps_power_relay_err;

    /**
     * Æô¶¯ºÍÏ¨»ðÊ±ÌáÊ¾
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_indication_start_stop;

    /**
     * Ò£¿ØÔ¿³×µçÁ¿×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_keybattery_status;

    /**
     * Ðîµç³ØµçÁ¿µÍÌáÊ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_battery_status;

    /**
     * Ô¿³×ÔÚ³µÄÚÌáÐÑ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_peps_key_in_car_ind;

    /**
     * ·ÇOFFÒ£¿ØÔ¿³×²»ÔÚ³µÄÚÌáÊ¾
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_peps_not_off_key_not_in_car_ind;

    /**
     * Ô¿³×¿¿½üIMMOÏßÈ¦ÌáÊ¾£¨Ô¤Áô£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_peps_key_closer_ind;

    /**
     * PE±ÕËøÊ±±¨¾¯ÌáÊ¾
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_pe_lock_warning;

    /**
     * ESCL¹ÊÕÏÌáÊ¾
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_escl_warning;
};

/**
 * Signals in message BCM_VCU_Auth_022h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bcm_vcu_auth_022h_t {
    /**
     * ·ÀµÁÐÅÏ¢£¨byte1:BCM·´À¡ÖÁVCUËæ»úÊýµÚ1×Ö½Úbyte2:BCM·´À¡ÖÁVCUËæ»úÊýµÚ2×Ö½Úbyte3:BCM·´À¡ÖÁVCUËæ»úÊýµÚ3×Ö½Úbyte4:BCM·´À¡ÖÁVCUËæ»úÊýµÚ4×Ö½Ú£©
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bcm_immobilizer_info;
};

/**
 * Signals in message BCM_TBOX_Auth_024h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bcm_tbox_auth_024h_t {
    /**
     * BCMÔ¶³ÌÈÏÖ¤Ëæ»úÊý
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t bcm_remote_chall_code;
};

/**
 * Signals in message BCM_ESCL_Auth_025h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bcm_escl_auth_025h_t {
    /**
     * BCM·¢ËÍESCLÊý¾Ý
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bcm_escl_data;

    /**
     * BCMÇëÇóµç×ÓËø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_escl_requst;
};

/**
 * Signals in message BCM_NM_404h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_bcm_nm_404h_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_dest_address;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ack;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ind;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_limphome;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_ring;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_alive;
};

/**
 * Signals in message FSW_3C1h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_fsw_3_c1h_t {
    /**
     * ÓÒ²à¿ª¹Ø¹öÂÖ°´Ñ¹£¨¾²Òô£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_r_wheel_sw;

    /**
     * ÓÒ²à¿ª¹Ø¹öÂÖÓÒ²¦£¨ÏÂÒ»Ê×£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_r_right_sw;

    /**
     * ÓÒ²à¿ª¹Ø¹öÂÖ×ó²¦£¨ÉÏÒ»Ê×£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_r_left_sw;

    /**
     * ÓÒ²à¿ª¹Ø¹öÂÖÏÂ»¬£¨ÒôÁ¿-£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_r_wheel_down;

    /**
     * ÓÒ²à¿ª¹Ø¹öÂÖÉÏ»¬£¨ÒôÁ¿+£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_r_wheel_up;

    /**
     * ÓÒ²à¿ª¹Ø¹¦ÄÜ¼ü2£¨½Ó´òÀ¶ÑÀµç»°£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_r_func_sw2;

    /**
     * ÓÒ²à¿ª¹Ø¹¦ÄÜ¼ü1£¨ÒÇ±í²Ëµ¥×´Ì¬£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_r_func_sw1;

    /**
     * ×ó²à¿ª¹Ø¹öÂÖ°´Ñ¹£¨¶Ì°´Ñ²º½¿ªÆô/¶Ì°´Cancel/³¤°´Ñ²º½¹Ø±Õ£©
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_l_acc;

    /**
     * ×ó²à¿ª¹Ø¹öÂÖÓÒ²¦£¨³µ¾à+£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_l_gap_plus;

    /**
     * ×ó²à¿ª¹Ø¹öÂÖ×ó²¦£¨³µ¾à-£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_l_gap_minus;

    /**
     * ×ó²à¿ª¹Ø¹öÂÖÏÂ»¬£¨ËÙ¶È-£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_l_speed_minus_set;

    /**
     * ×ó²à¿ª¹Ø¹öÂÖÉÏ»¬£¨ËÙ¶È+£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_l_speed_plus;

    /**
     * ×ó²à¿ª¹Ø¹¦ÄÜ¼ü2£¨×Ô¶¨Òå°´¼ü£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_l_func_sw2;

    /**
     * ×ó²à¿ª¹Ø¹¦ÄÜ¼ü1£¨ÓïÒô¿ØÖÆ£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mfs_l_func_sw1;
};

/**
 * Signals in message SWH_State_3C2h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_swh_state_3_c2h_t {
    /**
     * ·½ÏòÅÌ¼ÓÈÈÏµÍ³¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t swh_steer_wheel_heatg_err;

    /**
     * ·½ÏòÅÌ¼ÓÈÈ×´Ì¬·´À¡
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t swh_steer_wheel_heatg_sts;

    /**
     * responseErrorÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t swh_response_error;
};

/**
 * Signals in message IHU_ACMM_2F9h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ihu_acmm_2_f9h_t {
    /**
     * Ç°³ýËª¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_defrost_switch;

    /**
     * ÖÆÀä¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_ac_switch;

    /**
     * Auto¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_auto_switch;

    /**
     * ¿Õµ÷×Ü¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_main_swtich;

    /**
     * Ç°¿Õµ÷·çÁ¿´óÐ¡µ÷½Ú
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_f_blower_lvl;

    /**
     * Ç°¿Õµ÷´µ·çÄ£Ê½
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_mode_switch;

    /**
     * ÄÚÍâÑ­»·¿ØÖÆ¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_cycle_switch;

    /**
     * Ç°ÎÂ¶ÈÉèÖÃ£¨µç¶¯¿î£©
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_f_temp_set_ev;

    /**
     * Ç°ÎÂ¶ÈÉèÖÃ£¨×Ô¶¯¿î£©
     *
     * Range: 35..57 (17.5..28.5 ¡æ)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t ihu_f_temp_set_auto;

    /**
     * ºó¿Õµ÷ÖÆÈÈ¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_r_ptc_set;

    /**
     * ºó¿Õµ÷×Ü¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_r_main_swtich;

    /**
     * Ç°¿Õµ÷ÖÆÈÈ¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_f_ptc_set;

    /**
     * ºóÎÂ¶ÈÉèÖÃ£¨×Ô¶¯¿î£©
     *
     * Range: 35..57 (17.5..28.5 ¡æ)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t ihu_r_temp_set_auto;

    /**
     * ºó¿Õµ÷´µ·çÄ£Ê½
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_r_mode_swtich;

    /**
     * ºó¿Õµ÷·çÁ¿´óÐ¡
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_r_blower_lvl;

    /**
     * ºóÎÂ¶ÈÉèÖÃ£¨µç¶¯¿î£©
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_r_temp_set_ev;

    /**
     * ºóÖÆÀä¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_r_ac_switch;

    /**
     * ×î´óÖÆÈÈ¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_maxptc;

    /**
     * ×î´óÖÆÀä¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_maxac;

    /**
     * ¿ÕÆø¾»»¯¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_key_airpurification;

    /**
     * Ç°ºóÎÂ¶ÈÍ¬²½µ÷½Ú¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_tem_same_set;
};

/**
 * Signals in message IHU_VCU_2FAh.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ihu_vcu_2_f_ah_t {
    /**
     * AVHÈí¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_avh_switch;

    /**
     * ESC_OFF¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_esc_off_switch;

    /**
     * ÍÏ³µÄ£Ê½¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_epb_tow_mode_switch;

    /**
     * Ì¥Ñ¹¸´Î»°´¼ü
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_tpms_reset_switch;

    /**
     * ÐÐÈËÌáÊ¾Æ÷ÉùÒô¹Ø±Õ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_vsp_sound_off;

    /**
     * Âý³ä±£ÎÂ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_slow_charging_preservation_switch;

    /**
     * ¶ÔÍâ·Åµç¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_external_discharge_switch;

    /**
     * ÈäÐÐÄ£Ê½¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_worm_mode_switch;

    /**
     * ¼ÝÊ»Ä£Ê½Ñ¡Ôñ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_driving_mode;

    /**
     * ÎÞÏß³äµçÄ£¿é¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_wcm_switch;

    /**
     * EPBÈí¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_epb_switch;

    /**
     * ÄÜÁ¿»ØÊÕÉèÖÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_energy_recovery;

    /**
     * ³äµçÏÞÖÆÖµÉèÖÃ
     *
     * Range: -80..20 (0..100 -)
     * Scale: 1
     * Offset: 80
     */
    uint8_t charge_limit_set;

    /**
     * ¶¯Á¦µç³ØÉî¶È·Åµç
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_pow_bat_deep_discharge;
};

/**
 * Signals in message IHU_ICM_2FFh.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ihu_icm_2_f_fh_t {
    /**
     * ³¬ËÙÌáÐÑ×î¸ß³µËÙÉèÖÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_speed_warn_max_speed_set;

    /**
     * Ê£ÓàÐøº½Àï³ÌÄ£Ê½ÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_resi_milg_mode_set;

    /**
     * Ö÷ÌâÉèÖÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_theme;

    /**
     * Æ£ÀÍ¼ÝÊ»ÌáÐÑ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_fatigue_driving_warn;

    /**
     * ³¬ËÙÌáÐÑ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_overspeed_warn;

    /**
     * DMSÏµÍ³±¨¾¯
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_dms_alarm;

    /**
     * DMSÏµÍ³×´Ì¬
     *
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_dms_state;

    /**
     * DMS¼ÝÊ»Ô±·ÖÐÄ¼à²â
     *
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_dms_distract_lvl;

    /**
     * DMS¼ÝÊ»Ô±Æ£ÀÍµÈ¼¶
     *
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_dms_fatigued_lvl;

    /**
     * Æ£ÀÍ¼ÝÊ»±¨¾¯ÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_fatigue_driving_warnset;

    /**
     * µ¥Î»ÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_unit_set;

    /**
     * ÓïÑÔÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_languange_set;

    /**
     * DMSÏµÍ³ÓÐÐ§Î»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_icm_dms_valid;
};

/**
 * Signals in message IHU_ADAS_2FC.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ihu_adas_2_fc_t {
    /**
     * ELK¹¦ÄÜ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_elk_switch;

    /**
     * LDW¹¦ÄÜ±¨¾¯ÁéÃô¶ÈÉèÖÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_ldw_alarm_sensitivity_set;

    /**
     * LDW¹¦ÄÜ±¨¾¯·½Ê½ÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_ldw_alarm_method_set;

    /**
     * LDW¹¦ÄÜ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_ldw_switch;

    /**
     * FCW/AEB¹¦ÄÜ±¨¾¯ÁéÃô¶ÈÉèÖÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_fcw_aeb_alarm_sensitivity_set;

    /**
     * FCW/AEB¹¦ÄÜ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_fcw_aeb_switch;

    /**
     * MOIS±¨¾¯ÉùÒô¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_slwf_alarm_method;

    /**
     * MOIS¹¦ÄÜ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_mois_switch;

    /**
     * SLWF¹¦ÄÜ±¨¾¯·½Ê½ÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_slwf_alarm_method_set;

    /**
     * SLWF³¬ËÙ±¨¾¯¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_slwf_switch;

    /**
     * SLIFÏÞËÙÖµ¸Ä±äÌáÐÑ·½Ê½ÉèÖÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_slif_reminder_method_set;

    /**
     * SLIFÏÞËÙÏÔÊ¾¹¦ÄÜ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_slif_switch;

    /**
     * ELK¹¦ÄÜ±¨¾¯·½Ê½ÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_elk_alarm_method_set;

    /**
     * BSD/LCW¹¦ÄÜ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_bsd_lcw_switch;

    /**
     * DOW¹¦ÄÜ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_dow_switch;

    /**
     * BSIS¹¦ÄÜ±¨¾¯·½Ê½ÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_bsis_alarm_method_set;

    /**
     * CheckSum
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_check_sum;

    /**
     * 0-15¼ÆÊý
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_rolling_counter;
};

/**
 * Signals in message IHU_TIME_3E3h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ihu_time_3_e3h_t {
    /**
     * µ±Ç°Ê±¼ä_Äê
     *
     * Range: 0..255 (2019..2274 Year)
     * Scale: 1
     * Offset: 2019
     */
    uint8_t ihu_year_time;

    /**
     * µ±Ç°Ê±¼ä_ÔÂ
     *
     * Range: -1..10 (0..11 Month)
     * Scale: 1
     * Offset: 1
     */
    uint8_t ihu_month_time;

    /**
     * µ±Ç°Ê±¼ä_ÈÕ
     *
     * Range: -1..29 (0..30 Day)
     * Scale: 1
     * Offset: 1
     */
    uint8_t ihu_day_time;

    /**
     * µ±Ç°Ê±¼ä_Ð¡Ê±
     *
     * Range: 0..23 (0..23 Hour)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_hour_time;

    /**
     * µ±Ç°Ê±¼ä_·ÖÖÓ
     *
     * Range: 0..59 (0..59 Minute)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_minute_time;

    /**
     * µ±Ç°Ê±¼ä_Ãë
     *
     * Range: 0..3 (0..3 Second)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_second_time;
};

/**
 * Signals in message Nav_2F2h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_nav_2_f2h_t {
    /**
     * µØÍ¼ÏÞËÙ×´Ì¬0x0£ºµ¼º½ÓÐ¹ÊÕÏ0x1£ºÓÐÏÞËÙ0x2£ºÎÞÏÞËÙ0x3£ºÊ»ÈëÃ»ÓÐÊý¾ÝµÄ¹ú¼Ò/GPSÐÅºÅÈõ/ÎÞGPSÐÅºÅ0x4~0x6:reserved0x7£ºInvalid:;
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_speed_limit_status;

    /**
     * µÀÂ·ÏÞËÙµ¥Î»
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_speed_limit_units;

    /**
     * µ±Ç°µÀÂ·Ä¬ÈÏÏÞËÙÖµ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_speed_limit_default_value;

    /**
     * ¹ú¼Ò´úÂë
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_country_codelnfo;

    /**
     * µ±Ç°µÀÂ·ÏÞËÙÀàÐÍ0x0:ÎÞÐ§0x1:²»Çå³þÏÞËÙ»òÎÞÏÞËÙ0x2:ÏÔÊ½ÏÞËÙ£¨²É¼¯×ÔÂ·±ê£©0x3:Ìõ¼þÏÞËÙ0x4:ÒþÊ½ÏÞËÙ£¨¸ù¾Ý½»Í¨·¨¹æ£©0x5~0xF:Reserved:;
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_speed_limit_type;

    /**
     * µÀÂ·ÀàÐÍFunctionalClass(1/2/3/4/5)?FunctionalClass=1roadsallowforhighvolume,maximumspeedtrafficmovementbetweenandthroughmajormetropolitanareas.?FunctionalClass=1ispublishedforroadswithveryfew,ifany,speedchanges.Accesstotheroadisusuallycontrolled.?FunctionalClass=2roadsareusedtochanneltraffictoFunctionalClass=1roadsfortravelbetweenandthroughcitiesintheshortestamountoftime.?FunctionalClass=2ispublishedforroadswithveryfew,ifany,speedchangesthatallowforhighvolume,highspeedtrafficmovement.?FunctionalClass=3ispublishedforroadsthatintersectFunctionalClass=2roadsandprovideahighvolumeoftrafficmovementatalowerlevelofmobilitythanFunctionalClass=2roads.?FunctionalClass=4ispublishedforroadsthatprovideforahighvolumeoftrafficmovementatmoderatespeedsbetweenneighbourhoods.TheseroadsconnectwithhigherFunctionalClassroadstocollectanddistributetrafficbe:;
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_curr_road_type;

    /**
     * Ìõ¼þÏÞËÙÀàÐÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_speed_limit_conditional_type;

    /**
     * ·ÇÄ¬ÈÏÏÞËÙÖµ£¨Ö÷ÒªÊÇÊµÊ±Ìõ¼þÏÞËÙ£©
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_speed_limit_non_default_value;

    /**
     * ÊÇ·ñ½øÈëÕ¢µÀ0x00£ºÎ´½øÈëÕ¢µÀ0x01£ºÕýÔÚÕ¢µÀÉÏ,Ç°·½1kmÄÚ¼´½«Ê»Èë¸ßËÙÂ·0x02£ºÕýÔÚÕ¢µÀÉÏ,Ç°·½1kmÄÚ¼´½«Ê»Èë·Ç¸ßËÙÂ·0x03£ºÎÞÐ§:;
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_enter_ramp;

    /**
     * Ç°·½Õ¢µÀÓëµ±Ç°³µÁ¾µÄ¾àÀë
     *
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_ramp_dist;
};

/**
 * Signals in message Nav_2F3h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_nav_2_f3h_t {
    /**
     * ÓêÌõ¼þÏÞËÙ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_speed_limit_rain;

    /**
     * Ñ©Ìõ¼þÏÞËÙ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_speed_limit_snow;

    /**
     * ÎíÌõ¼þÏÞËÙ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_speed_limit_fog;

    /**
     * Ç°·½»·µºÏÞËÙ¶ÈÖµ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_roundabout_spd_lmt;

    /**
     * Ç°·½»·µº¾àÀë
     *
     * Range: 0..511 (0..511 m)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_roundabout_dist;

    /**
     * Ç°·½½»²æÂ·¿Ú¾àÀë
     *
     * Range: 0..511 (0..511 m)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_junction_dist;

    /**
     * Ç°·½ÆäËû½»Í¨±êÖ¾Îï0x1:Ç°·½100mÄÚÓÐºìÂÌµÆ:;
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_other_traffic_sign;

    /**
     * ×î½üµÄ½»Í¨±êÖ¾Îï¾àµ±Ç°¾àÀë
     *
     * Range: 0..511 (0..511 m)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_other_traffic_sign_dist;

    /**
     * Ç°·½µÀÂ·ÍäÇú½Ç¶È
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nav_road_winding;
};

/**
 * Signals in message IHU_BCM_2FBh.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ihu_bcm_2_f_bh_t {
    /**
     * Àë³µ×Ô¶¯ÉÏËø¿ª¹ØÀë³µ¸ÐÓ¦±ÕËø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_leaving_car_lock_switch;

    /**
     * ÃÅËøÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_door_lock_set;

    /**
     * ¶ùÍ¯Ëø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_child_lock_switch;

    /**
     * IPÕÕÃ÷µÆ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_ip_light_switch;

    /**
     * ·ÕÎ§µÆ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_apl_switch;

    /**
     * Ä£Ê½Ñ¡Ôñ¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_mode_select_switch;

    /**
     * ºóÊÓ¾µ¼ÓÈÈ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_mir_fold_heat_switch;

    /**
     * Ç°µ²·ç²£Á§ÎÙË¿¼ÓÈÈ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_windscreen_heat_switch;

    /**
     * ÉÏËøÌáÊ¾·½Ê½ÉèÖÃÖ¸Áî
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_lock_prompt_switch;

    /**
     * ±³¹âÁÁ¶Èµ÷½Ú
     *
     * Range: 0..4 (0..20 %)
     * Scale: 5
     * Offset: 0
     */
    uint8_t ihu_backlight_luminance_set;

    /**
     * °éÎÒ»Ø¼Ò´óµÆÑÓÊ±Ê±¼äÉèÖÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_follow_me_time_set;

    /**
     * LOGOµÆ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_logo_switch;

    /**
     * µç¶¯»¬ÃÅ¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_electric_sliding_door;

    /**
     * Ñ°³µÌáÐÑ·½Ê½
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_search_vehicle_method;

    /**
     * ÓÒÇ°³µ´°¿ªÆôºÍ¹Ø±Õ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_d_f_rw_auto;

    /**
     * ×óÇ°³µ´°¿ªÆôºÍ¹Ø±Õ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_d_f_lw_auto;

    /**
     * ³µÁ¾µçÔ´Ä£Ê½ÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_vehicle_power_mode_set;

    /**
     * ÖÐ¿ØËøÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_door_cent_lock_set;

    /**
     * Ëø³µ×Ô¶¯¹Ø±Õ³µ´°ÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_lock_car_close_window_set;

    /**
     * ÕÕÎÒÉÏ³µ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_follow_me_car_switch;

    /**
     * Ó­±ö¹¦ÄÜ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_welcome_feature_switch;

    /**
     * ·½ÏòÅÌ¼ÓÈÈ¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_steering_wheel_heating;

    /**
     * ÐÐ³µÂäËø³µËÙÉèÖÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_automatic_driving_lock;

    /**
     * ¿¿½ü¸ÐÓ¦½âËø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_closing_car_lock_switch;

    /**
     * ÑÓ³ÙÏÂµç¼ÆÊ±Íê³É
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ihu_delay_power_off;
};

/**
 * Signals in message IHU_ESC_255h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ihu_esc_255h_t {
    /**
     * autohold¿ª¹ØÉèÖÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t autohold_witchsettings;
};

/**
 * Signals in message TBOX_ACMM_213h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_tbox_acmm_213h_t {
    /**
     * Ç°³ýËª¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_defrost_switch;

    /**
     * ¿Õµ÷×Ü¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_main_swtich;

    /**
     * Ç°ÎÂ¶ÈÉèÖÃ£¨µç¶¯£©
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_f_temp_set_ev;

    /**
     * Ç°ÎÂ¶ÈÉèÖÃ£¨×Ô¶¯£©
     *
     * Range: 35..57 (17.5..28.5 ¡æ)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t tbox_f_temp_set_auto;

    /**
     * ×î´óÖÆÈÈ¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_maxptc;

    /**
     * ×î´óÖÆÀä¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_maxac;
};

/**
 * Signals in message TBOX_BCM_2F1h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_tbox_bcm_2_f1h_t {
    /**
     * ³µ´°¿ªÆôºÍ¹Ø±Õ£¨ËùÓÐ³µ´°£©
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_w_auto_swich;

    /**
     * ³µÃÅËø¿ØÖÆ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_door_lock_sts;

    /**
     * Ô¶³ÌÉÏµç
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_power_on;

    /**
     * Ô¶³ÌÏÂµç
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_power_off;

    /**
     * À¶ÑÀÔ¿³×ÊÇ·ñÔÚÎ»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_bt_key_exist;

    /**
     * Ö÷¶¯Ñ°³µ(ÃùµÑ/ÁÁµÆ/ÉÁË¸µÈ)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_search_vehicle_req;

    /**
     * Ô¶³Ì¿ØÖÆ³µ´°Í¨·ç¿ª¹Ø
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_window_ventilation_switch;

    /**
     * ÓÒÇ°³µ´°¿ªÆôºÍ¹Ø±Õ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_d_f_rw_auto;

    /**
     * ×óÇ°³µ´°¿ªÆôºÍ¹Ø±Õ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_d_f_lw_auto;

    /**
     * OTAÉÏµç
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_ota_power_on;

    /**
     * Ö÷¼Ý×ùÒÎ¼ÓÈÈµÈ¼¶
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_smm_heat_level_d;

    /**
     * Ö÷¼Ý×ùÒÎÍ¨·çµÈ¼¶
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_smm_fan_level_d;

    /**
     * OTAÏÂµç
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_ota_power_off;
};

/**
 * Signals in message TBOX_BCM_2F5h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_tbox_bcm_2_f5h_t {
    /**
     * Ô¶³ÌÈÏÖ¤ÇëÇó
     *
     * Range: 0..2 (1..3 -)
     * Scale: 2
     * Offset: 0
     */
    uint8_t t_box_rem_authentication_rq;

    /**
     * TBox·´À¡Ô¶³ÌÈÏÖ¤Êý¾Ý
     *
     * Range: 0..76695845 (1..4294967295 -)
     * Scale: 56
     * Offset: 0
     */
    uint64_t t_box_remote_auth_result_rep_mum;
};

/**
 * Signals in message IHU_NM_40Ah.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ihu_nm_40_ah_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_dest_address;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ack;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ind;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_limphome;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_ring;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_alive;
};

/**
 * Signals in message TBOX_NM_410h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_tbox_nm_410h_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_dest_address;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ack;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ind;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_limphome;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_ring;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_alive;
};

/**
 * Signals in message CGW_NM_402h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_cgw_nm_402h_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_dest_address;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ack;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ind;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_limphome;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_ring;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_alive;
};

/**
 * Signals in message ESCL_Status_031h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_escl_status_031h_t {
    /**
     * ESCL±ÕËø»ò½âËø×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_lock_unlock_status;

    /**
     * µç×ÓËø¹ÊÕÏ×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_failure_status;

    /**
     * µç×ÓËøÈÏÖ¤½á¹û
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_authentication_failure;

    /**
     * µç×ÓËø²»¶¯×÷Ô­Òò
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_error_code;

    /**
     * µç×ÓËøÃ¦
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_busy;

    /**
     * ESCL±ÕËøÏÞÎ»¿ª¹Ø×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_lock_limit_sw;

    /**
     * ESCL½âËøÏÞÎ»¿ª¹Ø×´Ì¬
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_unlock_limit_sw;

    /**
     * ±ÕËø¶¯×÷Ê§°ÜÔ­Òò
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_operation_failure;

    /**
     * ÉÏËøÏÞÎ»¿ª¹ØÁ½Â·Í¬Ê±ÎªµÍ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_lock_switch_failure;

    /**
     * Ö»ÒªÓÐ¹ÊÕÏ·¢Éú¾ÍÖÃÎ»
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_diag_failure;

    /**
     * ½âËø³¬Ê±
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_bolt_blocked_status;

    /**
     * ÍøÂç¹ÜÀí×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_nm_usr_data3;

    /**
     * µç»ú¿ªÂ·
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_mortor_open_failure;

    /**
     * ½âËøÏÞÎ»¿ª¹ØÁ½Â·Í¬Ê±Îª¸ß¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_unlock_switch_particle_failure;

    /**
     * ÉÏËøÏÞÎ»¿ª¹ØÁ½Â·Í¬Ê±Îª¸ß¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_lock_switch_particle_failure;

    /**
     * ½âËøÏÞÎ»¿ª¹ØÁ½Â·Í¬Ê±ÎªµÍ¹ÊÕÏ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_unlock_switch_failure;

    /**
     * ½âËø¶¯×÷Ê§°ÜÔ­Òò
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_un_lock_operation_failure;
};

/**
 * Signals in message ESCL_Certification_032h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_escl_certification_032h_t {
    /**
     * µç×ÓËøÈÏÖ¤Ëæ»úÊý
     *
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t escl_ramdon_code;
};

/**
 * Signals in message ESCL_NM_405h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_escl_nm_405h_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_dest_address;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ack;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_sleep_ind;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_limphome;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_ring;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_alive;
};

/**
 * Signals in message CCS_2F7h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_ccs_2_f7h_t {
    /**
     * ÎÂ¶ÈÉèÖÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_tem_set;

    /**
     * A/C¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_ac_switch;

    /**
     * Ç°³ýËª¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_defrost_switch;

    /**
     * ÄÚÑ­»·¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_cycle_switch;

    /**
     * Auto¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_auto_switch;

    /**
     * ¿Õµ÷×Ü¿ª¹Ø
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_main_swtich;

    /**
     * ·çÁ¿ÉèÖÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccs_blowerl_lvl_set;
};

/**
 * Signals in message PSD_188h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_psd_188h_t {
    /**
     * ¶ùÍ¯Ëø×´Ì¬
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t psd_childlockstatus;
};

/**
 * Signals in message PSD_288h.
 *
 * All signal values are as on the CAN bus.
 */
struct mcu_233_psd_288h_t {
    /**
     * À®°È¿ØÖÆ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t psd_voice_control;
};

/**
 * Pack message VCU_103h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_103h_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_103h_t *src_p,
    size_t size);

/**
 * Unpack message VCU_103h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_103h_unpack(
    struct mcu_233_vcu_103h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_103h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_103h_init(struct mcu_233_vcu_103h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_hv_bat_md_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_hv_bat_md_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_hv_bat_md_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_discharge_alw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_discharge_alw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_discharge_alw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_charge_alw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_charge_alw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_charge_alw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_dcdc_wakeuo_sleep_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_dcdc_wakeuo_sleep_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_dcdc_wakeuo_sleep_ctrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_dcdc_md_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_dcdc_md_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_dcdc_md_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_vcu_103h_vcu_mcu_targe_spd_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_mcu_targe_spd_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_mcu_targe_spd_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_vcu_103h_vcu_mcu_target_toq_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_mcu_target_toq_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_mcu_target_toq_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_bobc_wakeup_sleep_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_bobc_wakeup_sleep_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_bobc_wakeup_sleep_ctrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_obc_wakeup_sleep_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_obc_wakeup_sleep_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_obc_wakeup_sleep_ctrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_vtms_wakeup_sleep_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_vtms_wakeup_sleep_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_vtms_wakeup_sleep_ctrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_mcu_anti_shake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_mcu_anti_shake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_mcu_anti_shake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_mcu_sleep_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_mcu_sleep_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_mcu_sleep_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_mot_working_mode_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_mot_working_mode_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_mot_working_mode_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_app_sec_relay_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_app_sec_relay_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_app_sec_relay_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_app_fir_relay_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_app_fir_relay_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_app_fir_relay_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_bms_extra_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_bms_extra_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_bms_extra_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_bms_heat_prese_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_bms_heat_prese_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_bms_heat_prese_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_mcu_discharge_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_mcu_discharge_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_mcu_discharge_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_mc_uenabled_hhc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_mc_uenabled_hhc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_mc_uenabled_hhc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_103_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_103_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_103_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_103h_vcu_103_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_103h_vcu_103_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_103h_vcu_103_check_sum_is_in_range(uint8_t value);

/**
 * Pack message VCU_200h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_200h_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_200h_t *src_p,
    size_t size);

/**
 * Unpack message VCU_200h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_200h_unpack(
    struct mcu_233_vcu_200h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_200h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_200h_init(struct mcu_233_vcu_200h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_drive_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_drive_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_drive_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_pt_rdy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_pt_rdy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_pt_rdy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_shift_level_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_shift_level_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_shift_level_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_can_com_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_can_com_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_can_com_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_hvil_clsd_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_hvil_clsd_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_hvil_clsd_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_accidently_discon_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_accidently_discon_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_accidently_discon_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_sys_faulev_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_sys_faulev_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_sys_faulev_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_scurt_authn_fail_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_scurt_authn_fail_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_scurt_authn_fail_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_chrgng_cnctd_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_chrgng_cnctd_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_chrgng_cnctd_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_veh_charge_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_veh_charge_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_veh_charge_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_veh_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_veh_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_veh_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_vcu_err_lv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_vcu_err_lv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_vcu_err_lv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_gear_control_module_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_gear_control_module_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_gear_control_module_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_torque_control_module_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_torque_control_module_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_torque_control_module_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_vcu_200h_vcu_veh_real_t_egy_cnse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_veh_real_t_egy_cnse_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_veh_real_t_egy_cnse_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_inlet_electronic_lock_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_inlet_electronic_lock_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_inlet_electronic_lock_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_intelligent_recharge_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_intelligent_recharge_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_intelligent_recharge_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_veh_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_veh_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_veh_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_brake_control_module_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_brake_control_module_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_brake_control_module_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_inlet_electronic_lock_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_inlet_electronic_lock_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_inlet_electronic_lock_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_200_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_200_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_200_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_200h_vcu_200_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_200h_vcu_200_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_200h_vcu_200_check_sum_is_in_range(uint8_t value);

/**
 * Pack message VCU_ICM_3FDh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_icm_3_f_dh_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_icm_3_f_dh_t *src_p,
    size_t size);

/**
 * Unpack message VCU_ICM_3FDh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_icm_3_f_dh_unpack(
    struct mcu_233_vcu_icm_3_f_dh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_ICM_3FDh.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_icm_3_f_dh_init(struct mcu_233_vcu_icm_3_f_dh_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t mcu_233_vcu_icm_3_f_dh_vcu_total_odometer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_icm_3_f_dh_vcu_total_odometer_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_icm_3_f_dh_vcu_total_odometer_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_vcu_icm_3_f_dh_vcu_veh_avrg_egy_cnse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_icm_3_f_dh_vcu_veh_avrg_egy_cnse_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_icm_3_f_dh_vcu_veh_avrg_egy_cnse_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_vcu_icm_3_f_dh_vcu_resi_milg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_icm_3_f_dh_vcu_resi_milg_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_icm_3_f_dh_vcu_resi_milg_is_in_range(uint16_t value);

/**
 * Pack message VCU_106h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_106h_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_106h_t *src_p,
    size_t size);

/**
 * Unpack message VCU_106h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_106h_unpack(
    struct mcu_233_vcu_106h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_106h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_106h_init(struct mcu_233_vcu_106h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_106h_vcu_dcdc_actu_avlbl_pwr_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_106h_vcu_dcdc_actu_avlbl_pwr_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_106h_vcu_dcdc_actu_avlbl_pwr_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_106h_vcu_dcdc_out_vol_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_106h_vcu_dcdc_out_vol_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_106h_vcu_dcdc_out_vol_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_106h_vcu_bms_charge_vtms_pwr_peq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_106h_vcu_bms_charge_vtms_pwr_peq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_106h_vcu_bms_charge_vtms_pwr_peq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_106h_vcu_acmm_pwr_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_106h_vcu_acmm_pwr_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_106h_vcu_acmm_pwr_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_106h_vcu_106_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_106h_vcu_106_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_106h_vcu_106_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_106h_vcu_106_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_106h_vcu_106_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_106h_vcu_106_check_sum_is_in_range(uint8_t value);

/**
 * Pack message VCU_18Fh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_18_fh_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_18_fh_t *src_p,
    size_t size);

/**
 * Unpack message VCU_18Fh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_18_fh_unpack(
    struct mcu_233_vcu_18_fh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_18Fh.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_18_fh_init(struct mcu_233_vcu_18_fh_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_18_fh_vcu_eop_sleep_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_18_fh_vcu_eop_sleep_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_18_fh_vcu_eop_sleep_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_18_fh_vcu_eop_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_18_fh_vcu_eop_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_18_fh_vcu_eop_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_vcu_18_fh_vcu_eop_mot_speed_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_18_fh_vcu_eop_mot_speed_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_18_fh_vcu_eop_mot_speed_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_18_fh_vcu_eop_oil_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_18_fh_vcu_eop_oil_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_18_fh_vcu_eop_oil_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_18_fh_vcu_eop_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_18_fh_vcu_eop_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_18_fh_vcu_eop_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_18_fh_vcu_eop_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_18_fh_vcu_eop_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_18_fh_vcu_eop_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message VCU_520h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_520h_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_520h_t *src_p,
    size_t size);

/**
 * Unpack message VCU_520h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_520h_unpack(
    struct mcu_233_vcu_520h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_520h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_520h_init(struct mcu_233_vcu_520h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_520h_vcu_fvb_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_520h_vcu_fvb_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_520h_vcu_fvb_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_520h_vcu_fvb_b_open_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_520h_vcu_fvb_b_open_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_520h_vcu_fvb_b_open_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_520h_vcu_fvb_c_open_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_520h_vcu_fvb_c_open_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_520h_vcu_fvb_c_open_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_520h_vcu_520_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_520h_vcu_520_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_520h_vcu_520_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_520h_vcu_520_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_520h_vcu_520_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_520h_vcu_520_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message VCU_526h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_526h_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_526h_t *src_p,
    size_t size);

/**
 * Unpack message VCU_526h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_526h_unpack(
    struct mcu_233_vcu_526h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_526h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_526h_init(struct mcu_233_vcu_526h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_526h_vcu_cruise_control_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_526h_vcu_cruise_control_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_526h_vcu_cruise_control_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_vcu_526h_vcu_crs_veh_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_526h_vcu_crs_veh_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_526h_vcu_crs_veh_spd_is_in_range(uint16_t value);

/**
 * Pack message VCU_IHU_2FEh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_ihu_2_f_eh_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_ihu_2_f_eh_t *src_p,
    size_t size);

/**
 * Unpack message VCU_IHU_2FEh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_ihu_2_f_eh_unpack(
    struct mcu_233_vcu_ihu_2_f_eh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_IHU_2FEh.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_ihu_2_f_eh_init(struct mcu_233_vcu_ihu_2_f_eh_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_ihu_2_f_eh_vcu_pow_bat_deep_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_ihu_2_f_eh_vcu_pow_bat_deep_discharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_ihu_2_f_eh_vcu_pow_bat_deep_discharge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_ihu_2_f_eh_vcu_energy_recovery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_ihu_2_f_eh_vcu_energy_recovery_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_ihu_2_f_eh_vcu_energy_recovery_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_ihu_2_f_eh_vcu_slow_charging_preservation_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_ihu_2_f_eh_vcu_slow_charging_preservation_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_ihu_2_f_eh_vcu_slow_charging_preservation_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_ihu_2_f_eh_vcu_external_discharge_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_ihu_2_f_eh_vcu_external_discharge_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_ihu_2_f_eh_vcu_external_discharge_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_ihu_2_f_eh_vcu_worm_mode_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_ihu_2_f_eh_vcu_worm_mode_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_ihu_2_f_eh_vcu_worm_mode_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_ihu_2_f_eh_vcu_loadconditions_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_ihu_2_f_eh_vcu_loadconditions_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_ihu_2_f_eh_vcu_loadconditions_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_ihu_2_f_eh_vcu_rearaxle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_ihu_2_f_eh_vcu_rearaxle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_ihu_2_f_eh_vcu_rearaxle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_ihu_2_f_eh_vcu_conloadsensors_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_ihu_2_f_eh_vcu_conloadsensors_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_ihu_2_f_eh_vcu_conloadsensors_is_in_range(uint8_t value);

/**
 * Pack message VCU_PEPS_527h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_peps_527h_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_peps_527h_t *src_p,
    size_t size);

/**
 * Unpack message VCU_PEPS_527h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_peps_527h_unpack(
    struct mcu_233_vcu_peps_527h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_PEPS_527h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_peps_527h_init(struct mcu_233_vcu_peps_527h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_peps_527h_vcu_challenge_random1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_peps_527h_vcu_challenge_random1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_peps_527h_vcu_challenge_random1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_peps_527h_vcu_challenge_random2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_peps_527h_vcu_challenge_random2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_peps_527h_vcu_challenge_random2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_peps_527h_vcu_challenge_random3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_peps_527h_vcu_challenge_random3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_peps_527h_vcu_challenge_random3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_peps_527h_vcu_challenge_random4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_peps_527h_vcu_challenge_random4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_peps_527h_vcu_challenge_random4_is_in_range(uint8_t value);

/**
 * Pack message SSW_120h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ssw_120h_pack(
    uint8_t *dst_p,
    const struct mcu_233_ssw_120h_t *src_p,
    size_t size);

/**
 * Unpack message SSW_120h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ssw_120h_unpack(
    struct mcu_233_ssw_120h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SSW_120h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ssw_120h_init(struct mcu_233_ssw_120h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ssw_120h_ssw_knob_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ssw_120h_ssw_knob_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ssw_120h_ssw_knob_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ssw_120h_ssw_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ssw_120h_ssw_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ssw_120h_ssw_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ssw_120h_ssw_shift_pos_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ssw_120h_ssw_shift_pos_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ssw_120h_ssw_shift_pos_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ssw_120h_ssw_gear_chg_reminding_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ssw_120h_ssw_gear_chg_reminding_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ssw_120h_ssw_gear_chg_reminding_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ssw_120h_ssw_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ssw_120h_ssw_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ssw_120h_ssw_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ssw_120h_ssw_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ssw_120h_ssw_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ssw_120h_ssw_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message BMS_099h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bms_099h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bms_099h_t *src_p,
    size_t size);

/**
 * Unpack message BMS_099h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bms_099h_unpack(
    struct mcu_233_bms_099h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_099h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bms_099h_init(struct mcu_233_bms_099h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_heating_relay_cnctd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_heating_relay_cnctd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_heating_relay_cnctd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_prchrgr_relay_cnctd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_prchrgr_relay_cnctd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_prchrgr_relay_cnctd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_cc_cnctd_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_cc_cnctd_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_cc_cnctd_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_chrgng_plug_cnctd_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_chrgng_plug_cnctd_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_chrgng_plug_cnctd_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_hv_bat_wokng_md_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_hv_bat_wokng_md_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_hv_bat_wokng_md_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_heating_cooling_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_heating_cooling_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_heating_cooling_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_balancing_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_balancing_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_balancing_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_insulation_monitor_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_insulation_monitor_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_insulation_monitor_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_hv_bat_ngtv_relay_cnctd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_hv_bat_ngtv_relay_cnctd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_hv_bat_ngtv_relay_cnctd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_hv_bat_pstv_relay_cnctd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_hv_bat_pstv_relay_cnctd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_hv_bat_pstv_relay_cnctd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_099h_bms_insulation_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_insulation_resistance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_insulation_resistance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_d_cchrgr_ngtv_relay_cnctd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_d_cchrgr_ngtv_relay_cnctd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_d_cchrgr_ngtv_relay_cnctd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_d_cchrgr_pstv_relay_cnctd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_d_cchrgr_pstv_relay_cnctd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_d_cchrgr_pstv_relay_cnctd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_hv_bat_targe_tem_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_hv_bat_targe_tem_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_hv_bat_targe_tem_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_sleep_allowed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_sleep_allowed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_sleep_allowed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_kon_power_module_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_kon_power_module_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_kon_power_module_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_099h_bms_outside_total_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_outside_total_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_outside_total_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_99_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_99_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_99_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_099h_bms_99_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_099h_bms_99_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_099h_bms_99_check_sum_is_in_range(uint8_t value);

/**
 * Pack message BMS_243h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bms_243h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bms_243h_t *src_p,
    size_t size);

/**
 * Unpack message BMS_243h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bms_243h_unpack(
    struct mcu_233_bms_243h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_243h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bms_243h_init(struct mcu_233_bms_243h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_243h_bms_cc2_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_243h_bms_cc2_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_243h_bms_cc2_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_243h_bms_cc_resistance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_243h_bms_cc_resistance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_243h_bms_cc_resistance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_243h_bms_charger_mode_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_243h_bms_charger_mode_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_243h_bms_charger_mode_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_243h_bms_charge_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_243h_bms_charge_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_243h_bms_charge_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_243h_bms_charger_output_current_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_243h_bms_charger_output_current_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_243h_bms_charger_output_current_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_243h_bms_charger_output_voltage_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_243h_bms_charger_output_voltage_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_243h_bms_charger_output_voltage_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_243h_bms_dc_charge_port_pstv_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_243h_bms_dc_charge_port_pstv_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_243h_bms_dc_charge_port_pstv_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_243h_bms_dc_charge_port_ngtv_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_243h_bms_dc_charge_port_ngtv_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_243h_bms_dc_charge_port_ngtv_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_243h_bms_243_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_243h_bms_243_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_243h_bms_243_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_243h_bms_243_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_243h_bms_243_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_243h_bms_243_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message BMS_244h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bms_244h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bms_244h_t *src_p,
    size_t size);

/**
 * Unpack message BMS_244h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bms_244h_unpack(
    struct mcu_233_bms_244h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_244h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bms_244h_init(struct mcu_233_bms_244h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_244h_bms_hv_bat_chg_current_10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_244h_bms_hv_bat_chg_current_10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_244h_bms_hv_bat_chg_current_10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_244h_bms_hv_bat_dis_chg_current_max10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_244h_bms_hv_bat_dis_chg_current_max10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_244h_bms_hv_bat_dis_chg_current_max10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_244h_bms_hv_bat_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_244h_bms_hv_bat_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_244h_bms_hv_bat_crnt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_244h_bms_hv_bat_vol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_244h_bms_hv_bat_vol_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_244h_bms_hv_bat_vol_is_in_range(uint16_t value);

/**
 * Pack message BMS_246h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bms_246h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bms_246h_t *src_p,
    size_t size);

/**
 * Unpack message BMS_246h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bms_246h_unpack(
    struct mcu_233_bms_246h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_246h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bms_246h_init(struct mcu_233_bms_246h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_cell_over_vol_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_cell_over_vol_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_cell_over_vol_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_cell_under_vol_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_cell_under_vol_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_cell_under_vol_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_cutoff_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_cutoff_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_cutoff_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_thermal_runaway_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_thermal_runaway_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_thermal_runaway_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_err_lvl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_err_lvl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_err_lvl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_bat_over_dis_chg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_bat_over_dis_chg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_bat_over_dis_chg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_bat_over_chg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_bat_over_chg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_bat_over_chg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_cell_vol_diff_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_cell_vol_diff_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_cell_vol_diff_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_pack_over_vol_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_pack_over_vol_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_pack_over_vol_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_pack_under_vol_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_pack_under_vol_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_pack_under_vol_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_bat_not_match_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_bat_not_match_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_bat_not_match_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_soc_jump_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_soc_jump_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_soc_jump_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_d_cchrg_outlet_temp_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_d_cchrg_outlet_temp_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_d_cchrg_outlet_temp_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_cell_tem_diff_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_cell_tem_diff_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_cell_tem_diff_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_cell_under_tem_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_cell_under_tem_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_cell_under_tem_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_cell_over_tem_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_cell_over_tem_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_cell_over_tem_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_vcu_comm_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_vcu_comm_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_vcu_comm_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_acan_bus_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_acan_bus_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_acan_bus_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_feedback_curr_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_feedback_curr_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_feedback_curr_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_charge_curr_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_charge_curr_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_charge_curr_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_dis_chrg_curr_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_dis_chrg_curr_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_dis_chrg_curr_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hvb_relay_contactor_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hvb_relay_contactor_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hvb_relay_contactor_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hvb_relay_contactor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hvb_relay_contactor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hvb_relay_contactor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_ngtv_relay_con_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_ngtv_relay_con_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_ngtv_relay_con_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hv_bat_pstv_relay_con_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hv_bat_pstv_relay_con_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hv_bat_pstv_relay_con_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_bms_harsware_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_bms_harsware_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_bms_harsware_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_can_com_flt_with_lecu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_can_com_flt_with_lecu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_can_com_flt_with_lecu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_hvil_clsd_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_hvil_clsd_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_hvil_clsd_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_char_signal_abnormality_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_char_signal_abnormality_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_char_signal_abnormality_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_power_in_abnormality_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_power_in_abnormality_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_power_in_abnormality_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_fault_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_fault_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_fault_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_246_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_246_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_246_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_246h_bms_246_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_246h_bms_246_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_246h_bms_246_check_sum_is_in_range(uint8_t value);

/**
 * Pack message BMS_249h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bms_249h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bms_249h_t *src_p,
    size_t size);

/**
 * Unpack message BMS_249h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bms_249h_unpack(
    struct mcu_233_bms_249h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_249h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bms_249h_init(struct mcu_233_bms_249h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_249h_bms_hv_bat_avl_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_hv_bat_avl_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_hv_bat_avl_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_249h_bms_hv_bat_abs_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_hv_bat_abs_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_hv_bat_abs_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_249h_bms_hv_bat_soh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_hv_bat_soh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_hv_bat_soh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_249h_bms_charge_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_charge_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_charge_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_249h_bms_app_sec_relay_cnctd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_app_sec_relay_cnctd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_app_sec_relay_cnctd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_249h_bms_app_fir_relay_cnctd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_app_fir_relay_cnctd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_app_fir_relay_cnctd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_249h_bms_remaining_charge_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_remaining_charge_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_remaining_charge_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_249h_bms_soc_high_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_soc_high_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_soc_high_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_249h_bms_soc_low_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_soc_low_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_soc_low_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_249h_bms_extra_range_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_extra_range_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_extra_range_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_249h_bms_emerg_allow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_emerg_allow_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_emerg_allow_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_249h_bms_hv_bat_soe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_hv_bat_soe_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_hv_bat_soe_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_249h_bms_249_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_249_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_249_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_249h_bms_249_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_249h_bms_249_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_249h_bms_249_check_sum_is_in_range(uint8_t value);

/**
 * Pack message BMS_252h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bms_252h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bms_252h_t *src_p,
    size_t size);

/**
 * Unpack message BMS_252h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bms_252h_unpack(
    struct mcu_233_bms_252h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_252h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bms_252h_init(struct mcu_233_bms_252h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_252h_bms_hv_bat_chg_current_30s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_252h_bms_hv_bat_chg_current_30s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_252h_bms_hv_bat_chg_current_30s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_252h_bms_hv_bat_contn_chrg_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_252h_bms_hv_bat_contn_chrg_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_252h_bms_hv_bat_contn_chrg_crnt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_252h_bms_hv_bat_dis_chg_current_max_30s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_252h_bms_hv_bat_dis_chg_current_max_30s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_252h_bms_hv_bat_dis_chg_current_max_30s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_252h_bms_hv_bat_contn_dischrg_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_252h_bms_hv_bat_contn_dischrg_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_252h_bms_hv_bat_contn_dischrg_crnt_is_in_range(uint16_t value);

/**
 * Pack message BMS_254h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bms_254h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bms_254h_t *src_p,
    size_t size);

/**
 * Unpack message BMS_254h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bms_254h_unpack(
    struct mcu_233_bms_254h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_254h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bms_254h_init(struct mcu_233_bms_254h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t mcu_233_bms_254h_bms_total_charge_energy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_254h_bms_total_charge_energy_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_254h_bms_total_charge_energy_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t mcu_233_bms_254h_bms_total_discharge_energy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_254h_bms_total_discharge_energy_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_254h_bms_total_discharge_energy_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_254h_bms_charge_nu_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_254h_bms_charge_nu_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_254h_bms_charge_nu_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_254h_bms_total_feedback_energy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_254h_bms_total_feedback_energy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_254h_bms_total_feedback_energy_is_in_range(uint16_t value);

/**
 * Pack message BMS_PACK1_260h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bms_pack1_260h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bms_pack1_260h_t *src_p,
    size_t size);

/**
 * Unpack message BMS_PACK1_260h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bms_pack1_260h_unpack(
    struct mcu_233_bms_pack1_260h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_PACK1_260h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bms_pack1_260h_init(struct mcu_233_bms_pack1_260h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_260h_bms_hv_bat_lowest_vol_cell_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_260h_bms_hv_bat_lowest_vol_cell_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_260h_bms_hv_bat_lowest_vol_cell_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_260h_bms_hv_bat_highest_vol_cell_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_260h_bms_hv_bat_highest_vol_cell_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_260h_bms_hv_bat_highest_vol_cell_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_pack1_260h_bms_hv_bat_lowest_cell_vol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_260h_bms_hv_bat_lowest_cell_vol_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_260h_bms_hv_bat_lowest_cell_vol_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_pack1_260h_bms_hv_bat_highest_cell_vol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_260h_bms_hv_bat_highest_cell_vol_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_260h_bms_hv_bat_highest_cell_vol_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_260h_bms_260_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_260h_bms_260_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_260h_bms_260_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_260h_bms_260_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_260h_bms_260_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_260h_bms_260_check_sum_is_in_range(uint8_t value);

/**
 * Pack message BMS_PACK1_262h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bms_pack1_262h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bms_pack1_262h_t *src_p,
    size_t size);

/**
 * Unpack message BMS_PACK1_262h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bms_pack1_262h_unpack(
    struct mcu_233_bms_pack1_262h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_PACK1_262h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bms_pack1_262h_init(struct mcu_233_bms_pack1_262h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_262h_bms_hv_bat_lowest_tem_cell_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_262h_bms_hv_bat_lowest_tem_cell_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_262h_bms_hv_bat_lowest_tem_cell_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_262h_bms_hv_bat_highest_tem_cell_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_262h_bms_hv_bat_highest_tem_cell_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_262h_bms_hv_bat_highest_tem_cell_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_262h_bms_hv_bat_highest_tem_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_262h_bms_hv_bat_highest_tem_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_262h_bms_hv_bat_highest_tem_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_262h_bms_hv_bat_lowest_tem_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_262h_bms_hv_bat_lowest_tem_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_262h_bms_hv_bat_lowest_tem_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_262h_bms_hv_bat_avg_tem_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_262h_bms_hv_bat_avg_tem_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_262h_bms_hv_bat_avg_tem_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_262h_bms_262_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_262h_bms_262_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_262h_bms_262_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_262h_bms_262_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_262h_bms_262_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_262h_bms_262_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message BMS_PACK1_268h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bms_pack1_268h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bms_pack1_268h_t *src_p,
    size_t size);

/**
 * Unpack message BMS_PACK1_268h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bms_pack1_268h_unpack(
    struct mcu_233_bms_pack1_268h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_PACK1_268h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bms_pack1_268h_init(struct mcu_233_bms_pack1_268h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_268h_bms_cell_vol_serial_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_268h_bms_cell_vol_serial_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_268h_bms_cell_vol_serial_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_pack1_268h_bms_cell_vol_serial_number1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_268h_bms_cell_vol_serial_number1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_268h_bms_cell_vol_serial_number1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_pack1_268h_bms_cell_vol_serial_number2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_268h_bms_cell_vol_serial_number2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_268h_bms_cell_vol_serial_number2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_pack1_268h_bms_cell_vol_serial_number3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_268h_bms_cell_vol_serial_number3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_268h_bms_cell_vol_serial_number3_is_in_range(uint16_t value);

/**
 * Pack message BMS_PACK1_26Ch.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bms_pack1_26_ch_pack(
    uint8_t *dst_p,
    const struct mcu_233_bms_pack1_26_ch_t *src_p,
    size_t size);

/**
 * Unpack message BMS_PACK1_26Ch.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bms_pack1_26_ch_unpack(
    struct mcu_233_bms_pack1_26_ch_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_PACK1_26Ch.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bms_pack1_26_ch_init(struct mcu_233_bms_pack1_26_ch_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_pack1_26_ch_bms_cell_t_serial_number7_is_in_range(uint8_t value);

/**
 * Pack message BMS_3E1h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bms_3_e1h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bms_3_e1h_t *src_p,
    size_t size);

/**
 * Unpack message BMS_3E1h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bms_3_e1h_unpack(
    struct mcu_233_bms_3_e1h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_3E1h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bms_3_e1h_init(struct mcu_233_bms_3_e1h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_3_e1h_bms_hv_bat_maxchrg_vol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_3_e1h_bms_hv_bat_maxchrg_vol_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_3_e1h_bms_hv_bat_maxchrg_vol_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_3_e1h_bms_hv_bat_rated_vol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_3_e1h_bms_hv_bat_rated_vol_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_3_e1h_bms_hv_bat_rated_vol_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_3_e1h_bms_hv_bat_rated_capacity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_3_e1h_bms_hv_bat_rated_capacity_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_3_e1h_bms_hv_bat_rated_capacity_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bms_3_e1h_bms_hv_bat_rated_energy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bms_3_e1h_bms_hv_bat_rated_energy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bms_3_e1h_bms_hv_bat_rated_energy_is_in_range(uint16_t value);

/**
 * Pack message FVB_521h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_fvb_521h_pack(
    uint8_t *dst_p,
    const struct mcu_233_fvb_521h_t *src_p,
    size_t size);

/**
 * Unpack message FVB_521h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_fvb_521h_unpack(
    struct mcu_233_fvb_521h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FVB_521h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_fvb_521h_init(struct mcu_233_fvb_521h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fvb_521h_fvb_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fvb_521h_fvb_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fvb_521h_fvb_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fvb_521h_fvb_b_open_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fvb_521h_fvb_b_open_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fvb_521h_fvb_b_open_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fvb_521h_fvb_c_open_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fvb_521h_fvb_c_open_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fvb_521h_fvb_c_open_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fvb_521h_fvb_521_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fvb_521h_fvb_521_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fvb_521h_fvb_521_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fvb_521h_fvb_521_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fvb_521h_fvb_521_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fvb_521h_fvb_521_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message MCU_097h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_mcu_097h_pack(
    uint8_t *dst_p,
    const struct mcu_233_mcu_097h_t *src_p,
    size_t size);

/**
 * Unpack message MCU_097h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_mcu_097h_unpack(
    struct mcu_233_mcu_097h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_097h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_mcu_097h_init(struct mcu_233_mcu_097h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_097h_mcu_anti_shake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_097h_mcu_anti_shake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_097h_mcu_anti_shake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_097h_mcu_mot_spd_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_097h_mcu_mot_spd_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_097h_mcu_mot_spd_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_097h_mcu_mot_toq_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_097h_mcu_mot_toq_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_097h_mcu_mot_toq_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_097h_mcu_mot_working_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_097h_mcu_mot_working_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_097h_mcu_mot_working_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_097h_mcu_discharge_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_097h_mcu_discharge_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_097h_mcu_discharge_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_mcu_097h_mcu_mot_actu_toq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_097h_mcu_mot_actu_toq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_097h_mcu_mot_actu_toq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_mcu_097h_mcu_mot_actu_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_097h_mcu_mot_actu_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_097h_mcu_mot_actu_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_mcu_097h_mcu_mot_toq_lmt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_097h_mcu_mot_toq_lmt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_097h_mcu_mot_toq_lmt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_097h_mcu_97_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_097h_mcu_97_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_097h_mcu_97_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_097h_mcu_97_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_097h_mcu_97_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_097h_mcu_97_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message MCU_098h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_mcu_098h_pack(
    uint8_t *dst_p,
    const struct mcu_233_mcu_098h_t *src_p,
    size_t size);

/**
 * Unpack message MCU_098h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_mcu_098h_unpack(
    struct mcu_233_mcu_098h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_098h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_mcu_098h_init(struct mcu_233_mcu_098h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_mcu_098h_mcu_ac_actu_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_098h_mcu_ac_actu_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_098h_mcu_ac_actu_crnt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_098h_mcu_mot_moving_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_098h_mcu_mot_moving_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_098h_mcu_mot_moving_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_098h_mcu_98_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_098h_mcu_98_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_098h_mcu_98_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_098h_mcu_98_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_098h_mcu_98_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_098h_mcu_98_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message MCU_26Eh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_mcu_26_eh_pack(
    uint8_t *dst_p,
    const struct mcu_233_mcu_26_eh_t *src_p,
    size_t size);

/**
 * Unpack message MCU_26Eh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_mcu_26_eh_unpack(
    struct mcu_233_mcu_26_eh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_26Eh.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_mcu_26_eh_init(struct mcu_233_mcu_26_eh_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_26_eh_mcu_phase_igbt_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_26_eh_mcu_phase_igbt_max_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_26_eh_mcu_phase_igbt_max_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_26_eh_mcu_mot_actu_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_26_eh_mcu_mot_actu_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_26_eh_mcu_mot_actu_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_26_eh_mcu_ipm_radiator_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_26_eh_mcu_ipm_radiator_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_26_eh_mcu_ipm_radiator_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_mcu_26_eh_mcu_dc_actu_crnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_26_eh_mcu_dc_actu_crnt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_26_eh_mcu_dc_actu_crnt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_mcu_26_eh_mcu_dc_link_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_26_eh_mcu_dc_link_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_26_eh_mcu_dc_link_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_26_eh_mcu_26_e_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_26_eh_mcu_26_e_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_26_eh_mcu_26_e_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_26_eh_mcu_26_e_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_26_eh_mcu_26_e_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_26_eh_mcu_26_e_checksum_is_in_range(uint8_t value);

/**
 * Pack message MCU_3E5h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_mcu_3_e5h_pack(
    uint8_t *dst_p,
    const struct mcu_233_mcu_3_e5h_t *src_p,
    size_t size);

/**
 * Unpack message MCU_3E5h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_mcu_3_e5h_unpack(
    struct mcu_233_mcu_3_e5h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MCU_3E5h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_mcu_3_e5h_init(struct mcu_233_mcu_3_e5h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_dc_link_over_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_dc_link_over_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_dc_link_over_volt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_mot_over_tem_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_mot_over_tem_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_mot_over_tem_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_igbt_over_temp_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_igbt_over_temp_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_igbt_over_temp_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_rotary_transformer_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_rotary_transformer_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_rotary_transformer_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_current_hall_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_current_hall_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_current_hall_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_mot_lack_of_pha_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_mot_lack_of_pha_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_mot_lack_of_pha_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_igbt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_igbt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_igbt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_mot_over_crnt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_mot_over_crnt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_mot_over_crnt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_mot_over_temp_lim_toq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_mot_over_temp_lim_toq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_mot_over_temp_lim_toq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_can_com_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_can_com_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_can_com_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_cpld_run_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_cpld_run_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_cpld_run_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_drv_lower_arm_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_drv_lower_arm_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_drv_lower_arm_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_drv_upper_arm_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_drv_upper_arm_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_drv_upper_arm_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_hw_overl_current_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_hw_overl_current_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_hw_overl_current_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_hw_over_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_hw_over_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_hw_over_volt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_dc_link_under_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_dc_link_under_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_dc_link_under_volt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_igbt_sam_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_igbt_sam_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_igbt_sam_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_mot_er_lvl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_mot_er_lvl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_mot_er_lvl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_over_load_lag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_over_load_lag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_over_load_lag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_mot_over_spd_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_mot_over_spd_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_mot_over_spd_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_radiator_over_temp_lim_toq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_radiator_over_temp_lim_toq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_radiator_over_temp_lim_toq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_igbt_junc_ov_temp_lim_toq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_igbt_junc_ov_temp_lim_toq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_igbt_junc_ov_temp_lim_toq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_igbt_ntc_over_temp_lim_toq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_igbt_ntc_over_temp_lim_toq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_igbt_ntc_over_temp_lim_toq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_m12_under_vol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_m12_under_vol_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_m12_under_vol_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_motor_sam_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_motor_sam_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_motor_sam_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_3_e5_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_3_e5_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_3_e5_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_mcu_3_e5h_mcu_3_e5_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_mcu_3_e5h_mcu_3_e5_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_mcu_3_e5h_mcu_3_e5_check_sum_is_in_range(uint8_t value);

/**
 * Pack message EOP_1A0h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_eop_1_a0h_pack(
    uint8_t *dst_p,
    const struct mcu_233_eop_1_a0h_t *src_p,
    size_t size);

/**
 * Unpack message EOP_1A0h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_eop_1_a0h_unpack(
    struct mcu_233_eop_1_a0h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EOP_1A0h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_eop_1_a0h_init(struct mcu_233_eop_1_a0h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_eop_1_a0h_eop_motoer_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_motoer_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_motoer_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_err_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_err_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_err_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_5_v_under_volt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_5_v_under_volt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_5_v_under_volt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_5_v_over_volt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_5_v_over_volt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_5_v_over_volt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_5_v_over_cur_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_5_v_over_cur_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_5_v_over_cur_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_under_speed_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_under_speed_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_under_speed_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_zero_position_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_zero_position_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_zero_position_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_resolver_sig_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_resolver_sig_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_resolver_sig_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_under_volt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_under_volt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_under_volt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_rating_fiag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_rating_fiag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_rating_fiag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_operation_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_operation_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_operation_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_over_cur_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_over_cur_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_over_cur_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_checksum_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_checksum_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_checksum_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_over_speed_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_over_speed_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_over_speed_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_cur_offset_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_cur_offset_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_cur_offset_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_pcb_over_temp_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_pcb_over_temp_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_pcb_over_temp_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_over_volt_err_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_over_volt_err_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_over_volt_err_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_under_volt_err_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_under_volt_err_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_under_volt_err_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_temp_sensor_over_volt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_temp_sensor_over_volt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_temp_sensor_over_volt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_temp_sensor_under_volt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_temp_sensor_under_volt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_temp_sensor_under_volt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_sensor_over_volt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_sensor_over_volt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_sensor_over_volt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_sensor_under_volt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_sensor_under_volt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_sensor_under_volt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_over_volt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_over_volt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_over_volt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_power_stage_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_power_stage_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_power_stage_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_mot_bloked_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_mot_bloked_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_mot_bloked_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_dry_run_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_dry_run_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_dry_run_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_comm_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_comm_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_comm_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_ram_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_ram_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_ram_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_rom_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_rom_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_rom_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_e2_prom_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_e2_prom_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_e2_prom_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_watchdog_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_watchdog_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_watchdog_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eop_1_a0h_eop_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eop_1_a0h_eop_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eop_1_a0h_eop_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message DCDC_1F7h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_dcdc_1_f7h_pack(
    uint8_t *dst_p,
    const struct mcu_233_dcdc_1_f7h_t *src_p,
    size_t size);

/**
 * Unpack message DCDC_1F7h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_dcdc_1_f7h_unpack(
    struct mcu_233_dcdc_1_f7h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DCDC_1F7h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_dcdc_1_f7h_init(struct mcu_233_dcdc_1_f7h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_b1_hv_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_b1_hv_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_b1_hv_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_can_time_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_can_time_out_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_can_time_out_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_12_v_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_12_v_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_12_v_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_tem_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_tem_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_tem_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_md_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_md_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_md_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_sts_err_lvl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_sts_err_lvl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_sts_err_lvl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_dcdc_1_f7h_dcdc_actu_high_vol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_actu_high_vol_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_actu_high_vol_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_actu_crnt_at_hv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_actu_crnt_at_hv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_actu_crnt_at_hv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_actu_low_vol_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_actu_low_vol_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_actu_low_vol_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_actu_crnt_at_lv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_actu_crnt_at_lv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_actu_crnt_at_lv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_actu_tem_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_actu_tem_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_actu_tem_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_b1_hard_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_b1_hard_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_b1_hard_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_b1_sct_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_b1_sct_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_b1_sct_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_b1_vh_ov_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_b1_vh_ov_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_b1_vh_ov_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_b1_ocp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_b1_ocp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_b1_ocp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_b1_vout_uv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_b1_vout_uv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_b1_vout_uv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_b1_vout_ov_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_b1_vout_ov_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_b1_vout_ov_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_b1_vin_uv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_b1_vin_uv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_b1_vin_uv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_dcdc_1_f7h_dcdc_b1_vin_ov_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_dcdc_1_f7h_dcdc_b1_vin_ov_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_dcdc_1_f7h_dcdc_b1_vin_ov_is_in_range(uint8_t value);

/**
 * Pack message BOBC_2E8h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bobc_2_e8h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bobc_2_e8h_t *src_p,
    size_t size);

/**
 * Unpack message BOBC_2E8h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bobc_2_e8h_unpack(
    struct mcu_233_bobc_2_e8h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BOBC_2E8h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bobc_2_e8h_init(struct mcu_233_bobc_2_e8h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_output_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_output_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_output_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_dcac_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_dcac_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_dcac_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_output_crrt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_output_crrt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_output_crrt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_s2_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_s2_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_s2_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_pfcac_output_ov_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_pfcac_output_ov_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_pfcac_output_ov_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_pfcac_output_curr_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_pfcac_output_curr_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_pfcac_output_curr_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_llchvdc_curr_input_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_llchvdc_curr_input_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_llchvdc_curr_input_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_llchvdc_input_uv_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_llchvdc_input_uv_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_llchvdc_input_uv_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_dcac_mod_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_dcac_mod_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_dcac_mod_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_ac_charge_port_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_ac_charge_port_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_ac_charge_port_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bobc_2_e8h_bobc_charger_output_max_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_charger_output_max_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_charger_output_max_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_llclvdc_under_volt_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_llclvdc_under_volt_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_llclvdc_under_volt_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_llclvdc_over_volt_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_llclvdc_over_volt_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_llclvdc_over_volt_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_llc_volt_over_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_llc_volt_over_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_llc_volt_over_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_llc_curr_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_llc_curr_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_llc_curr_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_pfcacout_pro_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_pfcacout_pro_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_pfcacout_pro_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_pfcdc_over_volt_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_pfcdc_over_volt_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_pfcdc_over_volt_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_pfcdc_under_volt_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_pfcdc_under_volt_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_pfcdc_under_volt_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_2_e8h_bobc_a_cchg_outlet_temp_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_2_e8h_bobc_a_cchg_outlet_temp_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_2_e8h_bobc_a_cchg_outlet_temp_fault_is_in_range(uint8_t value);

/**
 * Pack message BOBC_297h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bobc_297h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bobc_297h_t *src_p,
    size_t size);

/**
 * Unpack message BOBC_297h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bobc_297h_unpack(
    struct mcu_233_bobc_297h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BOBC_297h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bobc_297h_init(struct mcu_233_bobc_297h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_pfcac_input_curr_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_pfcac_input_curr_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_pfcac_input_curr_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_charger_otp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_charger_otp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_charger_otp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_charger_hardware_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_charger_hardware_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_charger_hardware_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_inlet_electronic_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_inlet_electronic_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_inlet_electronic_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_charger_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_charger_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_charger_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_sts_err_lvl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_sts_err_lvl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_sts_err_lvl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_pfcac_input_o_volt_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_pfcac_input_o_volt_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_pfcac_input_o_volt_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_pfcac_under_volt_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_pfcac_under_volt_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_pfcac_under_volt_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_pfc_curr_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_pfc_curr_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_pfc_curr_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_chrgng_plug_cnctd_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_chrgng_plug_cnctd_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_chrgng_plug_cnctd_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_charger_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_charger_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_charger_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_kl30_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_kl30_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_kl30_under_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_charger_com_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_charger_com_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_charger_com_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_charger_input_pwm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_charger_input_pwm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_charger_input_pwm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bobc_297h_bobc_charger_dc_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_charger_dc_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_charger_dc_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_charger_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_charger_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_charger_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_bobc_297h_bobc_charger_dc_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_charger_dc_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_charger_dc_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_llchvdcop_curr_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_llchvdcop_curr_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_llchvdcop_curr_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_llchvdc_output_uv_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_llchvdc_output_uv_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_llchvdc_output_uv_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_llchvdc_over_volt_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_llchvdc_over_volt_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_llchvdc_over_volt_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_pfca_cfrequ_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_pfca_cfrequ_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_pfca_cfrequ_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bobc_297h_bobc_booking_chrg_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bobc_297h_bobc_booking_chrg_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bobc_297h_bobc_booking_chrg_sts_is_in_range(uint8_t value);

/**
 * Pack message EPS_117h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_eps_117h_pack(
    uint8_t *dst_p,
    const struct mcu_233_eps_117h_t *src_p,
    size_t size);

/**
 * Unpack message EPS_117h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_eps_117h_unpack(
    struct mcu_233_eps_117h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EPS_117h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_eps_117h_init(struct mcu_233_eps_117h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_117h_eps_str_ang_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_117h_eps_str_ang_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_117h_eps_str_ang_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_117h_eps_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_117h_eps_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_117h_eps_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_117h_eps_failure_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_117h_eps_failure_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_117h_eps_failure_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_117h_eps_calibration_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_117h_eps_calibration_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_117h_eps_calibration_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_eps_117h_eps_str_ang_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_117h_eps_str_ang_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_117h_eps_str_ang_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_eps_117h_eps_str_ang_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_117h_eps_str_ang_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_117h_eps_str_ang_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_117h_eps_fault_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_117h_eps_fault_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_117h_eps_fault_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_117h_eps_fail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_117h_eps_fail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_117h_eps_fail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_117h_eps_str_ang_spd_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_117h_eps_str_ang_spd_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_117h_eps_str_ang_spd_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_117h_eps_fault_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_117h_eps_fault_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_117h_eps_fault_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_117h_eps_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_117h_eps_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_117h_eps_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_117h_eps_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_117h_eps_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_117h_eps_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message EPS_131h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_eps_131h_pack(
    uint8_t *dst_p,
    const struct mcu_233_eps_131h_t *src_p,
    size_t size);

/**
 * Unpack message EPS_131h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_eps_131h_unpack(
    struct mcu_233_eps_131h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EPS_131h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_eps_131h_init(struct mcu_233_eps_131h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_131h_vibration_alarm_ctrl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_131h_vibration_alarm_ctrl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_131h_vibration_alarm_ctrl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_131h_eps_ctrl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_131h_eps_ctrl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_131h_eps_ctrl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_eps_131h_driver_input_trq_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_131h_driver_input_trq_value_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_131h_driver_input_trq_value_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_131h_eps_camera_ctrl_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_131h_eps_camera_ctrl_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_131h_eps_camera_ctrl_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_131h_eps_driver_intervention_steering_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_131h_eps_driver_intervention_steering_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_131h_eps_driver_intervention_steering_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_131h_eps_driver_intervention_steering_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_131h_eps_driver_intervention_steering_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_131h_eps_driver_intervention_steering_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_131h_driver_input_torque_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_131h_driver_input_torque_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_131h_driver_input_torque_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_eps_131h_eps_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_131h_eps_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_131h_eps_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_131h_eps_output_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_131h_eps_output_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_131h_eps_output_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_131h_hand_detection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_131h_hand_detection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_131h_hand_detection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_131h_eps_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_131h_eps_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_131h_eps_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_eps_131h_eps_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_eps_131h_eps_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_eps_131h_eps_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message EHB_13Ah.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ehb_13_ah_pack(
    uint8_t *dst_p,
    const struct mcu_233_ehb_13_ah_t *src_p,
    size_t size);

/**
 * Unpack message EHB_13Ah.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ehb_13_ah_unpack(
    struct mcu_233_ehb_13_ah_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EHB_13Ah.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ehb_13_ah_init(struct mcu_233_ehb_13_ah_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ah_ehb_brake_condition_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_brake_condition_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_brake_condition_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ah_ehb_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ah_ehb_s_output_rod_driver_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_s_output_rod_driver_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_s_output_rod_driver_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ah_ehb_s_output_rod_act_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_s_output_rod_act_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_s_output_rod_act_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ah_ehb_s_output_rod_driver_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_s_output_rod_driver_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_s_output_rod_driver_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_ehb_13_ah_ehb_s_output_rod_act_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_s_output_rod_act_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_s_output_rod_act_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ah_ehb_mcylinder_pressure_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_mcylinder_pressure_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_mcylinder_pressure_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_ehb_13_ah_ehb_mcylinder_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_mcylinder_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_mcylinder_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ah_ehb_ehb_diag_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_ehb_diag_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_ehb_diag_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ah_ehb_fault_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_fault_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_fault_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ah_ehb_fault_message_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_fault_message_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_fault_message_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ah_ehb_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ah_ehb_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ah_ehb_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ah_ehb_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message EHB_13Ch.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ehb_13_ch_pack(
    uint8_t *dst_p,
    const struct mcu_233_ehb_13_ch_t *src_p,
    size_t size);

/**
 * Unpack message EHB_13Ch.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ehb_13_ch_unpack(
    struct mcu_233_ehb_13_ch_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EHB_13Ch.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ehb_13_ch_init(struct mcu_233_ehb_13_ch_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_brake_pedal_applied_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_brake_pedal_applied_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_brake_pedal_applied_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_brake_pedal_applied_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_brake_pedal_applied_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_brake_pedal_applied_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_ehb_13_ch_ehb_rgn_brk_tq_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_rgn_brk_tq_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_rgn_brk_tq_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_lls_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_lls_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_lls_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_lls_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_lls_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_lls_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_double_fla_lights_rq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_double_fla_lights_rq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_double_fla_lights_rq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_brk_lights_rq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_brk_lights_rq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_brk_lights_rq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_rgn_brk_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_rgn_brk_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_rgn_brk_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_rgn_brk_tq_req_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_rgn_brk_tq_req_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_rgn_brk_tq_req_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_p_runout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_p_runout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_p_runout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_ext_req_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_ext_req_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_ext_req_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_ext_req_prio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_ext_req_prio_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_ext_req_prio_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_hmi_warning_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_hmi_warning_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_hmi_warning_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_p_runout_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_p_runout_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_p_runout_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_awb_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_awb_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_awb_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_aeb_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_aeb_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_aeb_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_eba_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_eba_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_eba_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_awb_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_awb_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_awb_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_prefill_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_prefill_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_prefill_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_ch_ehb_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_ch_ehb_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_ch_ehb_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message EHB_13Bh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ehb_13_bh_pack(
    uint8_t *dst_p,
    const struct mcu_233_ehb_13_bh_t *src_p,
    size_t size);

/**
 * Unpack message EHB_13Bh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ehb_13_bh_unpack(
    struct mcu_233_ehb_13_bh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EHB_13Bh.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ehb_13_bh_init(struct mcu_233_ehb_13_bh_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_bh_ehb_hmi_vcu_com_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_hmi_vcu_com_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_hmi_vcu_com_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_bh_ehb_epb_slv_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_epb_slv_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_epb_slv_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_bh_ehb_epb_slv_clamp_force_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_epb_slv_clamp_force_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_epb_slv_clamp_force_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_bh_ehb_epb_slv_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_epb_slv_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_epb_slv_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_bh_ehb_epb_slv_host_availability_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_epb_slv_host_availability_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_epb_slv_host_availability_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_bh_ehb_epb_slv_actuator_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_epb_slv_actuator_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_epb_slv_actuator_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_ehb_13_bh_ehb_epb_slv_clamp_force_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_epb_slv_clamp_force_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_epb_slv_clamp_force_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_bh_ehb_epb_slv_fault_message_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_epb_slv_fault_message_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_epb_slv_fault_message_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_bh_ehb_epb_slv_fail_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_epb_slv_fail_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_epb_slv_fail_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_ehb_13_bh_ehb_p_set_ebr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_p_set_ebr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_p_set_ebr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_bh_ehb_p_set_ebr_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_p_set_ebr_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_p_set_ebr_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_bh_ehb_hbc_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_hbc_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_hbc_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_bh_ehb_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ehb_13_bh_ehb_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ehb_13_bh_ehb_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ehb_13_bh_ehb_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message ESC_101h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_esc_101h_pack(
    uint8_t *dst_p,
    const struct mcu_233_esc_101h_t *src_p,
    size_t size);

/**
 * Unpack message ESC_101h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_esc_101h_unpack(
    struct mcu_233_esc_101h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESC_101h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_esc_101h_init(struct mcu_233_esc_101h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_esc_rr_whl_spd_dir_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_esc_rr_whl_spd_dir_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_esc_rr_whl_spd_dir_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_esc_rl_whl_spd_dir_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_esc_rl_whl_spd_dir_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_esc_rl_whl_spd_dir_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_esc_fr_whl_spd_dir_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_esc_fr_whl_spd_dir_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_esc_fr_whl_spd_dir_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_esc_fl_whl_spd_dir_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_esc_fl_whl_spd_dir_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_esc_fl_whl_spd_dir_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_wss_rr_counts_sum_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_wss_rr_counts_sum_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_wss_rr_counts_sum_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_wss_rl_counts_sum_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_wss_rl_counts_sum_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_wss_rl_counts_sum_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_wss_fr_counts_sum_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_wss_fr_counts_sum_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_wss_fr_counts_sum_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_wss_fl_counts_sum_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_wss_fl_counts_sum_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_wss_fl_counts_sum_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_wss_fl_counts_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_wss_fl_counts_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_wss_fl_counts_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_wss_fr_counts_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_wss_fr_counts_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_wss_fr_counts_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_wss_rl_counts_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_wss_rl_counts_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_wss_rl_counts_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_wss_rr_counts_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_wss_rr_counts_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_wss_rr_counts_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_esc_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_esc_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_esc_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_101h_esc_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_101h_esc_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_101h_esc_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message ESC_102h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_esc_102h_pack(
    uint8_t *dst_p,
    const struct mcu_233_esc_102h_t *src_p,
    size_t size);

/**
 * Unpack message ESC_102h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_esc_102h_unpack(
    struct mcu_233_esc_102h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESC_102h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_esc_102h_init(struct mcu_233_esc_102h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_esc_102h_esc_fl_whl_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_102h_esc_fl_whl_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_102h_esc_fl_whl_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_esc_102h_esc_fr_whl_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_102h_esc_fr_whl_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_102h_esc_fr_whl_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_esc_102h_esc_rl_whl_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_102h_esc_rl_whl_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_102h_esc_rl_whl_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_esc_102h_esc_rr_whl_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_102h_esc_rr_whl_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_102h_esc_rr_whl_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_102h_esc_rr_whl_spd_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_102h_esc_rr_whl_spd_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_102h_esc_rr_whl_spd_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_102h_esc_rl_whl_spd_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_102h_esc_rl_whl_spd_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_102h_esc_rl_whl_spd_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_102h_esc_fr_whl_spd_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_102h_esc_fr_whl_spd_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_102h_esc_fr_whl_spd_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_102h_esc_fl_whl_spd_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_102h_esc_fl_whl_spd_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_102h_esc_fl_whl_spd_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_102h_esc_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_102h_esc_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_102h_esc_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_102h_esc_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_102h_esc_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_102h_esc_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message ESC_104h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_esc_104h_pack(
    uint8_t *dst_p,
    const struct mcu_233_esc_104h_t *src_p,
    size_t size);

/**
 * Unpack message ESC_104h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_esc_104h_unpack(
    struct mcu_233_esc_104h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESC_104h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_esc_104h_init(struct mcu_233_esc_104h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_vdc_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_vdc_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_vdc_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_vdc_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_vdc_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_vdc_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_tcs_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_tcs_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_tcs_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_tcs_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_tcs_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_tcs_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_ebd_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_ebd_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_ebd_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_ebd_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_ebd_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_ebd_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_abs_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_abs_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_abs_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_abs_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_abs_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_abs_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_dtc_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_dtc_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_dtc_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_dtc_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_dtc_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_dtc_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_hba_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_hba_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_hba_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_hba_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_hba_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_hba_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_hhc_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_hhc_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_hhc_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_hhc_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_hhc_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_hhc_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_standstill_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_standstill_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_standstill_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_avh_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_avh_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_avh_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_avh_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_avh_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_avh_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_edc_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_edc_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_edc_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_edc_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_edc_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_edc_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_esc_switch_pushing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_esc_switch_pushing_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_esc_switch_pushing_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_esc_switch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_esc_switch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_esc_switch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_cdp_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_cdp_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_cdp_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_cdp_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_cdp_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_cdp_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_epb_park_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_epb_park_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_epb_park_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_esc_104h_esc_veh_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_veh_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_veh_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_epb_switch_pushing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_epb_switch_pushing_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_epb_switch_pushing_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_esc_diag_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_esc_diag_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_esc_diag_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_drum_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_drum_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_drum_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_brake_over_heat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_brake_over_heat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_brake_over_heat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_veh_spd_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_veh_spd_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_veh_spd_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_avh_switch_pushing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_avh_switch_pushing_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_avh_switch_pushing_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_104h_esc_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_104h_esc_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_104h_esc_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message ESC_109h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_esc_109h_pack(
    uint8_t *dst_p,
    const struct mcu_233_esc_109h_t *src_p,
    size_t size);

/**
 * Unpack message ESC_109h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_esc_109h_unpack(
    struct mcu_233_esc_109h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESC_109h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_esc_109h_init(struct mcu_233_esc_109h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_esc_109h_esc_lateral_acce_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_109h_esc_lateral_acce_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_109h_esc_lateral_acce_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_esc_109h_esc_longit_acce_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_109h_esc_longit_acce_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_109h_esc_longit_acce_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_esc_109h_esc_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_109h_esc_yaw_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_109h_esc_yaw_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_109h_esc_slope_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_109h_esc_slope_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_109h_esc_slope_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_109h_esc_yaw_rate_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_109h_esc_yaw_rate_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_109h_esc_yaw_rate_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_109h_esc_longit_acce_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_109h_esc_longit_acce_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_109h_esc_longit_acce_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_109h_esc_lateral_acce_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_109h_esc_lateral_acce_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_109h_esc_lateral_acce_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_109h_esc_slope_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_109h_esc_slope_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_109h_esc_slope_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_109h_esc_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_109h_esc_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_109h_esc_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_109h_esc_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_109h_esc_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_109h_esc_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message ESC_125h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_esc_125h_pack(
    uint8_t *dst_p,
    const struct mcu_233_esc_125h_t *src_p,
    size_t size);

/**
 * Unpack message ESC_125h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_esc_125h_unpack(
    struct mcu_233_esc_125h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESC_125h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_esc_125h_init(struct mcu_233_esc_125h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_esc_125h_esc_mcylinder_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_mcylinder_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_mcylinder_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_esc_torq_req_resp_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_torq_req_resp_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_torq_req_resp_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_esc_mcylinder_pressure_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_mcylinder_pressure_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_mcylinder_pressure_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_esc_p_est_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_p_est_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_p_est_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_esc_125h_esc_torq_req_resp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_torq_req_resp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_torq_req_resp_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_esc_fault_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_fault_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_fault_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_esc_hmi_warning_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_hmi_warning_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_hmi_warning_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_esc_double_fla_lamp_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_double_fla_lamp_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_double_fla_lamp_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_esc_bla_lamp_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_bla_lamp_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_bla_lamp_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_avh_fun_lamp_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_avh_fun_lamp_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_avh_fun_lamp_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_esc_fun_lamp_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_fun_lamp_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_fun_lamp_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_esc_off_lamp_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_off_lamp_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_off_lamp_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_esc_fault_message_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_fault_message_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_fault_message_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_esc_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_125h_esc_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_125h_esc_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_125h_esc_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message ESC_126h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_esc_126h_pack(
    uint8_t *dst_p,
    const struct mcu_233_esc_126h_t *src_p,
    size_t size);

/**
 * Unpack message ESC_126h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_esc_126h_unpack(
    struct mcu_233_esc_126h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESC_126h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_esc_126h_init(struct mcu_233_esc_126h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_tpms_rr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_tpms_rr_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_tpms_rr_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_tpms_rl_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_tpms_rl_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_tpms_rl_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_tpms_fr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_tpms_fr_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_tpms_fr_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_tpms_fl_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_tpms_fl_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_tpms_fl_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_tpms_pre_warning_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_tpms_pre_warning_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_tpms_pre_warning_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_tpms_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_tpms_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_tpms_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_tpms_dg_pre_warning_text_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_tpms_dg_pre_warning_text_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_tpms_dg_pre_warning_text_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_tpms_malfunction_lamp_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_tpms_malfunction_lamp_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_tpms_malfunction_lamp_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_tpms_reset_progress_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_tpms_reset_progress_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_tpms_reset_progress_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_tpms_pre_warning_text_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_tpms_pre_warning_text_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_tpms_pre_warning_text_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_tpms_fault_message_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_tpms_fault_message_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_tpms_fault_message_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_esc_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_esc_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_esc_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_126h_esc_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_126h_esc_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_126h_esc_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message ESC_108h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_esc_108h_pack(
    uint8_t *dst_p,
    const struct mcu_233_esc_108h_t *src_p,
    size_t size);

/**
 * Unpack message ESC_108h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_esc_108h_unpack(
    struct mcu_233_esc_108h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESC_108h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_esc_108h_init(struct mcu_233_esc_108h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_108h_esc_epb_mst_host_availability_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_epb_mst_host_availability_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_epb_mst_host_availability_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_108h_esc_epb_mst_actuator_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_epb_mst_actuator_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_epb_mst_actuator_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_108h_esc_epb_mst_clamp_force_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_epb_mst_clamp_force_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_epb_mst_clamp_force_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_108h_esc_epb_mst_repair_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_epb_mst_repair_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_epb_mst_repair_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_108h_esc_epb_mst_rollerbench_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_epb_mst_rollerbench_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_epb_mst_rollerbench_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_108h_esc_epb_mst_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_epb_mst_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_epb_mst_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_esc_108h_esc_epb_mst_clamp_force_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_epb_mst_clamp_force_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_epb_mst_clamp_force_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_108h_esc_total_brk_pres_req_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_total_brk_pres_req_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_total_brk_pres_req_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_esc_108h_esc_total_brk_pres_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_total_brk_pres_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_total_brk_pres_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_108h_esc_hbc_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_hbc_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_hbc_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_108h_esc_hbc_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_hbc_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_hbc_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_108h_esc_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_108h_esc_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_108h_esc_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_108h_esc_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message ESC_10Ch.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_esc_10_ch_pack(
    uint8_t *dst_p,
    const struct mcu_233_esc_10_ch_t *src_p,
    size_t size);

/**
 * Unpack message ESC_10Ch.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_esc_10_ch_unpack(
    struct mcu_233_esc_10_ch_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESC_10Ch.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_esc_10_ch_init(struct mcu_233_esc_10_ch_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_epb_cdp_dec_rq_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_epb_cdp_dec_rq_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_epb_cdp_dec_rq_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_epb_control_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_epb_control_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_epb_control_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_epb_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_epb_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_epb_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_esc_epb_mst_state_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_esc_epb_mst_state_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_esc_epb_mst_state_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_epb_release_without_brake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_epb_release_without_brake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_epb_release_without_brake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_epb_release_without_drv_seat_belt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_epb_release_without_drv_seat_belt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_epb_release_without_drv_seat_belt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_epb_release_without_driver_door_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_epb_release_without_driver_door_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_epb_release_without_driver_door_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_epb_high_tem_clamp_wk_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_epb_high_tem_clamp_wk_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_epb_high_tem_clamp_wk_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_epb_slip_slope_clamp_wk_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_epb_slip_slope_clamp_wk_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_epb_slip_slope_clamp_wk_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_epb_tow_mode_wk_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_epb_tow_mode_wk_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_epb_tow_mode_wk_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_epb_warning_lamp_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_epb_warning_lamp_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_epb_warning_lamp_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_epb_park_lamp_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_epb_park_lamp_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_epb_park_lamp_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_esc_epb_mst_fault_message_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_esc_epb_mst_fault_message_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_esc_epb_mst_fault_message_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_esc_epb_mst_fail_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_esc_epb_mst_fail_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_esc_epb_mst_fail_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_esc_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_esc_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_esc_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_esc_10_ch_esc_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_esc_10_ch_esc_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_esc_10_ch_esc_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message ADAS_CAM_107h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_adas_cam_107h_pack(
    uint8_t *dst_p,
    const struct mcu_233_adas_cam_107h_t *src_p,
    size_t size);

/**
 * Unpack message ADAS_CAM_107h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_adas_cam_107h_unpack(
    struct mcu_233_adas_cam_107h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ADAS_CAM_107h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_adas_cam_107h_init(struct mcu_233_adas_cam_107h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_adas_cam_107h_camera_torque_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_107h_camera_torque_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_107h_camera_torque_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_adas_cam_107h_camera_degree_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_107h_camera_degree_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_107h_camera_degree_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_107h_camera_degree_req_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_107h_camera_degree_req_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_107h_camera_degree_req_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_107h_camera_torque_req_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_107h_camera_torque_req_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_107h_camera_torque_req_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_107h_camera_sys_status_to_eps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_107h_camera_sys_status_to_eps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_107h_camera_sys_status_to_eps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_adas_cam_107h_camera_degree_spd_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_107h_camera_degree_spd_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_107h_camera_degree_spd_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_107h_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_107h_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_107h_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_107h_roling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_107h_roling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_107h_roling_counter_is_in_range(uint8_t value);

/**
 * Pack message ADAS_CAM_10Ah.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_adas_cam_10_ah_pack(
    uint8_t *dst_p,
    const struct mcu_233_adas_cam_10_ah_t *src_p,
    size_t size);

/**
 * Unpack message ADAS_CAM_10Ah.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_adas_cam_10_ah_unpack(
    struct mcu_233_adas_cam_10_ah_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ADAS_CAM_10Ah.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_adas_cam_10_ah_init(struct mcu_233_adas_cam_10_ah_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_camera_e_lka_working_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_camera_e_lka_working_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_camera_e_lka_working_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_camera_ldw_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_camera_ldw_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_camera_ldw_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_camera_blockage_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_camera_blockage_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_camera_blockage_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_camera_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_camera_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_camera_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_camera_calibrated_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_camera_calibrated_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_camera_calibrated_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_camera_r_lane_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_camera_r_lane_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_camera_r_lane_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_camera_l_lane_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_camera_l_lane_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_camera_l_lane_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_camera_e_lka_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_camera_e_lka_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_camera_e_lka_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_isa_over_speed_warning_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_isa_over_speed_warning_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_isa_over_speed_warning_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_isa_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_isa_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_isa_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_camera_hand_off_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_camera_hand_off_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_camera_hand_off_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_camera_e_lka_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_camera_e_lka_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_camera_e_lka_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_slif_limit_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_slif_limit_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_slif_limit_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_10_ah_slif_limit_value_change_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_10_ah_slif_limit_value_change_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_10_ah_slif_limit_value_change_type_is_in_range(uint8_t value);

/**
 * Pack message ADAS_CAM_118h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_adas_cam_118h_pack(
    uint8_t *dst_p,
    const struct mcu_233_adas_cam_118h_t *src_p,
    size_t size);

/**
 * Unpack message ADAS_CAM_118h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_adas_cam_118h_unpack(
    struct mcu_233_adas_cam_118h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ADAS_CAM_118h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_adas_cam_118h_init(struct mcu_233_adas_cam_118h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_118h_aeb_aeb_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_aeb_aeb_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_aeb_aeb_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_118h_aeb_eba_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_aeb_eba_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_aeb_eba_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_118h_aeb_awb_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_aeb_awb_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_aeb_awb_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_118h_aeb_pre_fill_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_aeb_pre_fill_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_aeb_pre_fill_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_118h_acc_eng_trq_req_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_acc_eng_trq_req_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_acc_eng_trq_req_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_118h_acc_decel_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_acc_decel_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_acc_decel_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_118h_aeb_veh_hld_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_aeb_veh_hld_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_aeb_veh_hld_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_118h_aeb_awb_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_aeb_awb_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_aeb_awb_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_118h_aeb_aeb_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_aeb_aeb_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_aeb_aeb_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_118h_acc_decel_req_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_acc_decel_req_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_acc_decel_req_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_adas_cam_118h_acc_eng_trq_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_acc_eng_trq_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_acc_eng_trq_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_adas_cam_118h_aeb_req_dec_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_aeb_req_dec_value_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_aeb_req_dec_value_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_118h_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_118h_roling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_118h_roling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_118h_roling_counter_is_in_range(uint8_t value);

/**
 * Pack message ADAS_CAM_140h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_adas_cam_140h_pack(
    uint8_t *dst_p,
    const struct mcu_233_adas_cam_140h_t *src_p,
    size_t size);

/**
 * Unpack message ADAS_CAM_140h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_adas_cam_140h_unpack(
    struct mcu_233_adas_cam_140h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ADAS_CAM_140h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_adas_cam_140h_init(struct mcu_233_adas_cam_140h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_acc_take_over_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_acc_take_over_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_acc_take_over_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_acc_mod_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_acc_mod_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_acc_mod_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_aeb_aeb_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_aeb_aeb_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_aeb_aeb_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_aeb_pre_warning_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_aeb_pre_warning_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_aeb_pre_warning_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_aeb_latent_warning_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_aeb_latent_warning_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_aeb_latent_warning_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_acc_obj_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_acc_obj_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_acc_obj_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_acc_tar_obj_bar_dis_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_acc_tar_obj_bar_dis_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_acc_tar_obj_bar_dis_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_acc_follow_obj_dis_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_acc_follow_obj_dis_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_acc_follow_obj_dis_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_acc_speed_set_dis_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_acc_speed_set_dis_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_acc_speed_set_dis_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_acc_ego_target_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_acc_ego_target_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_acc_ego_target_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_acc_text_in_fo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_acc_text_in_fo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_acc_text_in_fo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_acc_tim_gap_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_acc_tim_gap_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_acc_tim_gap_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_140h_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_140h_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_140h_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message ADAS_CAM_318h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_adas_cam_318h_pack(
    uint8_t *dst_p,
    const struct mcu_233_adas_cam_318h_t *src_p,
    size_t size);

/**
 * Unpack message ADAS_CAM_318h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_adas_cam_318h_unpack(
    struct mcu_233_adas_cam_318h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ADAS_CAM_318h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_adas_cam_318h_init(struct mcu_233_adas_cam_318h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_318h_adas_elk_switch_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_318h_adas_elk_switch_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_318h_adas_elk_switch_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_318h_adas_ldw_alarm_sensitivity_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_318h_adas_ldw_alarm_sensitivity_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_318h_adas_ldw_alarm_sensitivity_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_318h_adas_ldw_alarm_method_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_318h_adas_ldw_alarm_method_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_318h_adas_ldw_alarm_method_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_318h_adas_ldw_switch_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_318h_adas_ldw_switch_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_318h_adas_ldw_switch_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_318h_adas_fcw_aeb_alarm_sensitivity_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_318h_adas_fcw_aeb_alarm_sensitivity_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_318h_adas_fcw_aeb_alarm_sensitivity_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_318h_adas_fcw_aeb_switch_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_318h_adas_fcw_aeb_switch_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_318h_adas_fcw_aeb_switch_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_318h_adas_slwf_alarm_method_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_318h_adas_slwf_alarm_method_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_318h_adas_slwf_alarm_method_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_318h_adas_slwf_switch_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_318h_adas_slwf_switch_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_318h_adas_slwf_switch_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_318h_adas_slif_reminder_method_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_318h_adas_slif_reminder_method_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_318h_adas_slif_reminder_method_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_318h_adas_slif_switch_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_318h_adas_slif_switch_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_318h_adas_slif_switch_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_cam_318h_adas_elk_alarm_method_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_cam_318h_adas_elk_alarm_method_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_cam_318h_adas_elk_alarm_method_fb_is_in_range(uint8_t value);

/**
 * Pack message ADAS_RAD_070h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_adas_rad_070h_pack(
    uint8_t *dst_p,
    const struct mcu_233_adas_rad_070h_t *src_p,
    size_t size);

/**
 * Unpack message ADAS_RAD_070h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_adas_rad_070h_unpack(
    struct mcu_233_adas_rad_070h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ADAS_RAD_070h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_adas_rad_070h_init(struct mcu_233_adas_rad_070h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rad_070h_ars_mois_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rad_070h_ars_mois_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rad_070h_ars_mois_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rad_070h_ars_mois_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rad_070h_ars_mois_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rad_070h_ars_mois_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rad_070h_asr_mois_alarm_method_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rad_070h_asr_mois_alarm_method_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rad_070h_asr_mois_alarm_method_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rad_070h_asr_mois_switch_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rad_070h_asr_mois_switch_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rad_070h_asr_mois_switch_fb_is_in_range(uint8_t value);

/**
 * Pack message ADAS_RL_RAD_071h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_adas_rl_rad_071h_pack(
    uint8_t *dst_p,
    const struct mcu_233_adas_rl_rad_071h_t *src_p,
    size_t size);

/**
 * Unpack message ADAS_RL_RAD_071h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_adas_rl_rad_071h_unpack(
    struct mcu_233_adas_rl_rad_071h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ADAS_RL_RAD_071h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_adas_rl_rad_071h_init(struct mcu_233_adas_rl_rad_071h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rl_rad_071h_ars_dow_switch_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rl_rad_071h_ars_dow_switch_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rl_rad_071h_ars_dow_switch_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rl_rad_071h_ars_bsis_alarm_method_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rl_rad_071h_ars_bsis_alarm_method_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rl_rad_071h_ars_bsis_alarm_method_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rl_rad_071h_ars_bsd_lca_l_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rl_rad_071h_ars_bsd_lca_l_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rl_rad_071h_ars_bsd_lca_l_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rl_rad_071h_ars_l_bsis_l_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rl_rad_071h_ars_l_bsis_l_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rl_rad_071h_ars_l_bsis_l_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rl_rad_071h_ars_l_bsis_l_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rl_rad_071h_ars_l_bsis_l_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rl_rad_071h_ars_l_bsis_l_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rl_rad_071h_ars_bsdl_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rl_rad_071h_ars_bsdl_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rl_rad_071h_ars_bsdl_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rl_rad_071h_ars_lcal_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rl_rad_071h_ars_lcal_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rl_rad_071h_ars_lcal_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rl_rad_071h_ars_bsd_switch_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rl_rad_071h_ars_bsd_switch_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rl_rad_071h_ars_bsd_switch_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rl_rad_071h_ars_dowl_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rl_rad_071h_ars_dowl_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rl_rad_071h_ars_dowl_warning_is_in_range(uint8_t value);

/**
 * Pack message ADAS_RR_RAD_02Bh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_adas_rr_rad_02_bh_pack(
    uint8_t *dst_p,
    const struct mcu_233_adas_rr_rad_02_bh_t *src_p,
    size_t size);

/**
 * Unpack message ADAS_RR_RAD_02Bh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_adas_rr_rad_02_bh_unpack(
    struct mcu_233_adas_rr_rad_02_bh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ADAS_RR_RAD_02Bh.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_adas_rr_rad_02_bh_init(struct mcu_233_adas_rr_rad_02_bh_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rr_rad_02_bh_ars_bsd_lca_r_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rr_rad_02_bh_ars_bsd_lca_r_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rr_rad_02_bh_ars_bsd_lca_r_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rr_rad_02_bh_ars_r_bsis_r_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rr_rad_02_bh_ars_r_bsis_r_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rr_rad_02_bh_ars_r_bsis_r_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rr_rad_02_bh_ars_r_bsis_r_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rr_rad_02_bh_ars_r_bsis_r_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rr_rad_02_bh_ars_r_bsis_r_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rr_rad_02_bh_ars_bsdr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rr_rad_02_bh_ars_bsdr_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rr_rad_02_bh_ars_bsdr_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rr_rad_02_bh_ars_lcar_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rr_rad_02_bh_ars_lcar_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rr_rad_02_bh_ars_lcar_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_rr_rad_02_bh_ars_dowr_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_rr_rad_02_bh_ars_dowr_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_rr_rad_02_bh_ars_dowr_warning_is_in_range(uint8_t value);

/**
 * Pack message ADAS_NM_406h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_adas_nm_406h_pack(
    uint8_t *dst_p,
    const struct mcu_233_adas_nm_406h_t *src_p,
    size_t size);

/**
 * Unpack message ADAS_NM_406h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_adas_nm_406h_unpack(
    struct mcu_233_adas_nm_406h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ADAS_NM_406h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_adas_nm_406h_init(struct mcu_233_adas_nm_406h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_nm_406h_nm_dest_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_nm_406h_nm_dest_address_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_nm_406h_nm_dest_address_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_nm_406h_nm_sleep_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_nm_406h_nm_sleep_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_nm_406h_nm_sleep_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_nm_406h_nm_sleep_ind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_nm_406h_nm_sleep_ind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_nm_406h_nm_sleep_ind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_nm_406h_nm_limphome_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_nm_406h_nm_limphome_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_nm_406h_nm_limphome_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_nm_406h_nm_ring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_nm_406h_nm_ring_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_nm_406h_nm_ring_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_nm_406h_nm_alive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_nm_406h_nm_alive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_nm_406h_nm_alive_is_in_range(uint8_t value);

/**
 * Pack message ADAS_NM_408h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_adas_nm_408h_pack(
    uint8_t *dst_p,
    const struct mcu_233_adas_nm_408h_t *src_p,
    size_t size);

/**
 * Unpack message ADAS_NM_408h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_adas_nm_408h_unpack(
    struct mcu_233_adas_nm_408h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ADAS_NM_408h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_adas_nm_408h_init(struct mcu_233_adas_nm_408h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_nm_408h_nm_dest_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_nm_408h_nm_dest_address_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_nm_408h_nm_dest_address_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_nm_408h_nm_sleep_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_nm_408h_nm_sleep_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_nm_408h_nm_sleep_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_nm_408h_nm_sleep_ind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_nm_408h_nm_sleep_ind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_nm_408h_nm_sleep_ind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_nm_408h_nm_limphome_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_nm_408h_nm_limphome_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_nm_408h_nm_limphome_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_nm_408h_nm_ring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_nm_408h_nm_ring_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_nm_408h_nm_ring_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_adas_nm_408h_nm_alive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_adas_nm_408h_nm_alive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_adas_nm_408h_nm_alive_is_in_range(uint8_t value);

/**
 * Pack message ACU_021h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acu_021h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acu_021h_t *src_p,
    size_t size);

/**
 * Unpack message ACU_021h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acu_021h_unpack(
    struct mcu_233_acu_021h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACU_021h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acu_021h_init(struct mcu_233_acu_021h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acu_021h_air_bag_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acu_021h_air_bag_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acu_021h_air_bag_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acu_021h_crash_output_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acu_021h_crash_output_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acu_021h_crash_output_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acu_021h_acu_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acu_021h_acu_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acu_021h_acu_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acu_021h_acu_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acu_021h_acu_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acu_021h_acu_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message VCU_119h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_119h_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_119h_t *src_p,
    size_t size);

/**
 * Unpack message VCU_119h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_119h_unpack(
    struct mcu_233_vcu_119h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_119h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_119h_init(struct mcu_233_vcu_119h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_119h_vcu_gear_level_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_vcu_gear_level_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_vcu_gear_level_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_119h_vcu_gear_level_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_vcu_gear_level_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_vcu_gear_level_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_119h_vcu_brake_pedal_sts_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_vcu_brake_pedal_sts_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_vcu_brake_pedal_sts_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_119h_vcu_brake_pedal_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_vcu_brake_pedal_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_vcu_brake_pedal_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_119h_vcu_acc_pedl_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_vcu_acc_pedl_posn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_vcu_acc_pedl_posn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_119h_vcu_rgn_mot_trq_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_vcu_rgn_mot_trq_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_vcu_rgn_mot_trq_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_119h_vcu_mot_trq_rgn_lim_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_vcu_mot_trq_rgn_lim_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_vcu_mot_trq_rgn_lim_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_119h_vcu_vehicle_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_vcu_vehicle_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_vcu_vehicle_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_119h_vcu_acc_pedl_posn_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_vcu_acc_pedl_posn_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_vcu_acc_pedl_posn_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_vcu_119h_vcu_mot_trq_rgn_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_vcu_mot_trq_rgn_lim_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_vcu_mot_trq_rgn_lim_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_vcu_119h_vcu_rgn_mot_trq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_vcu_rgn_mot_trq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_vcu_rgn_mot_trq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_119h_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_119h_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_119h_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_119h_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message VCU_123h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_123h_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_123h_t *src_p,
    size_t size);

/**
 * Unpack message VCU_123h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_123h_unpack(
    struct mcu_233_vcu_123h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_123h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_123h_init(struct mcu_233_vcu_123h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_123h_tpms_reset_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_123h_tpms_reset_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_123h_tpms_reset_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_123h_bcm_drv_seat_belt_r_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_123h_bcm_drv_seat_belt_r_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_123h_bcm_drv_seat_belt_r_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_123h_bcm_driver_door_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_123h_bcm_driver_door_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_123h_bcm_driver_door_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_123h_vcu_kl15_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_123h_vcu_kl15_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_123h_vcu_kl15_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_123h_esc_off_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_123h_esc_off_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_123h_esc_off_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_123h_avh_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_123h_avh_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_123h_avh_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_123h_gw_outside_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_123h_gw_outside_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_123h_gw_outside_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_123h_vcu_mcu_fault_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_123h_vcu_mcu_fault_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_123h_vcu_mcu_fault_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_123h_gw_outside_temp_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_123h_gw_outside_temp_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_123h_gw_outside_temp_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_123h_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_123h_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_123h_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_123h_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_123h_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_123h_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message VCU_251h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_251h_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_251h_t *src_p,
    size_t size);

/**
 * Unpack message VCU_251h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_251h_unpack(
    struct mcu_233_vcu_251h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_251h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_251h_init(struct mcu_233_vcu_251h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_251h_vcu_gaspedal_override_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_251h_vcu_gaspedal_override_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_251h_vcu_gaspedal_override_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_251h_vcu_gaspedal_override_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_251h_vcu_gaspedal_override_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_251h_vcu_gaspedal_override_v_is_in_range(uint8_t value);

/**
 * Pack message VCU_201h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vcu_201h_pack(
    uint8_t *dst_p,
    const struct mcu_233_vcu_201h_t *src_p,
    size_t size);

/**
 * Unpack message VCU_201h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vcu_201h_unpack(
    struct mcu_233_vcu_201h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VCU_201h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vcu_201h_init(struct mcu_233_vcu_201h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_201h_vcu_epb_wire_control_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_201h_vcu_epb_wire_control_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_201h_vcu_epb_wire_control_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_201h_vcu_epb_ctl_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_201h_vcu_epb_ctl_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_201h_vcu_epb_ctl_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_201h_vcu_epb_tow_mode_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_201h_vcu_epb_tow_mode_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_201h_vcu_epb_tow_mode_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_vcu_201h_vcu_mot_actu_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_201h_vcu_mot_actu_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_201h_vcu_mot_actu_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_201h_vcu_epb_slv_parking_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_201h_vcu_epb_slv_parking_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_201h_vcu_epb_slv_parking_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_201h_vcu_epb_slv_parking_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_201h_vcu_epb_slv_parking_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_201h_vcu_epb_slv_parking_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_201h_driver_req_mcu_torque_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_201h_driver_req_mcu_torque_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_201h_driver_req_mcu_torque_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_vcu_201h_driver_req_mcu_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_201h_driver_req_mcu_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_201h_driver_req_mcu_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_201h_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_201h_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_201h_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vcu_201h_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vcu_201h_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vcu_201h_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message ACMM_IHU_301h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acmm_ihu_301h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acmm_ihu_301h_t *src_p,
    size_t size);

/**
 * Unpack message ACMM_IHU_301h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acmm_ihu_301h_unpack(
    struct mcu_233_acmm_ihu_301h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACMM_IHU_301h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acmm_ihu_301h_init(struct mcu_233_acmm_ihu_301h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_cycle_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_cycle_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_cycle_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_defrost_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_defrost_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_defrost_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_ac_switch_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_ac_switch_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_ac_switch_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_auto_switch_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_auto_switch_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_auto_switch_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_main_swtich_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_main_swtich_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_main_swtich_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_f_temp_auto_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_f_temp_auto_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_f_temp_auto_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_air_p_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_air_p_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_air_p_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_ptc_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_ptc_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_ptc_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_pm25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_pm25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_pm25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_out_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_out_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_out_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_maxac_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_maxac_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_maxac_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_f_blower_lvl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_f_blower_lvl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_f_blower_lvl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_f_temp_ev_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_f_temp_ev_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_f_temp_ev_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_maxptc_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_maxptc_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_maxptc_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_r_main_swtich_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_r_main_swtich_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_r_main_swtich_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_r_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_r_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_r_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_r_ac_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_r_ac_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_r_ac_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_r_ptc_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_r_ptc_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_r_ptc_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_r_temp_ev_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_r_temp_ev_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_r_temp_ev_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_r_temp_auto_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_r_temp_auto_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_r_temp_auto_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_tem_same_stu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_tem_same_stu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_tem_same_stu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_301h_acmm_r_blower_lvl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_301h_acmm_r_blower_lvl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_301h_acmm_r_blower_lvl_is_in_range(uint8_t value);

/**
 * Pack message ACMM_IHU_302h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acmm_ihu_302h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acmm_ihu_302h_t *src_p,
    size_t size);

/**
 * Unpack message ACMM_IHU_302h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acmm_ihu_302h_unpack(
    struct mcu_233_acmm_ihu_302h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACMM_IHU_302h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acmm_ihu_302h_init(struct mcu_233_acmm_ihu_302h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_302h_acmm_work_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_302h_acmm_work_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_302h_acmm_work_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_302h_ac_pressurevalue_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_302h_ac_pressurevalue_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_302h_ac_pressurevalue_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_302h_eac_work_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_302h_eac_work_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_302h_eac_work_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_302h_ptc_work_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_302h_ptc_work_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_302h_ptc_work_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ihu_302h_ac_front_ptc_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ihu_302h_ac_front_ptc_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ihu_302h_ac_front_ptc_enable_is_in_range(uint8_t value);

/**
 * Pack message ACMM_PTC_303h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acmm_ptc_303h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acmm_ptc_303h_t *src_p,
    size_t size);

/**
 * Unpack message ACMM_PTC_303h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acmm_ptc_303h_unpack(
    struct mcu_233_acmm_ptc_303h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACMM_PTC_303h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acmm_ptc_303h_init(struct mcu_233_acmm_ptc_303h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ptc_303h_front_ptc_power_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ptc_303h_front_ptc_power_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ptc_303h_front_ptc_power_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ptc_303h_front_ptc_working_mode_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ptc_303h_front_ptc_working_mode_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ptc_303h_front_ptc_working_mode_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ptc_303h_side_ptc_power_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ptc_303h_side_ptc_power_target_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ptc_303h_side_ptc_power_target_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_ptc_303h_side_ptc_working_mode_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_ptc_303h_side_ptc_working_mode_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_ptc_303h_side_ptc_working_mode_req_is_in_range(uint8_t value);

/**
 * Pack message ACMM_EAC_304h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acmm_eac_304h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acmm_eac_304h_t *src_p,
    size_t size);

/**
 * Unpack message ACMM_EAC_304h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acmm_eac_304h_unpack(
    struct mcu_233_acmm_eac_304h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACMM_EAC_304h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acmm_eac_304h_init(struct mcu_233_acmm_eac_304h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_eac_304h_ac_fr_compressor_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_eac_304h_ac_fr_compressor_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_eac_304h_ac_fr_compressor_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_eac_304h_ac_fr_max_power_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_eac_304h_ac_fr_max_power_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_eac_304h_ac_fr_max_power_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_eac_304h_ac_fr_compressor_spd_rpm_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_eac_304h_ac_fr_compressor_spd_rpm_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_eac_304h_ac_fr_compressor_spd_rpm_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_eac_304h_ac_rr_compressor_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_eac_304h_ac_rr_compressor_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_eac_304h_ac_rr_compressor_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_eac_304h_ac_rr_max_power_target_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_eac_304h_ac_rr_max_power_target_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_eac_304h_ac_rr_max_power_target_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_eac_304h_ac_rr_compressor_spd_rpm_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_eac_304h_ac_rr_compressor_spd_rpm_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_eac_304h_ac_rr_compressor_spd_rpm_req_is_in_range(uint16_t value);

/**
 * Pack message ACMM_307h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acmm_307h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acmm_307h_t *src_p,
    size_t size);

/**
 * Unpack message ACMM_307h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acmm_307h_unpack(
    struct mcu_233_acmm_307h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACMM_307h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acmm_307h_init(struct mcu_233_acmm_307h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_307h_front_ptc_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_307h_front_ptc_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_307h_front_ptc_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_307h_ptc1_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_307h_ptc1_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_307h_ptc1_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_307h_ptc2_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_307h_ptc2_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_307h_ptc2_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_307h_evaporator1_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_307h_evaporator1_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_307h_evaporator1_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_307h_evaporator2_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_307h_evaporator2_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_307h_evaporator2_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_307h_outlet_air_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_307h_outlet_air_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_307h_outlet_air_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_307h_return_air_temperature1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_307h_return_air_temperature1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_307h_return_air_temperature1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_307h_return_air_temperature2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_307h_return_air_temperature2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_307h_return_air_temperature2_is_in_range(uint8_t value);

/**
 * Pack message ACMM_308h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acmm_308h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acmm_308h_t *src_p,
    size_t size);

/**
 * Unpack message ACMM_308h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acmm_308h_unpack(
    struct mcu_233_acmm_308h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACMM_308h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acmm_308h_init(struct mcu_233_acmm_308h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_308h_acmm_in_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_308h_acmm_in_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_308h_acmm_in_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_308h_rear_ptc_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_308h_rear_ptc_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_308h_rear_ptc_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_308h_l_pm25_air_in_q_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_308h_l_pm25_air_in_q_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_308h_l_pm25_air_in_q_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_308h_f_coolg_fan_duty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_308h_f_coolg_fan_duty_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_308h_f_coolg_fan_duty_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_308h_f_coolg_fan_swtich_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_308h_f_coolg_fan_swtich_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_308h_f_coolg_fan_swtich_sts_is_in_range(uint8_t value);

/**
 * Pack message ACMM_331h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acmm_331h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acmm_331h_t *src_p,
    size_t size);

/**
 * Unpack message ACMM_331h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acmm_331h_unpack(
    struct mcu_233_acmm_331h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACMM_331h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acmm_331h_init(struct mcu_233_acmm_331h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_work_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_work_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_work_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_331h_ac_ac_press_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_ac_press_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_ac_press_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_331h_ac_ac_press_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_ac_press_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_ac_press_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_331h_ac_ac_press_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_ac_press_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_ac_press_power_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_331h_ac_compressor_actl_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_compressor_actl_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_compressor_actl_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_busoff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_busoff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_busoff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_lose_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_lose_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_lose_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_communication_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_communication_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_communication_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_lose_phase_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_lose_phase_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_lose_phase_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_motor_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_motor_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_motor_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_low_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_low_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_low_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_over_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_over_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_over_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_over_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_adc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_adc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_adc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_hv_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_hv_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_hv_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_op_drop_frequeney_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_op_drop_frequeney_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_op_drop_frequeney_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_ot_drop_frequeney_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_ot_drop_frequeney_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_ot_drop_frequeney_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_oc_drop_frequeney_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_oc_drop_frequeney_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_oc_drop_frequeney_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_drive_ic_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_drive_ic_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_drive_ic_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_over_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_over_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_over_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_331h_ac_err_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_331h_ac_err_data_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_331h_ac_err_data_is_in_range(uint8_t value);

/**
 * Pack message ACMM_332h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acmm_332h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acmm_332h_t *src_p,
    size_t size);

/**
 * Unpack message ACMM_332h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acmm_332h_unpack(
    struct mcu_233_acmm_332h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACMM_332h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acmm_332h_init(struct mcu_233_acmm_332h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_work_sta_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_work_sta_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_work_sta_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_332h_ac_ac_press_curr_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_ac_press_curr_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_ac_press_curr_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_332h_ac_ac_press_volt_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_ac_press_volt_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_ac_press_volt_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_332h_ac_ac_press_power_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_ac_press_power_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_ac_press_power_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_332h_ac_compressor_actl_spd_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_compressor_actl_spd_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_compressor_actl_spd_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_busoff_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_busoff_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_busoff_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_lose_speed_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_lose_speed_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_lose_speed_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_communication_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_communication_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_communication_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_lose_phase_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_lose_phase_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_lose_phase_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_motor_blocked_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_motor_blocked_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_motor_blocked_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_low_volt_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_low_volt_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_low_volt_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_over_volt_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_over_volt_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_over_volt_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_over_current_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_over_current_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_over_current_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_adc_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_adc_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_adc_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_hv_lock_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_hv_lock_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_hv_lock_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_op_drop_frequeney_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_op_drop_frequeney_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_op_drop_frequeney_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_ot_drop_frequeney_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_ot_drop_frequeney_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_ot_drop_frequeney_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_oc_drop_frequeney_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_oc_drop_frequeney_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_oc_drop_frequeney_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_drive_ic_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_drive_ic_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_drive_ic_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_over_temperature_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_over_temperature_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_over_temperature_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_332h_ac_err_data_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_332h_ac_err_data_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_332h_ac_err_data_rr_is_in_range(uint8_t value);

/**
 * Pack message ACMM_333h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acmm_333h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acmm_333h_t *src_p,
    size_t size);

/**
 * Unpack message ACMM_333h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acmm_333h_unpack(
    struct mcu_233_acmm_333h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACMM_333h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acmm_333h_init(struct mcu_233_acmm_333h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_work_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_work_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_work_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_333h_front_ptc_powor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_powor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_powor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_hv_disconnect_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_hv_disconnect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_hv_disconnect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_igbt_over_tem_protn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_igbt_over_tem_protn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_igbt_over_tem_protn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_otlt_over_tem_protn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_otlt_over_tem_protn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_otlt_over_tem_protn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_batt_under_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_batt_under_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_batt_under_volt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_batt_over_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_batt_over_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_batt_over_volt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_pcb_temp_snsr_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_pcb_temp_snsr_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_pcb_temp_snsr_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_hi_crnt_snsr_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_hi_crnt_snsr_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_hi_crnt_snsr_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_pcb_over_temp_protn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_pcb_over_temp_protn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_pcb_over_temp_protn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_hv_under_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_hv_under_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_hv_under_volt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_igbt_tem_snsr_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_igbt_tem_snsr_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_igbt_tem_snsr_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_otlt_tem_snsr_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_otlt_tem_snsr_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_otlt_tem_snsr_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_comm_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_comm_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_comm_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_core_or_igbt_open_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_core_or_igbt_open_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_core_or_igbt_open_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_igbt_shrt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_igbt_shrt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_igbt_shrt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_core_shrt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_core_shrt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_core_shrt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_hv_over_crnt_protn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_hv_over_crnt_protn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_hv_over_crnt_protn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_333h_front_ptc_hv_over_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_333h_front_ptc_hv_over_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_333h_front_ptc_hv_over_volt_flt_is_in_range(uint8_t value);

/**
 * Pack message ACMM_334h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acmm_334h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acmm_334h_t *src_p,
    size_t size);

/**
 * Unpack message ACMM_334h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acmm_334h_unpack(
    struct mcu_233_acmm_334h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACMM_334h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acmm_334h_init(struct mcu_233_acmm_334h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_work_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_work_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_work_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_334h_side_ptc_powor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_powor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_powor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_hv_disconnect_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_hv_disconnect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_hv_disconnect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_igbt_over_tem_protn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_igbt_over_tem_protn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_igbt_over_tem_protn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_otlt_over_tem_protn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_otlt_over_tem_protn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_otlt_over_tem_protn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_batt_under_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_batt_under_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_batt_under_volt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_batt_over_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_batt_over_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_batt_over_volt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_pcb_temp_snsr_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_pcb_temp_snsr_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_pcb_temp_snsr_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_hi_crnt_snsr_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_hi_crnt_snsr_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_hi_crnt_snsr_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_pcb_over_temp_protn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_pcb_over_temp_protn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_pcb_over_temp_protn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_hv_under_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_hv_under_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_hv_under_volt_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_igbt_tem_snsr_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_igbt_tem_snsr_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_igbt_tem_snsr_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_otlt_tem_snsr_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_otlt_tem_snsr_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_otlt_tem_snsr_flt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_comm_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_comm_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_comm_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_core_or_igbt_open_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_core_or_igbt_open_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_core_or_igbt_open_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_igbt_shrt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_igbt_shrt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_igbt_shrt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_core_shrt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_core_shrt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_core_shrt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_hv_over_crnt_protn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_hv_over_crnt_protn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_hv_over_crnt_protn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_334h_side_ptc_hv_over_volt_flt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_334h_side_ptc_hv_over_volt_flt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_334h_side_ptc_hv_over_volt_flt_is_in_range(uint8_t value);

/**
 * Pack message ACMM_FR34CC_335h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acmm_fr34_cc_335h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acmm_fr34_cc_335h_t *src_p,
    size_t size);

/**
 * Unpack message ACMM_FR34CC_335h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acmm_fr34_cc_335h_unpack(
    struct mcu_233_acmm_fr34_cc_335h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACMM_FR34CC_335h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acmm_fr34_cc_335h_init(struct mcu_233_acmm_fr34_cc_335h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_work_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_work_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_work_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_fr34_cc_335h_ac_ac_press_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_ac_press_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_ac_press_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_fr34_cc_335h_ac_ac_press_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_ac_press_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_ac_press_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_fr34_cc_335h_ac_ac_press_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_ac_press_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_ac_press_power_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_fr34_cc_335h_ac_compressor_actl_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_compressor_actl_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_compressor_actl_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_busoff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_busoff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_busoff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_lose_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_lose_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_lose_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_communication_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_communication_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_communication_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_lose_phase_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_lose_phase_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_lose_phase_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_motor_blocked_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_motor_blocked_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_motor_blocked_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_low_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_low_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_low_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_over_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_over_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_over_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_over_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_adc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_adc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_adc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_hv_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_hv_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_hv_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_op_drop_frequeney_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_op_drop_frequeney_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_op_drop_frequeney_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_ot_drop_frequeney_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_ot_drop_frequeney_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_ot_drop_frequeney_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_oc_drop_frequeney_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_oc_drop_frequeney_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_oc_drop_frequeney_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_drive_ic_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_drive_ic_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_drive_ic_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_over_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_over_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_over_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_fr34_cc_335h_ac_err_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_fr34_cc_335h_ac_err_data_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_fr34_cc_335h_ac_err_data_is_in_range(uint8_t value);

/**
 * Pack message ACMM_RR45CC_336h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_acmm_rr45_cc_336h_pack(
    uint8_t *dst_p,
    const struct mcu_233_acmm_rr45_cc_336h_t *src_p,
    size_t size);

/**
 * Unpack message ACMM_RR45CC_336h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_acmm_rr45_cc_336h_unpack(
    struct mcu_233_acmm_rr45_cc_336h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACMM_RR45CC_336h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_acmm_rr45_cc_336h_init(struct mcu_233_acmm_rr45_cc_336h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_work_sta_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_work_sta_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_work_sta_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_rr45_cc_336h_ac_ac_press_curr_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_ac_press_curr_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_ac_press_curr_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_rr45_cc_336h_ac_ac_press_volt_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_ac_press_volt_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_ac_press_volt_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_rr45_cc_336h_ac_ac_press_power_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_ac_press_power_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_ac_press_power_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t mcu_233_acmm_rr45_cc_336h_ac_compressor_actl_spd_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_compressor_actl_spd_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_compressor_actl_spd_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_busoff_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_busoff_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_busoff_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_lose_speed_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_lose_speed_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_lose_speed_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_communication_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_communication_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_communication_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_lose_phase_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_lose_phase_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_lose_phase_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_motor_blocked_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_motor_blocked_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_motor_blocked_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_low_volt_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_low_volt_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_low_volt_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_over_volt_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_over_volt_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_over_volt_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_over_current_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_over_current_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_over_current_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_adc_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_adc_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_adc_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_hv_lock_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_hv_lock_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_hv_lock_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_op_drop_frequeney_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_op_drop_frequeney_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_op_drop_frequeney_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_ot_drop_frequeney_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_ot_drop_frequeney_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_ot_drop_frequeney_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_oc_drop_frequeney_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_oc_drop_frequeney_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_oc_drop_frequeney_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_drive_ic_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_drive_ic_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_drive_ic_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_over_temperature_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_over_temperature_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_over_temperature_rr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_acmm_rr45_cc_336h_ac_err_data_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_acmm_rr45_cc_336h_ac_err_data_rr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_acmm_rr45_cc_336h_ac_err_data_rr_is_in_range(uint8_t value);

/**
 * Pack message SMM_2F4h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_smm_2_f4h_pack(
    uint8_t *dst_p,
    const struct mcu_233_smm_2_f4h_t *src_p,
    size_t size);

/**
 * Unpack message SMM_2F4h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_smm_2_f4h_unpack(
    struct mcu_233_smm_2_f4h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SMM_2F4h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_smm_2_f4h_init(struct mcu_233_smm_2_f4h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_smm_2_f4h_smm_heat_level_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_smm_2_f4h_smm_heat_level_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_smm_2_f4h_smm_heat_level_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_smm_2_f4h_smm_fan_level_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_smm_2_f4h_smm_fan_level_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_smm_2_f4h_smm_fan_level_d_is_in_range(uint8_t value);

/**
 * Pack message ICM_3FEh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_icm_3_f_eh_pack(
    uint8_t *dst_p,
    const struct mcu_233_icm_3_f_eh_t *src_p,
    size_t size);

/**
 * Unpack message ICM_3FEh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_icm_3_f_eh_unpack(
    struct mcu_233_icm_3_f_eh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ICM_3FEh.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_icm_3_f_eh_init(struct mcu_233_icm_3_f_eh_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t mcu_233_icm_3_f_eh_icm_total_odometer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_3_f_eh_icm_total_odometer_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_3_f_eh_icm_total_odometer_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_3_f_eh_ihu_icm_theme_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_3_f_eh_ihu_icm_theme_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_3_f_eh_ihu_icm_theme_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_3_f_eh_icm_set_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_3_f_eh_icm_set_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_3_f_eh_icm_set_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_3_f_eh_ps_seat_belt_r_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_3_f_eh_ps_seat_belt_r_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_3_f_eh_ps_seat_belt_r_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_3_f_eh_drv_seat_belt_r_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_3_f_eh_drv_seat_belt_r_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_3_f_eh_drv_seat_belt_r_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_3_f_eh_icm_total_odometer_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_3_f_eh_icm_total_odometer_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_3_f_eh_icm_total_odometer_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_3_f_eh_icm_backlight_luminance_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_3_f_eh_icm_backlight_luminance_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_3_f_eh_icm_backlight_luminance_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_3_f_eh_ihu_icm_unit_set_back_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_3_f_eh_ihu_icm_unit_set_back_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_3_f_eh_ihu_icm_unit_set_back_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_3_f_eh_ihu_icm_languange_set_back_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_3_f_eh_ihu_icm_languange_set_back_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_3_f_eh_ihu_icm_languange_set_back_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_3_f_eh_icm_speed_warn_maxback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_3_f_eh_icm_speed_warn_maxback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_3_f_eh_icm_speed_warn_maxback_is_in_range(uint8_t value);

/**
 * Pack message ICM_NM_412h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_icm_nm_412h_pack(
    uint8_t *dst_p,
    const struct mcu_233_icm_nm_412h_t *src_p,
    size_t size);

/**
 * Unpack message ICM_NM_412h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_icm_nm_412h_unpack(
    struct mcu_233_icm_nm_412h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ICM_NM_412h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_icm_nm_412h_init(struct mcu_233_icm_nm_412h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_nm_412h_nm_dest_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_nm_412h_nm_dest_address_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_nm_412h_nm_dest_address_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_nm_412h_nm_sleep_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_nm_412h_nm_sleep_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_nm_412h_nm_sleep_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_nm_412h_nm_sleep_ind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_nm_412h_nm_sleep_ind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_nm_412h_nm_sleep_ind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_nm_412h_nm_limphome_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_nm_412h_nm_limphome_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_nm_412h_nm_limphome_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_nm_412h_nm_ring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_nm_412h_nm_ring_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_nm_412h_nm_ring_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_icm_nm_412h_nm_alive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_icm_nm_412h_nm_alive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_icm_nm_412h_nm_alive_is_in_range(uint8_t value);

/**
 * Pack message VSP_283h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_vsp_283h_pack(
    uint8_t *dst_p,
    const struct mcu_233_vsp_283h_t *src_p,
    size_t size);

/**
 * Unpack message VSP_283h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_vsp_283h_unpack(
    struct mcu_233_vsp_283h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VSP_283h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_vsp_283h_init(struct mcu_233_vsp_283h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_vsp_283h_vsp_ppd_switch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_vsp_283h_vsp_ppd_switch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_vsp_283h_vsp_ppd_switch_status_is_in_range(uint8_t value);

/**
 * Pack message WCM_347h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_wcm_347h_pack(
    uint8_t *dst_p,
    const struct mcu_233_wcm_347h_t *src_p,
    size_t size);

/**
 * Unpack message WCM_347h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_wcm_347h_unpack(
    struct mcu_233_wcm_347h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WCM_347h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_wcm_347h_init(struct mcu_233_wcm_347h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_wcm_347h_wpc_phone_detection_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_wcm_347h_wpc_phone_detection_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_wcm_347h_wpc_phone_detection_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_wcm_347h_wpc_wireless_charging_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_wcm_347h_wpc_wireless_charging_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_wcm_347h_wpc_wireless_charging_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_wcm_347h_wpc_wireless_charging_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_wcm_347h_wpc_wireless_charging_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_wcm_347h_wpc_wireless_charging_set_status_is_in_range(uint8_t value);

/**
 * Pack message BCM_211h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bcm_211h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bcm_211h_t *src_p,
    size_t size);

/**
 * Unpack message BCM_211h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bcm_211h_unpack(
    struct mcu_233_bcm_211h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM_211h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bcm_211h_init(struct mcu_233_bcm_211h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_peps_system_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_peps_system_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_peps_system_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_power_mode_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_power_mode_v_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_power_mode_v_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_sys_power_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_sys_power_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_sys_power_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_power_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_power_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_power_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_pe_door_lock_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_pe_door_lock_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_pe_door_lock_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_peps_key_serch_fail_ied_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_peps_key_serch_fail_ied_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_peps_key_serch_fail_ied_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_tbox_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_tbox_response_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_tbox_response_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_key_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_key_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_key_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_key_command_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_key_command_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_key_command_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_key_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_key_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_key_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_ble_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_ble_response_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_ble_response_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_immo_fail_indication_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_immo_fail_indication_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_immo_fail_indication_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_right_pe_sw_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_right_pe_sw_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_right_pe_sw_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_left_pe_sw_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_left_pe_sw_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_left_pe_sw_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_ssb_sw1_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_ssb_sw1_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_ssb_sw1_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_ssb_sw2_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_ssb_sw2_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_ssb_sw2_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_st_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_st_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_st_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_ign2_relay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_ign2_relay_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_ign2_relay_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_ign1_relay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_ign1_relay_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_ign1_relay_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_normal_close_brake_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_normal_close_brake_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_normal_close_brake_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_normally_open_brake_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_normally_open_brake_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_normally_open_brake_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_brake_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_brake_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_brake_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_remote_forbidden_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_remote_forbidden_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_remote_forbidden_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_auth_respone_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_auth_respone_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_auth_respone_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_auth_stus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_auth_stus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_auth_stus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_ign2_relay_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_ign2_relay_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_ign2_relay_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_211h_bcm_ign1_relay_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_211h_bcm_ign1_relay_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_211h_bcm_ign1_relay_fb_is_in_range(uint8_t value);

/**
 * Pack message BCM_105h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bcm_105h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bcm_105h_t *src_p,
    size_t size);

/**
 * Unpack message BCM_105h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bcm_105h_unpack(
    struct mcu_233_bcm_105h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM_105h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bcm_105h_init(struct mcu_233_bcm_105h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_wiper_prk_sw_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_wiper_prk_sw_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_wiper_prk_sw_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_washing_sw_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_washing_sw_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_washing_sw_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_wiper_sw_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_wiper_sw_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_wiper_sw_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_master_sw_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_master_sw_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_master_sw_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_rear_fog_lamp_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_rear_fog_lamp_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_rear_fog_lamp_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_front_fog_lamp_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_front_fog_lamp_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_front_fog_lamp_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_head_light_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_head_light_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_head_light_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_dimmer_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_dimmer_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_dimmer_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_indicator_sw_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_indicator_sw_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_indicator_sw_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_bulb_failure_fb_rr_turn_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_bulb_failure_fb_rr_turn_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_bulb_failure_fb_rr_turn_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_bulb_failure_fb_rl_turn_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_bulb_failure_fb_rl_turn_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_bulb_failure_fb_rl_turn_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_bulb_failure_fb_fr_turn_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_bulb_failure_fb_fr_turn_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_bulb_failure_fb_fr_turn_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_bulb_failure_fb_fl_turn_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_bulb_failure_fb_fl_turn_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_bulb_failure_fb_fl_turn_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_drv_door_lock_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_drv_door_lock_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_drv_door_lock_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_charging_dock_lock_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_charging_dock_lock_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_charging_dock_lock_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_horn_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_horn_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_horn_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_p_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_p_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_p_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_fr_door_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_fr_door_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_fr_door_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_fl_door_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_fl_door_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_fl_door_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_hood_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_hood_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_hood_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_tail_door_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_tail_door_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_tail_door_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_right_sliding_door_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_right_sliding_door_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_right_sliding_door_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_left_sliding_door_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_left_sliding_door_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_left_sliding_door_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_battery_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_battery_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_battery_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_crash_input_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_crash_input_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_crash_input_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_closing_car_lock_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_closing_car_lock_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_closing_car_lock_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_vehicle_power_mode_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_vehicle_power_mode_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_vehicle_power_mode_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_lock_car_close_window_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_lock_car_close_window_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_lock_car_close_window_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_ventilation_sw_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_ventilation_sw_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_ventilation_sw_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_leaving_car_lock_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_leaving_car_lock_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_leaving_car_lock_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_door_lock_set_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_door_lock_set_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_door_lock_set_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_lock_prompt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_lock_prompt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_lock_prompt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_105h_bcm_auto_driving_lock_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_105h_bcm_auto_driving_lock_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_105h_bcm_auto_driving_lock_sts_is_in_range(uint8_t value);

/**
 * Pack message BCM_112h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bcm_112h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bcm_112h_t *src_p,
    size_t size);

/**
 * Unpack message BCM_112h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bcm_112h_unpack(
    struct mcu_233_bcm_112h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM_112h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bcm_112h_init(struct mcu_233_bcm_112h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_112h_bcm_solar_right_passg_side_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_112h_bcm_solar_right_passg_side_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_112h_bcm_solar_right_passg_side_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_112h_bcm_solar_left_driveside_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_112h_bcm_solar_left_driveside_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_112h_bcm_solar_left_driveside_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_112h_bcm_car_search_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_112h_bcm_car_search_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_112h_bcm_car_search_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_112h_bcm_car_search_type_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_112h_bcm_car_search_type_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_112h_bcm_car_search_type_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_112h_bcm_anti_theft_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_112h_bcm_anti_theft_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_112h_bcm_anti_theft_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_112h_bcm_crash_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_112h_bcm_crash_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_112h_bcm_crash_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_112h_bcm_light_sensor_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_112h_bcm_light_sensor_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_112h_bcm_light_sensor_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_112h_bcm_follow_me_home_fedb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_112h_bcm_follow_me_home_fedb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_112h_bcm_follow_me_home_fedb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_112h_bcm_follow_me_car_fedb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_112h_bcm_follow_me_car_fedb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_112h_bcm_follow_me_car_fedb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_112h_bcm_front_washing_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_112h_bcm_front_washing_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_112h_bcm_front_washing_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_112h_bcm_front_wiper_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_112h_bcm_front_wiper_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_112h_bcm_front_wiper_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_112h_bcm_fail_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_112h_bcm_fail_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_112h_bcm_fail_code_is_in_range(uint8_t value);

/**
 * Pack message BCM_113h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bcm_113h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bcm_113h_t *src_p,
    size_t size);

/**
 * Unpack message BCM_113h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bcm_113h_unpack(
    struct mcu_233_bcm_113h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM_113h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bcm_113h_init(struct mcu_233_bcm_113h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_fl_wind_dwn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_fl_wind_dwn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_fl_wind_dwn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_fl_wind_up_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_fl_wind_up_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_fl_wind_up_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_passenger_right_mirror_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_passenger_right_mirror_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_passenger_right_mirror_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_driver_rf_wind_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_driver_rf_wind_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_driver_rf_wind_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_driver_lf_wind_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_driver_lf_wind_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_driver_lf_wind_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_mirror_fold_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_mirror_fold_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_mirror_fold_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_right_mirror_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_right_mirror_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_right_mirror_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_left_mirror_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_left_mirror_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_left_mirror_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_front_win_ctrl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_front_win_ctrl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_front_win_ctrl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_fr_wind_dwn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_fr_wind_dwn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_fr_wind_dwn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_fr_wind_up_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_fr_wind_up_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_fr_wind_up_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_mirror_stretch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_mirror_stretch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_mirror_stretch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_rv_mirror_common_port_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_rv_mirror_common_port_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_rv_mirror_common_port_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_right_rv_mirror_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_right_rv_mirror_y_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_right_rv_mirror_y_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_right_rv_mirror_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_right_rv_mirror_x_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_right_rv_mirror_x_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_left_rv_mirror_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_left_rv_mirror_y_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_left_rv_mirror_y_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_left_rv_mirror_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_left_rv_mirror_x_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_left_rv_mirror_x_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_mirror_adjust_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_mirror_adjust_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_mirror_adjust_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_fr_win_motor_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_fr_win_motor_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_fr_win_motor_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_fl_win_motor_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_fl_win_motor_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_fl_win_motor_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_mirror_fold_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_mirror_fold_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_mirror_fold_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_mirror_retract_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_mirror_retract_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_mirror_retract_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_fl_win_hall_sensor1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_fl_win_hall_sensor1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_fl_win_hall_sensor1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_fl_win_hall_sensor2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_fl_win_hall_sensor2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_fl_win_hall_sensor2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_fr_win_hall_sensor1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_fr_win_hall_sensor1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_fr_win_hall_sensor1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_113h_bcm_fr_win_hall_sensor2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_113h_bcm_fr_win_hall_sensor2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_113h_bcm_fr_win_hall_sensor2_is_in_range(uint8_t value);

/**
 * Pack message BCM_111h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bcm_111h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bcm_111h_t *src_p,
    size_t size);

/**
 * Unpack message BCM_111h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bcm_111h_unpack(
    struct mcu_233_bcm_111h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM_111h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bcm_111h_init(struct mcu_233_bcm_111h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_high_beam_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_high_beam_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_high_beam_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_central_pilot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_central_pilot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_central_pilot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_charging_green_pilot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_charging_green_pilot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_charging_green_pilot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_charging_red_pilot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_charging_red_pilot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_charging_red_pilot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_hazard_pilot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_hazard_pilot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_hazard_pilot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_rear_fog_pilot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_rear_fog_pilot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_rear_fog_pilot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_right_mirror_pilot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_right_mirror_pilot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_right_mirror_pilot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_left_mirror_pilot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_left_mirror_pilot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_left_mirror_pilot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_right_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_right_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_right_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_left_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_left_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_left_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_ip_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_ip_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_ip_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_atmospheres_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_atmospheres_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_atmospheres_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_reading_light_power_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_reading_light_power_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_reading_light_power_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_low_beam_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_low_beam_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_low_beam_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_high_braking_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_high_braking_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_high_braking_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_right_braking_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_right_braking_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_right_braking_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_left_braking_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_left_braking_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_left_braking_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_door_handle_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_door_handle_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_door_handle_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_license_plate_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_license_plate_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_license_plate_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_rear_pos_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_rear_pos_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_rear_pos_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_front_pos_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_front_pos_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_front_pos_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_right_backup_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_right_backup_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_right_backup_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_left_backup_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_left_backup_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_left_backup_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_right_rear_fog_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_right_rear_fog_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_right_rear_fog_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_left_rear_fog_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_left_rear_fog_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_left_rear_fog_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_front_fog_lamp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_front_fog_lamp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_front_fog_lamp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_back_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_back_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_back_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_front_door_cent_unlock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_front_door_cent_unlock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_front_door_cent_unlock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_parking_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_parking_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_parking_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_logo_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_logo_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_logo_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_day_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_day_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_day_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_right_turn_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_right_turn_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_right_turn_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_left_turn_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_left_turn_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_left_turn_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_wheel_heat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_wheel_heat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_wheel_heat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_horn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_horn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_horn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_washing_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_washing_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_washing_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_charging_dock_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_charging_dock_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_charging_dock_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_charging_dock_unlock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_charging_dock_unlock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_charging_dock_unlock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_mr_door_cent_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_mr_door_cent_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_mr_door_cent_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_mr_door_cent_unlock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_mr_door_cent_unlock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_mr_door_cent_unlock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_front_door_cent_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_front_door_cent_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_front_door_cent_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_save_pow_do_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_save_pow_do_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_save_pow_do_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_charging_awaken_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_charging_awaken_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_charging_awaken_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_hall_sensor_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_hall_sensor_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_hall_sensor_power_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_charging_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_charging_output_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_charging_output_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_wipers_low_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_wipers_low_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_wipers_low_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_wipers_high_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_wipers_high_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_wipers_high_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_mirror_heat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_mirror_heat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_mirror_heat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_windscreen_heat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_windscreen_heat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_windscreen_heat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_child_cent_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_child_cent_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_child_cent_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_child_cent_un_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_child_cent_un_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_child_cent_un_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_welcome_silent_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_welcome_silent_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_welcome_silent_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_welcome_feature_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_welcome_feature_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_welcome_feature_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_hazard_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_hazard_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_hazard_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_111h_bcm_escl_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_111h_bcm_escl_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_111h_bcm_escl_power_is_in_range(uint8_t value);

/**
 * Pack message BCM_114h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bcm_114h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bcm_114h_t *src_p,
    size_t size);

/**
 * Unpack message BCM_114h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bcm_114h_unpack(
    struct mcu_233_bcm_114h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM_114h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bcm_114h_init(struct mcu_233_bcm_114h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_114h_bcm_fail_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_114h_bcm_fail_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_114h_bcm_fail_code_is_in_range(uint8_t value);

/**
 * Pack message BCM_212h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bcm_212h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bcm_212h_t *src_p,
    size_t size);

/**
 * Unpack message BCM_212h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bcm_212h_unpack(
    struct mcu_233_bcm_212h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM_212h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bcm_212h_init(struct mcu_233_bcm_212h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_212h_bcm_ssb_sw_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_212h_bcm_ssb_sw_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_212h_bcm_ssb_sw_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_212h_bcm_peps_power_relay_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_212h_bcm_peps_power_relay_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_212h_bcm_peps_power_relay_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_212h_bcm_indication_start_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_212h_bcm_indication_start_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_212h_bcm_indication_start_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_212h_bcm_keybattery_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_212h_bcm_keybattery_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_212h_bcm_keybattery_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_212h_bcm_battery_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_212h_bcm_battery_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_212h_bcm_battery_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_212h_bcm_peps_key_in_car_ind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_212h_bcm_peps_key_in_car_ind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_212h_bcm_peps_key_in_car_ind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_212h_bcm_peps_not_off_key_not_in_car_ind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_212h_bcm_peps_not_off_key_not_in_car_ind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_212h_bcm_peps_not_off_key_not_in_car_ind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_212h_bcm_peps_key_closer_ind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_212h_bcm_peps_key_closer_ind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_212h_bcm_peps_key_closer_ind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_212h_bcm_pe_lock_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_212h_bcm_pe_lock_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_212h_bcm_pe_lock_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_212h_bcm_escl_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_212h_bcm_escl_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_212h_bcm_escl_warning_is_in_range(uint8_t value);

/**
 * Pack message BCM_VCU_Auth_022h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bcm_vcu_auth_022h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bcm_vcu_auth_022h_t *src_p,
    size_t size);

/**
 * Unpack message BCM_VCU_Auth_022h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bcm_vcu_auth_022h_unpack(
    struct mcu_233_bcm_vcu_auth_022h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM_VCU_Auth_022h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bcm_vcu_auth_022h_init(struct mcu_233_bcm_vcu_auth_022h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t mcu_233_bcm_vcu_auth_022h_bcm_immobilizer_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_vcu_auth_022h_bcm_immobilizer_info_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_vcu_auth_022h_bcm_immobilizer_info_is_in_range(uint32_t value);

/**
 * Pack message BCM_TBOX_Auth_024h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bcm_tbox_auth_024h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bcm_tbox_auth_024h_t *src_p,
    size_t size);

/**
 * Unpack message BCM_TBOX_Auth_024h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bcm_tbox_auth_024h_unpack(
    struct mcu_233_bcm_tbox_auth_024h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM_TBOX_Auth_024h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bcm_tbox_auth_024h_init(struct mcu_233_bcm_tbox_auth_024h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t mcu_233_bcm_tbox_auth_024h_bcm_remote_chall_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_tbox_auth_024h_bcm_remote_chall_code_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_tbox_auth_024h_bcm_remote_chall_code_is_in_range(uint64_t value);

/**
 * Pack message BCM_ESCL_Auth_025h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bcm_escl_auth_025h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bcm_escl_auth_025h_t *src_p,
    size_t size);

/**
 * Unpack message BCM_ESCL_Auth_025h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bcm_escl_auth_025h_unpack(
    struct mcu_233_bcm_escl_auth_025h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM_ESCL_Auth_025h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bcm_escl_auth_025h_init(struct mcu_233_bcm_escl_auth_025h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t mcu_233_bcm_escl_auth_025h_bcm_escl_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_escl_auth_025h_bcm_escl_data_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_escl_auth_025h_bcm_escl_data_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_escl_auth_025h_bcm_escl_requst_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_escl_auth_025h_bcm_escl_requst_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_escl_auth_025h_bcm_escl_requst_is_in_range(uint8_t value);

/**
 * Pack message BCM_NM_404h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_bcm_nm_404h_pack(
    uint8_t *dst_p,
    const struct mcu_233_bcm_nm_404h_t *src_p,
    size_t size);

/**
 * Unpack message BCM_NM_404h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_bcm_nm_404h_unpack(
    struct mcu_233_bcm_nm_404h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM_NM_404h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_bcm_nm_404h_init(struct mcu_233_bcm_nm_404h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_nm_404h_nm_dest_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_nm_404h_nm_dest_address_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_nm_404h_nm_dest_address_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_nm_404h_nm_sleep_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_nm_404h_nm_sleep_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_nm_404h_nm_sleep_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_nm_404h_nm_sleep_ind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_nm_404h_nm_sleep_ind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_nm_404h_nm_sleep_ind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_nm_404h_nm_limphome_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_nm_404h_nm_limphome_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_nm_404h_nm_limphome_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_nm_404h_nm_ring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_nm_404h_nm_ring_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_nm_404h_nm_ring_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_bcm_nm_404h_nm_alive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_bcm_nm_404h_nm_alive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_bcm_nm_404h_nm_alive_is_in_range(uint8_t value);

/**
 * Pack message FSW_3C1h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_fsw_3_c1h_pack(
    uint8_t *dst_p,
    const struct mcu_233_fsw_3_c1h_t *src_p,
    size_t size);

/**
 * Unpack message FSW_3C1h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_fsw_3_c1h_unpack(
    struct mcu_233_fsw_3_c1h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FSW_3C1h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_fsw_3_c1h_init(struct mcu_233_fsw_3_c1h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_r_wheel_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_r_wheel_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_r_wheel_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_r_right_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_r_right_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_r_right_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_r_left_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_r_left_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_r_left_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_r_wheel_down_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_r_wheel_down_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_r_wheel_down_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_r_wheel_up_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_r_wheel_up_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_r_wheel_up_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_r_func_sw2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_r_func_sw2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_r_func_sw2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_r_func_sw1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_r_func_sw1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_r_func_sw1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_l_acc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_l_acc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_l_acc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_l_gap_plus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_l_gap_plus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_l_gap_plus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_l_gap_minus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_l_gap_minus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_l_gap_minus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_l_speed_minus_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_l_speed_minus_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_l_speed_minus_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_l_speed_plus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_l_speed_plus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_l_speed_plus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_l_func_sw2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_l_func_sw2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_l_func_sw2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_fsw_3_c1h_mfs_l_func_sw1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_fsw_3_c1h_mfs_l_func_sw1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_fsw_3_c1h_mfs_l_func_sw1_is_in_range(uint8_t value);

/**
 * Pack message SWH_State_3C2h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_swh_state_3_c2h_pack(
    uint8_t *dst_p,
    const struct mcu_233_swh_state_3_c2h_t *src_p,
    size_t size);

/**
 * Unpack message SWH_State_3C2h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_swh_state_3_c2h_unpack(
    struct mcu_233_swh_state_3_c2h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SWH_State_3C2h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_swh_state_3_c2h_init(struct mcu_233_swh_state_3_c2h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_swh_state_3_c2h_swh_steer_wheel_heatg_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_swh_state_3_c2h_swh_steer_wheel_heatg_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_swh_state_3_c2h_swh_steer_wheel_heatg_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_swh_state_3_c2h_swh_steer_wheel_heatg_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_swh_state_3_c2h_swh_steer_wheel_heatg_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_swh_state_3_c2h_swh_steer_wheel_heatg_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_swh_state_3_c2h_swh_response_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_swh_state_3_c2h_swh_response_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_swh_state_3_c2h_swh_response_error_is_in_range(uint8_t value);

/**
 * Pack message IHU_ACMM_2F9h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ihu_acmm_2_f9h_pack(
    uint8_t *dst_p,
    const struct mcu_233_ihu_acmm_2_f9h_t *src_p,
    size_t size);

/**
 * Unpack message IHU_ACMM_2F9h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ihu_acmm_2_f9h_unpack(
    struct mcu_233_ihu_acmm_2_f9h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IHU_ACMM_2F9h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ihu_acmm_2_f9h_init(struct mcu_233_ihu_acmm_2_f9h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_defrost_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_defrost_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_defrost_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_ac_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_ac_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_ac_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_auto_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_auto_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_auto_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_main_swtich_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_main_swtich_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_main_swtich_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_f_blower_lvl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_f_blower_lvl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_f_blower_lvl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_mode_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_mode_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_mode_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_cycle_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_cycle_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_cycle_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_f_temp_set_ev_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_f_temp_set_ev_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_f_temp_set_ev_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_f_temp_set_auto_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_f_temp_set_auto_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_f_temp_set_auto_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_r_ptc_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_r_ptc_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_r_ptc_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_r_main_swtich_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_r_main_swtich_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_r_main_swtich_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_f_ptc_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_f_ptc_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_f_ptc_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_r_temp_set_auto_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_r_temp_set_auto_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_r_temp_set_auto_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_r_mode_swtich_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_r_mode_swtich_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_r_mode_swtich_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_r_blower_lvl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_r_blower_lvl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_r_blower_lvl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_r_temp_set_ev_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_r_temp_set_ev_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_r_temp_set_ev_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_r_ac_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_r_ac_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_r_ac_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_maxptc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_maxptc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_maxptc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_maxac_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_maxac_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_maxac_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_key_airpurification_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_key_airpurification_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_key_airpurification_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_acmm_2_f9h_ihu_tem_same_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_acmm_2_f9h_ihu_tem_same_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_acmm_2_f9h_ihu_tem_same_set_is_in_range(uint8_t value);

/**
 * Pack message IHU_VCU_2FAh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ihu_vcu_2_f_ah_pack(
    uint8_t *dst_p,
    const struct mcu_233_ihu_vcu_2_f_ah_t *src_p,
    size_t size);

/**
 * Unpack message IHU_VCU_2FAh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ihu_vcu_2_f_ah_unpack(
    struct mcu_233_ihu_vcu_2_f_ah_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IHU_VCU_2FAh.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ihu_vcu_2_f_ah_init(struct mcu_233_ihu_vcu_2_f_ah_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_avh_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_avh_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_avh_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_esc_off_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_esc_off_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_esc_off_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_epb_tow_mode_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_epb_tow_mode_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_epb_tow_mode_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_tpms_reset_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_tpms_reset_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_tpms_reset_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_vsp_sound_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_vsp_sound_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_vsp_sound_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_slow_charging_preservation_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_slow_charging_preservation_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_slow_charging_preservation_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_external_discharge_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_external_discharge_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_external_discharge_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_worm_mode_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_worm_mode_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_worm_mode_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_driving_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_driving_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_driving_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_wcm_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_wcm_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_wcm_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_epb_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_epb_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_epb_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_energy_recovery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_energy_recovery_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_energy_recovery_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_charge_limit_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_charge_limit_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_charge_limit_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_vcu_2_f_ah_ihu_pow_bat_deep_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_vcu_2_f_ah_ihu_pow_bat_deep_discharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_vcu_2_f_ah_ihu_pow_bat_deep_discharge_is_in_range(uint8_t value);

/**
 * Pack message IHU_ICM_2FFh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ihu_icm_2_f_fh_pack(
    uint8_t *dst_p,
    const struct mcu_233_ihu_icm_2_f_fh_t *src_p,
    size_t size);

/**
 * Unpack message IHU_ICM_2FFh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ihu_icm_2_f_fh_unpack(
    struct mcu_233_ihu_icm_2_f_fh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IHU_ICM_2FFh.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ihu_icm_2_f_fh_init(struct mcu_233_ihu_icm_2_f_fh_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_speed_warn_max_speed_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_speed_warn_max_speed_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_speed_warn_max_speed_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_resi_milg_mode_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_resi_milg_mode_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_resi_milg_mode_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_theme_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_theme_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_theme_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_fatigue_driving_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_fatigue_driving_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_fatigue_driving_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_overspeed_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_overspeed_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_overspeed_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_alarm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_alarm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_alarm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_distract_lvl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_distract_lvl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_distract_lvl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_fatigued_lvl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_fatigued_lvl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_fatigued_lvl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_fatigue_driving_warnset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_fatigue_driving_warnset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_fatigue_driving_warnset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_unit_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_unit_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_unit_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_languange_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_languange_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_languange_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_icm_2_f_fh_ihu_icm_dms_valid_is_in_range(uint8_t value);

/**
 * Pack message IHU_ADAS_2FC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ihu_adas_2_fc_pack(
    uint8_t *dst_p,
    const struct mcu_233_ihu_adas_2_fc_t *src_p,
    size_t size);

/**
 * Unpack message IHU_ADAS_2FC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ihu_adas_2_fc_unpack(
    struct mcu_233_ihu_adas_2_fc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IHU_ADAS_2FC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ihu_adas_2_fc_init(struct mcu_233_ihu_adas_2_fc_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_elk_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_elk_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_elk_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_ldw_alarm_sensitivity_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_ldw_alarm_sensitivity_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_ldw_alarm_sensitivity_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_ldw_alarm_method_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_ldw_alarm_method_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_ldw_alarm_method_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_ldw_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_ldw_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_ldw_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_fcw_aeb_alarm_sensitivity_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_fcw_aeb_alarm_sensitivity_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_fcw_aeb_alarm_sensitivity_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_fcw_aeb_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_fcw_aeb_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_fcw_aeb_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_slwf_alarm_method_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_slwf_alarm_method_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_slwf_alarm_method_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_mois_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_mois_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_mois_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_slwf_alarm_method_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_slwf_alarm_method_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_slwf_alarm_method_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_slwf_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_slwf_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_slwf_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_slif_reminder_method_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_slif_reminder_method_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_slif_reminder_method_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_slif_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_slif_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_slif_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_elk_alarm_method_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_elk_alarm_method_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_elk_alarm_method_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_bsd_lcw_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_bsd_lcw_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_bsd_lcw_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_dow_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_dow_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_dow_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_bsis_alarm_method_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_bsis_alarm_method_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_bsis_alarm_method_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_adas_2_fc_ihu_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_adas_2_fc_ihu_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_adas_2_fc_ihu_rolling_counter_is_in_range(uint8_t value);

/**
 * Pack message IHU_TIME_3E3h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ihu_time_3_e3h_pack(
    uint8_t *dst_p,
    const struct mcu_233_ihu_time_3_e3h_t *src_p,
    size_t size);

/**
 * Unpack message IHU_TIME_3E3h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ihu_time_3_e3h_unpack(
    struct mcu_233_ihu_time_3_e3h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IHU_TIME_3E3h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ihu_time_3_e3h_init(struct mcu_233_ihu_time_3_e3h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_time_3_e3h_ihu_year_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_time_3_e3h_ihu_year_time_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_time_3_e3h_ihu_year_time_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_time_3_e3h_ihu_month_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_time_3_e3h_ihu_month_time_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_time_3_e3h_ihu_month_time_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_time_3_e3h_ihu_day_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_time_3_e3h_ihu_day_time_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_time_3_e3h_ihu_day_time_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_time_3_e3h_ihu_hour_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_time_3_e3h_ihu_hour_time_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_time_3_e3h_ihu_hour_time_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_time_3_e3h_ihu_minute_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_time_3_e3h_ihu_minute_time_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_time_3_e3h_ihu_minute_time_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_time_3_e3h_ihu_second_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_time_3_e3h_ihu_second_time_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_time_3_e3h_ihu_second_time_is_in_range(uint8_t value);

/**
 * Pack message Nav_2F2h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_nav_2_f2h_pack(
    uint8_t *dst_p,
    const struct mcu_233_nav_2_f2h_t *src_p,
    size_t size);

/**
 * Unpack message Nav_2F2h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_nav_2_f2h_unpack(
    struct mcu_233_nav_2_f2h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Nav_2F2h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_nav_2_f2h_init(struct mcu_233_nav_2_f2h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f2h_nav_speed_limit_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f2h_nav_speed_limit_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f2h_nav_speed_limit_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f2h_nav_speed_limit_units_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f2h_nav_speed_limit_units_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f2h_nav_speed_limit_units_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f2h_nav_speed_limit_default_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f2h_nav_speed_limit_default_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f2h_nav_speed_limit_default_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f2h_nav_country_codelnfo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f2h_nav_country_codelnfo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f2h_nav_country_codelnfo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f2h_nav_speed_limit_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f2h_nav_speed_limit_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f2h_nav_speed_limit_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f2h_nav_curr_road_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f2h_nav_curr_road_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f2h_nav_curr_road_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f2h_nav_speed_limit_conditional_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f2h_nav_speed_limit_conditional_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f2h_nav_speed_limit_conditional_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f2h_nav_speed_limit_non_default_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f2h_nav_speed_limit_non_default_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f2h_nav_speed_limit_non_default_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f2h_nav_enter_ramp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f2h_nav_enter_ramp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f2h_nav_enter_ramp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f2h_nav_ramp_dist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f2h_nav_ramp_dist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f2h_nav_ramp_dist_is_in_range(uint8_t value);

/**
 * Pack message Nav_2F3h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_nav_2_f3h_pack(
    uint8_t *dst_p,
    const struct mcu_233_nav_2_f3h_t *src_p,
    size_t size);

/**
 * Unpack message Nav_2F3h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_nav_2_f3h_unpack(
    struct mcu_233_nav_2_f3h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Nav_2F3h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_nav_2_f3h_init(struct mcu_233_nav_2_f3h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f3h_nav_speed_limit_rain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f3h_nav_speed_limit_rain_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f3h_nav_speed_limit_rain_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f3h_nav_speed_limit_snow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f3h_nav_speed_limit_snow_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f3h_nav_speed_limit_snow_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f3h_nav_speed_limit_fog_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f3h_nav_speed_limit_fog_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f3h_nav_speed_limit_fog_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f3h_nav_roundabout_spd_lmt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f3h_nav_roundabout_spd_lmt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f3h_nav_roundabout_spd_lmt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f3h_nav_roundabout_dist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f3h_nav_roundabout_dist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f3h_nav_roundabout_dist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f3h_nav_junction_dist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f3h_nav_junction_dist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f3h_nav_junction_dist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f3h_nav_other_traffic_sign_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f3h_nav_other_traffic_sign_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f3h_nav_other_traffic_sign_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f3h_nav_other_traffic_sign_dist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f3h_nav_other_traffic_sign_dist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f3h_nav_other_traffic_sign_dist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_nav_2_f3h_nav_road_winding_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_nav_2_f3h_nav_road_winding_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_nav_2_f3h_nav_road_winding_is_in_range(uint8_t value);

/**
 * Pack message IHU_BCM_2FBh.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ihu_bcm_2_f_bh_pack(
    uint8_t *dst_p,
    const struct mcu_233_ihu_bcm_2_f_bh_t *src_p,
    size_t size);

/**
 * Unpack message IHU_BCM_2FBh.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ihu_bcm_2_f_bh_unpack(
    struct mcu_233_ihu_bcm_2_f_bh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IHU_BCM_2FBh.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ihu_bcm_2_f_bh_init(struct mcu_233_ihu_bcm_2_f_bh_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_leaving_car_lock_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_leaving_car_lock_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_leaving_car_lock_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_door_lock_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_door_lock_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_door_lock_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_child_lock_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_child_lock_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_child_lock_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_ip_light_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_ip_light_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_ip_light_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_apl_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_apl_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_apl_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_mode_select_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_mode_select_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_mode_select_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_mir_fold_heat_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_mir_fold_heat_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_mir_fold_heat_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_windscreen_heat_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_windscreen_heat_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_windscreen_heat_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_lock_prompt_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_lock_prompt_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_lock_prompt_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_backlight_luminance_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_backlight_luminance_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_backlight_luminance_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_follow_me_time_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_follow_me_time_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_follow_me_time_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_logo_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_logo_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_logo_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_electric_sliding_door_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_electric_sliding_door_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_electric_sliding_door_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_search_vehicle_method_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_search_vehicle_method_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_search_vehicle_method_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_d_f_rw_auto_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_d_f_rw_auto_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_d_f_rw_auto_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_d_f_lw_auto_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_d_f_lw_auto_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_d_f_lw_auto_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_vehicle_power_mode_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_vehicle_power_mode_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_vehicle_power_mode_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_door_cent_lock_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_door_cent_lock_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_door_cent_lock_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_lock_car_close_window_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_lock_car_close_window_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_lock_car_close_window_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_follow_me_car_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_follow_me_car_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_follow_me_car_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_welcome_feature_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_welcome_feature_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_welcome_feature_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_steering_wheel_heating_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_steering_wheel_heating_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_steering_wheel_heating_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_automatic_driving_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_automatic_driving_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_automatic_driving_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_closing_car_lock_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_closing_car_lock_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_closing_car_lock_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_bcm_2_f_bh_ihu_delay_power_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_bcm_2_f_bh_ihu_delay_power_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_bcm_2_f_bh_ihu_delay_power_off_is_in_range(uint8_t value);

/**
 * Pack message IHU_ESC_255h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ihu_esc_255h_pack(
    uint8_t *dst_p,
    const struct mcu_233_ihu_esc_255h_t *src_p,
    size_t size);

/**
 * Unpack message IHU_ESC_255h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ihu_esc_255h_unpack(
    struct mcu_233_ihu_esc_255h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IHU_ESC_255h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ihu_esc_255h_init(struct mcu_233_ihu_esc_255h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_esc_255h_autohold_witchsettings_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_esc_255h_autohold_witchsettings_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_esc_255h_autohold_witchsettings_is_in_range(uint8_t value);

/**
 * Pack message TBOX_ACMM_213h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_tbox_acmm_213h_pack(
    uint8_t *dst_p,
    const struct mcu_233_tbox_acmm_213h_t *src_p,
    size_t size);

/**
 * Unpack message TBOX_ACMM_213h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_tbox_acmm_213h_unpack(
    struct mcu_233_tbox_acmm_213h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TBOX_ACMM_213h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_tbox_acmm_213h_init(struct mcu_233_tbox_acmm_213h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_acmm_213h_tbox_defrost_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_acmm_213h_tbox_defrost_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_acmm_213h_tbox_defrost_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_acmm_213h_tbox_main_swtich_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_acmm_213h_tbox_main_swtich_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_acmm_213h_tbox_main_swtich_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_acmm_213h_tbox_f_temp_set_ev_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_acmm_213h_tbox_f_temp_set_ev_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_acmm_213h_tbox_f_temp_set_ev_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_acmm_213h_tbox_f_temp_set_auto_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_acmm_213h_tbox_f_temp_set_auto_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_acmm_213h_tbox_f_temp_set_auto_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_acmm_213h_tbox_maxptc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_acmm_213h_tbox_maxptc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_acmm_213h_tbox_maxptc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_acmm_213h_tbox_maxac_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_acmm_213h_tbox_maxac_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_acmm_213h_tbox_maxac_is_in_range(uint8_t value);

/**
 * Pack message TBOX_BCM_2F1h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_tbox_bcm_2_f1h_pack(
    uint8_t *dst_p,
    const struct mcu_233_tbox_bcm_2_f1h_t *src_p,
    size_t size);

/**
 * Unpack message TBOX_BCM_2F1h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_tbox_bcm_2_f1h_unpack(
    struct mcu_233_tbox_bcm_2_f1h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TBOX_BCM_2F1h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_tbox_bcm_2_f1h_init(struct mcu_233_tbox_bcm_2_f1h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_w_auto_swich_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_w_auto_swich_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_w_auto_swich_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_door_lock_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_door_lock_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_door_lock_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_remote_power_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_remote_power_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_remote_power_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_remote_power_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_remote_power_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_remote_power_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_bt_key_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_bt_key_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_bt_key_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_search_vehicle_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_search_vehicle_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_search_vehicle_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_window_ventilation_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_window_ventilation_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_window_ventilation_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_d_f_rw_auto_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_d_f_rw_auto_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_d_f_rw_auto_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_d_f_lw_auto_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_d_f_lw_auto_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_d_f_lw_auto_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_ota_power_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_ota_power_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_ota_power_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_smm_heat_level_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_smm_heat_level_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_smm_heat_level_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_smm_fan_level_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_smm_fan_level_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_smm_fan_level_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f1h_tbox_ota_power_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f1h_tbox_ota_power_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f1h_tbox_ota_power_off_is_in_range(uint8_t value);

/**
 * Pack message TBOX_BCM_2F5h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_tbox_bcm_2_f5h_pack(
    uint8_t *dst_p,
    const struct mcu_233_tbox_bcm_2_f5h_t *src_p,
    size_t size);

/**
 * Unpack message TBOX_BCM_2F5h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_tbox_bcm_2_f5h_unpack(
    struct mcu_233_tbox_bcm_2_f5h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TBOX_BCM_2F5h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_tbox_bcm_2_f5h_init(struct mcu_233_tbox_bcm_2_f5h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_bcm_2_f5h_t_box_rem_authentication_rq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f5h_t_box_rem_authentication_rq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f5h_t_box_rem_authentication_rq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t mcu_233_tbox_bcm_2_f5h_t_box_remote_auth_result_rep_mum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_bcm_2_f5h_t_box_remote_auth_result_rep_mum_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_bcm_2_f5h_t_box_remote_auth_result_rep_mum_is_in_range(uint64_t value);

/**
 * Pack message IHU_NM_40Ah.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ihu_nm_40_ah_pack(
    uint8_t *dst_p,
    const struct mcu_233_ihu_nm_40_ah_t *src_p,
    size_t size);

/**
 * Unpack message IHU_NM_40Ah.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ihu_nm_40_ah_unpack(
    struct mcu_233_ihu_nm_40_ah_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IHU_NM_40Ah.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ihu_nm_40_ah_init(struct mcu_233_ihu_nm_40_ah_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_nm_40_ah_nm_dest_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_nm_40_ah_nm_dest_address_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_nm_40_ah_nm_dest_address_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_nm_40_ah_nm_sleep_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_nm_40_ah_nm_sleep_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_nm_40_ah_nm_sleep_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_nm_40_ah_nm_sleep_ind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_nm_40_ah_nm_sleep_ind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_nm_40_ah_nm_sleep_ind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_nm_40_ah_nm_limphome_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_nm_40_ah_nm_limphome_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_nm_40_ah_nm_limphome_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_nm_40_ah_nm_ring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_nm_40_ah_nm_ring_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_nm_40_ah_nm_ring_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ihu_nm_40_ah_nm_alive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ihu_nm_40_ah_nm_alive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ihu_nm_40_ah_nm_alive_is_in_range(uint8_t value);

/**
 * Pack message TBOX_NM_410h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_tbox_nm_410h_pack(
    uint8_t *dst_p,
    const struct mcu_233_tbox_nm_410h_t *src_p,
    size_t size);

/**
 * Unpack message TBOX_NM_410h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_tbox_nm_410h_unpack(
    struct mcu_233_tbox_nm_410h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TBOX_NM_410h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_tbox_nm_410h_init(struct mcu_233_tbox_nm_410h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_nm_410h_nm_dest_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_nm_410h_nm_dest_address_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_nm_410h_nm_dest_address_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_nm_410h_nm_sleep_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_nm_410h_nm_sleep_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_nm_410h_nm_sleep_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_nm_410h_nm_sleep_ind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_nm_410h_nm_sleep_ind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_nm_410h_nm_sleep_ind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_nm_410h_nm_limphome_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_nm_410h_nm_limphome_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_nm_410h_nm_limphome_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_nm_410h_nm_ring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_nm_410h_nm_ring_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_nm_410h_nm_ring_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_tbox_nm_410h_nm_alive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_tbox_nm_410h_nm_alive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_tbox_nm_410h_nm_alive_is_in_range(uint8_t value);

/**
 * Pack message CGW_NM_402h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_cgw_nm_402h_pack(
    uint8_t *dst_p,
    const struct mcu_233_cgw_nm_402h_t *src_p,
    size_t size);

/**
 * Unpack message CGW_NM_402h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_cgw_nm_402h_unpack(
    struct mcu_233_cgw_nm_402h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CGW_NM_402h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_cgw_nm_402h_init(struct mcu_233_cgw_nm_402h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_cgw_nm_402h_nm_dest_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_cgw_nm_402h_nm_dest_address_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_cgw_nm_402h_nm_dest_address_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_cgw_nm_402h_nm_sleep_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_cgw_nm_402h_nm_sleep_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_cgw_nm_402h_nm_sleep_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_cgw_nm_402h_nm_sleep_ind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_cgw_nm_402h_nm_sleep_ind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_cgw_nm_402h_nm_sleep_ind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_cgw_nm_402h_nm_limphome_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_cgw_nm_402h_nm_limphome_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_cgw_nm_402h_nm_limphome_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_cgw_nm_402h_nm_ring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_cgw_nm_402h_nm_ring_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_cgw_nm_402h_nm_ring_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_cgw_nm_402h_nm_alive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_cgw_nm_402h_nm_alive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_cgw_nm_402h_nm_alive_is_in_range(uint8_t value);

/**
 * Pack message ESCL_Status_031h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_escl_status_031h_pack(
    uint8_t *dst_p,
    const struct mcu_233_escl_status_031h_t *src_p,
    size_t size);

/**
 * Unpack message ESCL_Status_031h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_escl_status_031h_unpack(
    struct mcu_233_escl_status_031h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESCL_Status_031h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_escl_status_031h_init(struct mcu_233_escl_status_031h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_lock_unlock_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_lock_unlock_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_lock_unlock_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_failure_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_failure_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_failure_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_authentication_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_authentication_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_authentication_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_error_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_error_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_error_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_busy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_busy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_busy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_lock_limit_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_lock_limit_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_lock_limit_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_unlock_limit_sw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_unlock_limit_sw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_unlock_limit_sw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_operation_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_operation_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_operation_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_lock_switch_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_lock_switch_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_lock_switch_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_diag_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_diag_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_diag_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_bolt_blocked_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_bolt_blocked_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_bolt_blocked_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_nm_usr_data3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_nm_usr_data3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_nm_usr_data3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_mortor_open_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_mortor_open_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_mortor_open_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_unlock_switch_particle_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_unlock_switch_particle_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_unlock_switch_particle_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_lock_switch_particle_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_lock_switch_particle_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_lock_switch_particle_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_unlock_switch_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_unlock_switch_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_unlock_switch_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_status_031h_escl_un_lock_operation_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_status_031h_escl_un_lock_operation_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_status_031h_escl_un_lock_operation_failure_is_in_range(uint8_t value);

/**
 * Pack message ESCL_Certification_032h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_escl_certification_032h_pack(
    uint8_t *dst_p,
    const struct mcu_233_escl_certification_032h_t *src_p,
    size_t size);

/**
 * Unpack message ESCL_Certification_032h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_escl_certification_032h_unpack(
    struct mcu_233_escl_certification_032h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESCL_Certification_032h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_escl_certification_032h_init(struct mcu_233_escl_certification_032h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t mcu_233_escl_certification_032h_escl_ramdon_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_certification_032h_escl_ramdon_code_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_certification_032h_escl_ramdon_code_is_in_range(uint32_t value);

/**
 * Pack message ESCL_NM_405h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_escl_nm_405h_pack(
    uint8_t *dst_p,
    const struct mcu_233_escl_nm_405h_t *src_p,
    size_t size);

/**
 * Unpack message ESCL_NM_405h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_escl_nm_405h_unpack(
    struct mcu_233_escl_nm_405h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESCL_NM_405h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_escl_nm_405h_init(struct mcu_233_escl_nm_405h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_nm_405h_nm_dest_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_nm_405h_nm_dest_address_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_nm_405h_nm_dest_address_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_nm_405h_nm_sleep_ack_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_nm_405h_nm_sleep_ack_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_nm_405h_nm_sleep_ack_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_nm_405h_nm_sleep_ind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_nm_405h_nm_sleep_ind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_nm_405h_nm_sleep_ind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_nm_405h_nm_limphome_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_nm_405h_nm_limphome_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_nm_405h_nm_limphome_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_nm_405h_nm_ring_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_nm_405h_nm_ring_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_nm_405h_nm_ring_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_escl_nm_405h_nm_alive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_escl_nm_405h_nm_alive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_escl_nm_405h_nm_alive_is_in_range(uint8_t value);

/**
 * Pack message CCS_2F7h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_ccs_2_f7h_pack(
    uint8_t *dst_p,
    const struct mcu_233_ccs_2_f7h_t *src_p,
    size_t size);

/**
 * Unpack message CCS_2F7h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_ccs_2_f7h_unpack(
    struct mcu_233_ccs_2_f7h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CCS_2F7h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_ccs_2_f7h_init(struct mcu_233_ccs_2_f7h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ccs_2_f7h_ccs_tem_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ccs_2_f7h_ccs_tem_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ccs_2_f7h_ccs_tem_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ccs_2_f7h_ccs_ac_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ccs_2_f7h_ccs_ac_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ccs_2_f7h_ccs_ac_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ccs_2_f7h_ccs_defrost_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ccs_2_f7h_ccs_defrost_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ccs_2_f7h_ccs_defrost_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ccs_2_f7h_ccs_cycle_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ccs_2_f7h_ccs_cycle_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ccs_2_f7h_ccs_cycle_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ccs_2_f7h_ccs_auto_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ccs_2_f7h_ccs_auto_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ccs_2_f7h_ccs_auto_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ccs_2_f7h_ccs_main_swtich_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ccs_2_f7h_ccs_main_swtich_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ccs_2_f7h_ccs_main_swtich_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_ccs_2_f7h_ccs_blowerl_lvl_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_ccs_2_f7h_ccs_blowerl_lvl_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_ccs_2_f7h_ccs_blowerl_lvl_set_is_in_range(uint8_t value);

/**
 * Pack message PSD_188h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_psd_188h_pack(
    uint8_t *dst_p,
    const struct mcu_233_psd_188h_t *src_p,
    size_t size);

/**
 * Unpack message PSD_188h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_psd_188h_unpack(
    struct mcu_233_psd_188h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PSD_188h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_psd_188h_init(struct mcu_233_psd_188h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_psd_188h_psd_childlockstatus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_psd_188h_psd_childlockstatus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_psd_188h_psd_childlockstatus_is_in_range(uint8_t value);

/**
 * Pack message PSD_288h.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int mcu_233_psd_288h_pack(
    uint8_t *dst_p,
    const struct mcu_233_psd_288h_t *src_p,
    size_t size);

/**
 * Unpack message PSD_288h.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int mcu_233_psd_288h_unpack(
    struct mcu_233_psd_288h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PSD_288h.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int mcu_233_psd_288h_init(struct mcu_233_psd_288h_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t mcu_233_psd_288h_psd_voice_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double mcu_233_psd_288h_psd_voice_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool mcu_233_psd_288h_psd_voice_control_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
