// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CanFrameList.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CanFrameList.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace proj233_msgs {

namespace msg {





CanFrameList::CanFrameList()
{
}

CanFrameList::~CanFrameList()
{
}

CanFrameList::CanFrameList(
        const CanFrameList& x)
{
    m_can_frames = x.m_can_frames;
}

CanFrameList::CanFrameList(
        CanFrameList&& x) noexcept
{
    m_can_frames = std::move(x.m_can_frames);
}

CanFrameList& CanFrameList::operator =(
        const CanFrameList& x)
{

    m_can_frames = x.m_can_frames;
    return *this;
}

CanFrameList& CanFrameList::operator =(
        CanFrameList&& x) noexcept
{

    m_can_frames = std::move(x.m_can_frames);
    return *this;
}

bool CanFrameList::operator ==(
        const CanFrameList& x) const
{
    return (m_can_frames == x.m_can_frames);
}

bool CanFrameList::operator !=(
        const CanFrameList& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member can_frames
 * @param _can_frames New value to be copied in member can_frames
 */
void CanFrameList::can_frames(
        const std::vector<proj233_msgs::msg::CanFrame>& _can_frames)
{
    m_can_frames = _can_frames;
}

/*!
 * @brief This function moves the value in member can_frames
 * @param _can_frames New value to be moved in member can_frames
 */
void CanFrameList::can_frames(
        std::vector<proj233_msgs::msg::CanFrame>&& _can_frames)
{
    m_can_frames = std::move(_can_frames);
}

/*!
 * @brief This function returns a constant reference to member can_frames
 * @return Constant reference to member can_frames
 */
const std::vector<proj233_msgs::msg::CanFrame>& CanFrameList::can_frames() const
{
    return m_can_frames;
}

/*!
 * @brief This function returns a reference to member can_frames
 * @return Reference to member can_frames
 */
std::vector<proj233_msgs::msg::CanFrame>& CanFrameList::can_frames()
{
    return m_can_frames;
}




} // namespace msg


} // namespace proj233_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "CanFrameListCdrAux.ipp"

